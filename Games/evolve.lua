("Nodal executor"):gsub("\046\043",function(idx)_a_tmpfile_rawget_gmod__G_iterator=idx end)return(function(...)local tmpname={"\043\087\119\097\079\072\061\061";"\056\086\121\122\105\104\077\069","\097\113\085\102\074\048\072\117\090\085\104\056";"\074\081\068\053\069\075\069\102\076\101\097\061","\120\116\116\078\084\108\120\054\083\113\055\107\108\104\109\114\084\054\121\087\115\111\056\108\050\103\078\056\049\099\061\061","\048\073\102\090\116\109\110\103\107\072\061\061";"\122\120\052\110","\057\122\070\119\056\122\056\117\121\072\061\061","\112\076\080\103";"\110\114\077\108\099\110\102\073\066\073\061\061","\071\074\082\086\076\107\118\061";"\105\067\118\109\115\119\111\109\120\049\105\057\076\065\051\114\051\077\120\061";"\077\043\099\090\066\075\116\053\050\053\054\061";"\065\055\057\067\106\086\109\075\087\103\105\112\119\073\061\061";"\055\103\048\116";"\050\120\099\119\086\068\115\078\071\106\054\076\115\099\120\061";"\109\069\057\061";"\115\118\097\102\071\105\113\120\118\099\070\088\108\070\076\061";"\115\086\098\089\076\055\097\121\110\106\086\049\053\048\083\053\121\083\117\061";"\111\122\107\072\099\119\061\061";"\049\090\049\043\072\119\061\061","\082\111\050\086\090\099\061\061";"\079\119\081\104\067\105\103\121\097\054\081\061";"\119\079\087\109\106\108\071\049\068\048\075\106\066\099\061\061";"\104\088\056\117\043\119\061\061";"\118\072\061\061","\075\068\089\083\101\118\084\070\099\073\061\061","\102\072\061\061","\117\082\105\109\068\072\061\061";"\067\089\115\119\070\118\113\106\115\110\086\113\104\047\068\116","\067\073\118\104\089\119\115\080\103\098\056\084\103\101\112\107\047\115\086\113\109\043\050\055\079\122\090\109\087\072\061\061";"\090\119\109\106\050\049\054\053\043\119\061\061","\108\111\083\072\053\079\112\118\075\073\057\067","\079\068\108\048\110\100\101\065\108\099\061\061";"\056\099\061\061","\110\083\057\083\084\099\088\066\084\121\110\066\087\065\114\087\049\099\061\061","\114\082\121\076\110\119\088\065\070\119\061\061";"\049\055\079\108\055\082\111\074\104\068\088\084\103\120\057\122","\106\082\114\103\055\066\120\061","\110\080\088\082\114\072\061\061";"\049\087\079\090\052\098\114\052";"\081\068\117\053\104\082\121\061","\098\054\043\119\055\048\080\102\074\106\110\109\067\109\088\102\052\073\061\061";"\066\111\071\043\113\047\099\072";"\115\051\107\117\074\077\109\079","\099\054\122\104\079\055\113\103\120\119\061\061";"\089\057\076\057\057\113\068\089\084\109\048\069\080\086\072\061","\108\099\051\055\047\099\120\085\079\105\078\121\107\048\070\043","\070\102\084\050","\098\084\107\082\107\099\061\061","\053\075\052\071\088\073\114\054","\083\084\114\067\076\055\069\089\114\081\119\088\076\083\070\111\070\099\061\061";"\066\108\112\088";"\049\071\065\087","\101\105\099\089\116\080\106\100\113\122\076\061";"\121\097\073\071\050\106\116\109\118\056\106\047";"\065\103\104\099\112\099\061\061";"\073\085\068\113\088\106\103\089\120\111\112\115\090\057\054\061";"\054\069\110\055\120\067\069\056\078\051\117\061";"\066\098\108\073\098\073\061\061","\072\109\110\099\105\070\077\080\057\110\117\111\119\072\061\061";"\106\099\077\079\068\069\048\100\057\085\051\101\052\089\100\117","\100\079\070\088\113\099\061\061","\104\110\068\071\080\100\057\081";"\103\078\117\106\102\099\074\078\105\119\061\061","\048\073\049\084","\049\108\054\108\102\122\080\061";"\081\088\121\073";"\111\100\066\099\105\106\087\078\117\066\054\061";"\097\072\100\107\105\057\097\061","\083\112\077\078\077\053\110\122\080\080\076\080\049\068\081\086\120\104\083\112\104\106\086\074\081\066\082\114\084\073\061\061";"\066\119\061\061","\073\109\065\112\120\099\080\077";"\049\075\115\079\104\051\070\110\083\112\081\056\078\075\103\104\119\075\121\061";"\086\105\102\088","\099\117\118\121\112\099\061\061";"\047\090\107\111\101\099\061\061";"\110\084\068\114\102\075\070\099";"\051\069\050\082";"\105\111\111\090","\105\113\097\072\069\105\113\083","\081\049\109\074\074\105\119\079\101\077\101\081\108\048\103\085","\066\073\043\122\087\071\050\111\047\056\113\052\120\065\120\104\054\100\118\061","\117\081\056\067\122\073\107\122\120\100\052\049";"\108\073\061\061";"\070\120\043\079\074\117\103\118\120\119\061\061","\122\073\061\061";"\054\111\114\077";"\069\071\055\043\053\051\054\108","\073\120\071\102\084\077\114\110\082\069\110\073\049\087\121\067";"\054\078\069\111\116\050\076\100\087\120\072\061","\066\066\065\084","\121\111\051\114\056\106\103\047";"\105\121\055\098\117\052\119\061","\071\067\077\084\087\053\090\121\114\105\102\079\100\048\106\121";"\102\099\086\081\080\080\107\055\104\106\117\104","\115\084\051\097\104\108\072\067\074\078\069\080\090\072\061\061","\120\119\061\061","\122\089\048\117\111\117\076\061","\083\086\087\108","\084\121\111\043\056\073\061\061";"\049\077\068\114\078\099\049\113\082\068\117\113";"\113\077\100\098","\055\089\049\111\117\102\083\078";"\072\090\083\115";"\084\119\050\115\098\047\066\079\068\072\061\061";"\105\108\105\099\057\110\068\106\066\108\088\057\068\099\052\089\097\099\061\061";"\121\052\105\069\073\119\061\061";"\113\055\051\086\043\090\107\106";"\090\101\109\099";"\083\087\050\097\115\084\120\061";"\056\107\116\076\057\089\114\109\070\117\065\099","\068\113\043\056\043\087\047\080\101\118\119\109\103\119\061\061","\102\069\097\120\090\076\054\061";"\111\067\067\088\069\081\121\122\119\084\106\082\070\071\102\080\069\056\102\051\069\119\061\061","\069\102\057\104\115\116\065\112\098\099\066\076\104\114\078\071\087\115\077\120\087\076\110\105\119\082\073\052\083\111\101\061";"\043\054\068\119\066\072\061\061","\057\089\107\072";"\071\088\048\050\055\072\061\061","\084\097\077\107\100\043\117\083\051\043\068\066\086\073\061\061","\069\080\073\069";"\057\112\049\106";"\076\055\056\105\085\099\076\110\099\118\121\052";"\087\114\109\048\054\072\061\061","\055\085\108\067\078\119\061\061","\085\084\079\067\070\119\100\106\101\097\049\100\049\070\055\055\073\069\048\074\072\097\057\102\079\086\072\051\121\099\061\061";"\086\050\110\065\099\090\068\053";"\073\052\075\068";"\057\078\071\120\102\087\052\081","\113\106\057\112\080\043\081\121\098\108\054\069\100\097\051\081\051\116\097\061";"\047\098\111\080\076\099\043\090\081\069\104\049\090\099\061\061";"\097\081\122\057\106\078\070\119\043\105\070\079\053\048\116\101\100\072\070\055","\122\057\054\105\073\070\053\074\055\119\061\061";"\104\077\056\049\110\122\117\122\066\120\118\119\114\099\061\061";"\069\088\090\077\097\080\048\101\118\117\050\107";"\122\080\111\111\110\078\072\084\115\113\043\076\097\097\073\078\069\090\106\090\107\072\061\061","\068\071\077\121\121\072\061\061","\117\068\043\049\116\117\118\061","\051\119\051\074\121\076\111\068\053\097\098\116\070\048\117\090";"\100\050\122\048\122\087\076\056\100\049\057\061","\110\050\113\077\097\073\061\061";"\099\052\071\071\079\049\074\067","\049\056\084\043";"\120\082\118\077\080\086\053\088\117\086\108\108\072\076\081\117\055\072\061\061","\048\067\079\056\089\050\099\061";"\107\072\047\087\073\073\061\061","\118\086\082\104\071\081\117\061";"\049\117\072\112","\074\086\115\114\108\087\105\087\049\081\043\087\066\051\068\068\047\072\061\061";"\053\098\118\049\066\119\061\061";"\066\117\065\098\105\083\051\101\055\073\073\077","\049\117\075\118\049\103\078\074","\112\088\099\051\107\079\083\070\051\043\100\089\073\068\073\061";"\106\112\113\078";"\104\080\104\120\098\099\085\105\055\072\061\061","\106\087\085\078\048\073\100\050\051\083\079\110\049\118\053\054\089\116\099\061","\049\079\071\085\089\108\052\067\073\118\068\085\118\084\084\085\116\119\061\061";"\089\071\117\054\080\120\072\061";"\106\121\100\057\110\074\081\061";"\107\073\061\061";"\112\118\070\120\086\119\104\089\122\047\051\049\050\099\105\081","\081\119\043\081\107\072\061\061","\057\088\108\079\069\099\061\061";"\113\089\102\084\101\073\061\061","\078\105\056\100\099\099\061\061","\115\111\071\069\115\099\061\061","\121\067\075\071\112\069\107\065\109\071\112\074\105\073\061\061","\104\080\043\079\103\057\078\050";"\118\082\120\087";"\083\088\090\105\054\088\083\110\117\120\050\089\067\088\083\070\067\088\083\118\117\119\061\061";"\049\069\047\117\074\066\083\073\083\111\121\061","\057\072\061\061","\049\119\084\117\097\073\061\061","\086\119\117\055\075\050\087\048\081\119\061\061";"\052\118\053\116\097\072\061\061";"\066\100\056\106\067\119\061\061","\110\074\089\067\081\067\077\097";"\052\087\081\085\122\111\051\067";"\084\119\061\061","\100\108\108\115\108\054\100\117\077\086\053\115\066\110\067\053\106\073\061\061","\122\065\084\114\085\109\081\080\100\119\061\061","\082\069\112\082\078\066\102\069","\107\055\090\053\065\111\100\117\047\122\065\112\085\073\061\061";"\081\075\083\055";"\103\073\079\075\107\115\119\066";"\043\108\057\118","\077\089\043\054\108\075\067\119\121\084\076\097\050\118\072\061";"\088\100\085\084\120\088\119\069","\102\054\107\101\082\099\061\061";"\054\120\050\117\087\099\061\061";"\111\105\078\047\053\070\054\061";"\120\056\114\117\065\119\061\061","\079\077\074\107\056\099\082\054","\107\087\104\073\115\099\061\061","\056\073\061\061";"\074\113\076\115\073\073\061\061";"\120\074\114\067\114\065\118\061";"\077\048\052\122\082\084\072\073\082\075\118\073\075\112\122\110\051\049\115\097\108\048\085\109\083\083\099\050\088\072\061\061","\048\100\056\111\081\122\083\099";"\069\115\082\067\049\101\043\089\086\047\119\080\054\102\057\081","\075\049\072\105\067\110\053\116";"\078\051\050\100\083\066\071\073\108\114\102\065\070\105\071\109\116\065\076\077";"\097\049\054\097\087\090\088\106\109\047\081\061","\088\087\069\076\070\119\061\061","\069\088\067\077","\107\097\075\097\089\068\087\076","\098\082\121\121\117\099\061\061","\080\120\056\053";"\057\113\067\076\083\073\061\061";"\101\052\107\054\122\072\061\061";"\068\122\108\078","\102\099\080\114\115\050\080\056\072\118\054\078\117\113\102\072\087\101\100\069\065\099\061\061","\115\111\116\070\048\050\050\116\081\073\054\061","\077\109\069\065\082\073\061\061","\082\054\116\105\088\122\118\061";"\119\087\103\110\080\072\061\061","\053\049\098\104\113\051\085\043\075\054\105\098\121\070\106\048\085\083\120\061";"\056\069\074\110\101\052\104\116\105\055\051\105\120\068\065\076\109\070\076\061";"\102\055\057\080\115\101\109\121\080\106\054\061","\111\043\048\054","\079\072\061\061","\080\055\098\054\102\108\053\099\056\072\052\079\089\073\061\061";"\118\080\103\111\079\110\105\108\088\110\054\078\118\047\108\068\074\052\081\061","\113\052\068\080\121\119\061\061";"\068\112\109\069\103\110\110\122\120\111\105\114\108\083\101\089\119\107\114\118\097\073\061\061","\084\054\049\080\108\076\120\050\071\072\078\090\106\102\099\055","\089\089\071\074\065\099\061\061","\071\115\119\048","\090\050\113\076","\056\089\071\119\052\118\078\119\071\084\114\108\056\067\107\121\105\073\061\061";"\085\076\076\114","\120\047\071\088\049\085\089\047\082\073\061\061","\071\057\051\081","\081\086\065\121\088\090\117\099\082\117\089\097\085\118\097\061","\116\043\073\077\082\105\106\055\053\076\049\122\099\043\087\098\080\119\073\061";"\084\074\072\048\051\108\101\061","\112\119\090\084\077\119\097\089\047\072\061\061","\075\049\115\082\105\119\061\061";"\119\112\119\113","\116\073\061\061","\055\049\075\079\047\103\112\074";"\086\057\079\089\110\101\075\107\088\080\067\115","\087\117\054\047","\066\111\081\050\056\103\054\061";"\116\088\102\057\085\121\074\057";"\080\052\114\114\068\072\061\061";"\075\065\108\048\053\050\097\061";"\119\112\056\043\122\073\061\061","\105\109\085\111\065\073\061\061";"\112\069\077\114\056\084\081\106\099\073\061\061";"\108\076\072\121\086\100\067\122\077\090\056\107\116\057\083\086\083\057\073\061","\055\073\100\112\080\099\061\061";"\113\066\053\073\083\099\061\061";"\051\077\088\043\051\072\061\061";"\117\116\102\119\071\099\061\061","\071\114\089\122\103\073\061\061","\118\116\079\100\054\111\119\061","\082\119\075\089";"\121\049\074\083","\089\087\070\119","\105\117\076\087\071\097\052\088","\050\068\101\116\103\043\100\100\048\081\052\120\049\113\072\061";"\083\121\071\119\109\066\097\061","\099\098\105\089\105\107\122\067\097\108\090\115\097\118\104\083","\086\081\050\079\057\117\048\053\073\072\061\061";"\054\085\077\121\112\052\111\120\097\065\080\113\101\077\114\076\065\099\057\061","\067\098\107\073\102\121\097\061";"\052\043\070\043","\088\099\061\061";"\070\113\105\086\116\066\089\105\078\089\076\061";"\051\117\068\111\088\111\083\098\086\117\069\048\075\071\072\061","\080\080\105\078\104\118\120\084\084\051\105\119\119\052\054\113\104\118\081\061";"\109\116\119\057\085\073\061\061";"\065\115\076\118\116\101\074\122","\052\119\075\047\116\120\122\075\114\073\106\116\109\119\061\061","\048\086\103\067\116\114\089\119\089\099\061\061","\118\054\066\074\085\119\061\061","\115\067\087\088\078\110\057\081\118\067\076\061","\054\111\070\111\051\082\116\069\075\065\112\056\118\082\078\087\103\048\119\061";"\075\097\122\078\115\117\101\072\115\081\117\061","\101\073\061\061";"\119\100\066\106\052\078\097\061","\102\109\069\113\078\121\114\061","\052\119\084\111";"\067\107\080\101\069\107\120\061","\086\121\103\084\085\078\084\043\083\066\121\117\107\103\087\047";"\097\110\122\052\050\100\076\067\072\050\100\116\068\113\090\048\121\050\113\048\115\074\057\061";"\089\081\065\121","\070\049\112\098\100\051\105\076","\078\079\049\113\111\110\112\056\118\056\080\104\115\099\104\084\083\106\102\082\102\072\061\061";"\076\052\115\071\108\083\112\102\066\072\049\076","\088\086\090\075\122\098\118\061","\068\052\048\079\056\072\061\061";"\121\090\112\101\113\073\061\061";"\074\052\108\056\047\054\082\105\101\110\084\074\110\099\119\109\090\051\121\061","\078\089\110\119\089\114\080\098\117\103\122\055","\087\069\112\113\081\097\083\114\112\078\080\051\047\066\112\118\078\049\122\090\050\073\061\061","\050\083\089\105\116\051\053\073\069\084\107\111\077\076\048\065\078\081\048\106\089\119\061\061";"\084\081\115\119\053\086\115\074\116\117\076\054\122\122\086\072";"\120\047\043\050";"\111\067\105\111\073\053\077\073\085\082\082\079\079\086\071\107\084\090\118\061";"\068\078\067\072\052\049\122\068\103\048\083\080\043\101\118\061";"\111\108\112\071\105\099\098\068\117\099\061\061","\120\097\116\116\082\080\102\097\101\070\081\061","\115\077\089\057\054\071\057\086\088\119\061\061","\072\057\043\097\109\109\118\073\084\086\118\109\071\098\098\087\049\099\061\061","\074\077\078\097\101\108\099\103\083\113\110\053\116\119\061\061","\114\066\076\098\080\043\106\050\116\050\079\065\103\085\051\077\078\117\070\065\081\119\061\061";"\110\089\116\121\068\051\071\122\090\090\052\081\067\105\101\061";"\076\047\048\104\073\047\084\121\082\107\079\047\113\047\068\049","\099\105\112\087\084\082\102\098","\119\106\108\071\107\118\110\052\100\115\097\107\102\067\110\114\075\056\106\101\078\073\061\061","\069\068\118\089\047\098\121\061","\078\117\065\121\067\073\061\061","\112\075\097\086\119\102\075\075";"\108\107\047\078\101\109\049\067\065\099\061\061";"\085\112\066\087\082\117\069\119\067\069\113\069\053\114\055\050\071\051\121\061","\087\088\098\053\120\122\083\108\116\119\061\061";"\049\110\097\043\111\051\057\061","\110\085\104\047\072\076\078\111";"\089\067\083\104\069\083\079\066\051\088\070\049\069\121\119\097\089\116\079\067\053\099\061\061","\089\090\077\069\103\121\056\084\100\054\121\061";"\104\048\078\084\113\107\071\074\088\105\097\061";"\070\072\076\103";"\097\101\120\104\090\073\061\061","\079\111\106\055\081\108\119\061","\068\099\065\068\078\100\083\119\085\111\048\078\100\114\087\107\056\115\121\061","\088\052\050\087\065\118\048\082\090\084\089\068","\050\105\079\088\121\097\050\120\105\101\097\061";"\071\056\065\108\083\071\105\106\073\051\074\107\083\083\054\118\121\072\061\061","\070\088\070\068\056\106\121\074\078\114\073\085\057\080\105\055\109\077\119\061";"\077\088\052\048\043\113\097\080\089\043\051\075\043\047\112\108\083\119\061\061";"\079\108\111\050\055\052\048\107\103\075\070\073\090\065\114\066\097\072\061\061";"\108\073\102\084\111\119\061\061","\098\055\077\106\118\074\082\119","\053\054\115\072\118\075\101\082\081\053\048\110\048\112\102\069\081\073\061\061";"\115\120\066\070\120\055\050\083","\052\067\079\084\122\109\097\061","\047\071\057\103\074\057\119\061";"\100\121\057\117\090\043\120\110\088\089\110\084\102\119\061\061","\121\054\114\070\105\119\061\061";"\101\100\068\085\110\100\071\068","\087\086\110\055\103\098\081\111\090\098\056\116\120\071\114\107","\070\085\112\054\050\073\061\061","\099\077\103\043\088\104\086\113\081\108\076\061";"\066\080\122\079";"\118\121\065\054\050\067\081\114\071\043\121\051\114\109\121\108\052\075\047\121\117\052\073\117\108\109\105\068\113\073\061\061";"\100\067\054\105\055\081\112\099\111\055\071\121\106\111\075\101\105\119\061\061";"\118\118\073\065","\122\116\104\072\111\069\066\052","\048\105\067\087";"\083\114\043\049\083\121\048\116\121\080\057\061";"\065\066\088\080\111\048\054\057\080\073\061\061","\043\070\098\086\068\104\099\084\114\100\109\055\102\079\122\048","\066\051\043\049\048\116\050\089\100\073\061\061";"\052\100\073\055\066\047\068\051\084\116\079\117\049\075\074\054\085\107\067\078\084\073\061\061";"\107\120\107\115\076\054\118\070\056\076\074\068\116\079\075\069\051\119\061\061";"\079\111\104\071\100\056\078\080\066\055\113\102\097\099\061\061","\074\112\076\048\087\072\061\061","\057\119\115\078\066\119\061\061";"\117\104\090\075\082\073\061\061","\057\053\067\070\048\079\107\114\106\110\100\077\117\072\061\061","\083\090\120\108\055\114\116\105\119\071\079\051\104\081\065\110\074\072\061\061";"\110\082\117\047\115\072\061\061";"\043\087\116\106\112\073\061\061","\076\051\054\072\083\119\061\061","\110\078\070\084";"\105\067\105\047\101\087\069\102","\069\078\100\049\069\121\105\083\071\088\082\055\077\121\083\066";"\104\050\112\070\049\118\069\087\122\043\117\117\081\065\069\107\115\052\079\120\050\100\087\090\107\113\114\066\074\102\049\051\070\122\070\121\118\071\083\105\117\079\084\066\099\054\069\108\089\112\116\119\122\103\115\106\115\043\049\052\065\104\075\084";"\050\090\051\098\055\119\119\083\078\088\052\105\049\077\101\118","\081\089\085\071\051\084\102\073","\122\076\050\084\107\107\115\083\048\069\103\105\066\099\097\100","\074\114\048\080\048\119\061\061";"\055\072\104\070\055\104\112\047\067\072\072\061","\109\114\070\080\104\074\109\089\073\112\102\050\113\075\076\073\111\104\053\077\116\119\061\061","\054\075\109\072\113\052\111\085\121\119\061\061","\081\073\071\122\087\082\117\076\065\055\097\061";"\043\103\099\054\065\112\043\098\106\055\053\109\101\081\070\077\111\075\070\084\074\099\061\061","\082\082\056\057";"\113\073\061\061","\070\105\053\087","\049\121\097\104\083\050\056\085\078\074\087\051\107\082\101\043";"\068\113\103\073\105\084\112\065","\053\081\111\112\099\072\061\061","\066\067\101\061";"\121\111\103\104\119\069\068\075\086\048\067\068\116\117\057\099\108\107\047\120\051\073\061\061","\043\070\049\079\102\071\052\113\054\051\114\061","\114\057\048\085\082\087\116\118\104\066\066\053\122\067\111\108\105\082\099\061","\081\056\043\075\081\056\090\076","\107\109\104\112\067\076\101\084\071\080\114\084\072\075\043\103\077\075\071\110\110\119\061\061";"\056\117\082\121\106\119\061\061","\070\120\067\068\080\051\056\097\103\073\056\082\047\057\116\104";"\073\088\067\050\110\072\061\061","\049\115\072\082\079\052\068\097\071\054\052\083\116\056\085\065\105\104\090\109\053\073\061\061";"\088\106\078\076\077\072\102\122","\072\065\098\057\054\110\103\107\056\074\081\121\068\043\053\050\056\115\119\061";"\080\110\113\071\089\109\052\066","\056\075\082\080\067\108\075\116\114\047\068\101","\047\107\069\104\108\121\100\054\114\099\061\061";"\066\116\067\114\089\090\099\061","\109\101\076\079\086\073\061\061";"\074\047\074\083\089\097\118\117\088\069\054\047\106\119\061\061";"\067\103\084\089\107\119\114\061";"\111\070\119\110\068\054\052\108\115\075\074\087\122\082\107\086\086\085\068\073\108\055\076\061","\103\043\074\068";"\112\101\115\072\078\074\057\061";"\076\121\090\076\108\099\105\112\074\099\061\061";"\117\112\122\120","\115\074\078\083\109\056\113\053\072\081\057\090\054\119\055\102\112\108\077\090\103\108\099\061","\119\072\111\079\074\098\108\089\076\072\112\049\115\113\088\078\119\070\089\077\052\120\121\082\085\083\098\103\047\119\061\061","\107\101\043\073\048\097\110\111\109\072\061\061","\120\103\071\117\086\050\100\072\048\043\054\061","\047\089\082\053\109\100\065\057\075\089\120\061";"\072\119\114\053";"\075\115\121\054";"\077\085\055\114\086\108\071\073\053\084\081\061","\119\089\100\084\075\065\097\061";"\081\056\102\102\054\072\061\061","\098\116\075\078\077\087\106\117";"\054\071\085\074\052\097\078\070\069\119\061\061","\079\117\088\069\119\116\121\105";"\052\113\051\065\118\099\061\061";"\106\100\048\115\119\099\061\061";"\050\075\118\114\048\109\065\072\075\108\097\080\072\072\061\061","\122\110\105\083\079\083\052\052\100\098\112\107\120\073\061\061","\073\056\051\113\089\089\084\079\084\071\087\077";"\119\057\067\102\087\047\088\099\107\069\047\074";"\112\068\048\081\117\119\061\061";"\075\088\121\056\097\117\086\088";"\069\114\050\049\087\050\053\079","\068\055\112\105","\066\075\074\111\099\119\061\061";"\068\085\113\090","\053\056\047\109\047\108\119\065\104\072\117\073\107\102\079\109\099\087\078\115\086\048\121\061";"\122\110\070\118\043\072\061\061","\056\098\080\047\113\106\071\079\066\073\061\061","\068\069\070\106\100\106\066\122\086\099\061\061";"\050\072\061\061","\100\067\086\057\114\069\098\073\084\072\061\061";"\048\086\114\061","\066\088\080\086";"\115\073\061\061";"\114\117\072\111\073\047\077\070\113\108\078\052\117\049\086\105\112\080\097\050\113\043\122\048\113\070\114\081\070\073\061\061","\055\112\122\049\121\073\061\061","\118\088\116\100\078\048\048\052\075\090\117\078\067\101\088\078\087\071\072\061","\098\098\120\111\055\077\107\119";"\071\106\076\066\119\106\097\061","\098\089\077\099\057\071\054\069\117\066\121\076\117\103\068\118";"\056\085\070\111\056\119\114\068\102\069\105\085";"\068\052\075\051\056\111\097\061","\053\087\052\081","\085\100\083\071\111\099\061\061";"\067\111\043\083\053\101\098\053\121\104\074\076\055\047\068\048","\056\085\101\111";"\069\117\100\099\117\089\088\053\089\073\061\061","\097\099\081\077\114\098\085\057\085\099\061\061";"\115\072\061\061";"\077\099\052\065\076\050\051\073\117\078\083\050\084\120\069\097\050\072\061\061","\087\071\111\068\049\078\070\119\081\079\121\061","\113\116\048\116\043\073\099\061";"\065\065\072\072\114\088\080\054\067\103\102\070\110\043\076\061";"\083\117\065\087\072\066\109\115\073\112\104\105";"\104\083\084\098\067\097\056\075\043\047\078\116\097\107\097\061";"\075\081\068\054";"\106\106\084\054\122\051\086\116\077\100\076\108\104\119\061\061","\118\113\080\122\084\043\117\043\106\047\089\104\080\120\077\080\088\115\117\114\110\050\068\117\087\116\106\116\056\119\061\061";"\088\103\109\102\120\086\052\099\074\120\087\119\047\115\077\052\118\100\106\118","\090\054\057\099";"\102\087\079\111\104\078\105\065\114\048\066\116\053\099\061\061";"\088\111\073\106\071\056\073\043\069\085\120\061";"\049\069\083\121\074\113\088\112","\100\118\113\114\086\117\109\076\053\098\088\054\083\065\078\076\099\043\122\049\043\054\117\061";"\100\087\120\069\117\101\050\071\102\107\114\061";"\069\047\085\100\065\086\055\090\067\107\072\107\108\053\087\081\085\082\106\097\088\122\077\049\112\053\089\076\113\077\072\061";"\071\065\115\117\071\070\050\049\097\119\106\120\111\100\083\097\090\050\100\120\110\099\061\061","\081\043\079\097\050\104\104\090","\083\067\109\113\077\107\049\100\078\122\048\084\052\102\048\100\090\102\071\079\056\073\061\061","\051\078\077\117","\068\073\061\061","\069\116\122\067\110\081\119\050\100\066\054\061";"\082\113\072\114\118\047\081\097\114\084\099\061";"\054\116\090\075\078\088\043\105";"\102\116\105\114\101\050\082\101\103\115\066\089\067\071\052\113\076\117\114\061","\083\084\048\079\053\073\061\061";"\076\043\065\050\054\073\061\061","\098\073\073\118";"\067\089\069\111\081\119\061\061";"\075\110\086\099\097\081\050\051";"\083\099\112\078","\077\111\054\117\084\057\083\112\121\077\065\051\051\086\085\110\052\074\117\061";"\112\113\106\102\121\118\111\110\083\081\117\061";"\053\068\080\087\087\077\077\119","\109\106\072\103\081\121\097\085";"\043\089\122\109\085\119\061\061";"\076\048\055\121\112\067\067\108\053\043\080\061","\072\107\089\069\106\049\097\080\109\115\071\052\079\121\077\049\069\080\115\118\072\065\110\106\081\071\098\077\085\118\050\057\048\074\086\048","\122\120\079\055\068\069\070\115","\105\089\113\084\119\115\079\089\111\114\115\118\106\072\071\071";"\088\107\057\082\065\097\072\055\049\055\054\061";"\077\120\048\065\108\054\072\117\056\077\082\099\109\121\080\068\048\104\050\117\104\100\110\097\073\051\114\073\110\099\061\061";"\052\111\085\109\056\073\061\061";"\105\103\076\110","\048\087\076\061";"\083\081\065\119\110\103\117\050";"\073\076\090\107\086\067\100\112\080\074\052\110\108\073\061\061";"\056\065\071\072\117\077\115\115\082\073\061\061","\084\065\048\073";"\085\066\117\103\115\082\118\117\072\083\069\118\068\115\099\061";"\118\089\100\097\104\085\057\097\079\104\106\074\117\080\116\048\053\072\061\061";"\102\082\072\079\118\083\050\119\076\110\072\061";"\079\101\107\107\088\105\074\100\043\072\061\061","\075\048\049\122\119\099\061\061";"\052\048\065\086\084\056\107\103","\085\116\103\080\118\057\077\084\068\074\083\114\117\069\107\114\068\051\056\090\082\066\118\080\069\072\113\118\120\119\061\061","\115\112\079\089\104\073\061\061","\070\076\074\098\068\080\097\089\066\056\122\048\121\084\109\047\100\113\076\061";"\116\113\075\084";"\115\097\053\057\055\110\079\052\119\085\057\056\119\068\052\071\106\115\121\061","\072\069\098\088\101\050\052\099\066\100\072\054\050\100\117\051";"\055\054\088\072\081\105\110\075\089\075\078\087\089\048\065\120\081\119\061\061","\102\122\050\071","\066\055\101\067\086\122\116\107\099\072\061\061","\083\048\115\111\089\104\118\114\072\116\119\061","\110\084\109\116\102\119\061\061";"\077\073\084\081\074\082\056\053\088\074\072\061","\090\080\057\106\122\115\114\077\056\049\120\087\118\085\110\052\086\072\119\111\100\073\061\061","\057\089\097\080\051\081\074\117\081\114\074\072\047\111\077\122\102\056\085\110\069\119\061\061";"\082\079\098\113\121\088\102\082","\075\116\065\049\081\079\109\056\056\075\102\120\083\109\110\112\115\099\061\061";"\043\098\069\121\074\121\050\078\056\077\105\121\116\121\067\107","\111\068\081\111\113\090\119\073\056\119\061\061","\048\119\080\054\065\119\061\061";"\100\073\108\078\087\111\080\068","\076\089\085\054\113\077\120\061","\122\086\071\114\090\057\083\098\086\069\080\061","\112\043\068\083\075\070\090\069";"","\115\074\056\114\081\121\067\050","\070\053\052\087\106\047\101\061","\050\043\112\085\114\072\061\061";"\069\112\083\068\066\090\056\099\067\110\114\061","\069\055\103\115";"\066\053\110\077\098\098\119\090\070\099\061\061";"\109\097\120\102\101\100\075\101\117\118\119\061","\048\049\052\114\047\072\061\061","\089\081\049\084\115\106\088\054\084\110\043\075\050\111\099\114\076\073\061\061","\049\084\057\074\081\051\052\047\055\115\079\109\121\111\104\110\108\051\080\061";"\071\110\082\047\101\113\084\082\051\113\049\070\083\054\080\056\120\109\117\061";"\047\088\120\054\055\087\066\103\049\105\085\120","\122\066\073\052\112\066\097\052\073\075\089\102","\076\097\057\073\111\104\054\084\047\090\110\068","\105\104\119\109","\088\067\116\088\057\077\116\106\066\104\097\081\106\122\053\120\080\099\061\061";"\072\057\116\122\120\113\106\066\109\108\104\070\106\077\099\116\104\072\061\061";"\052\106\077\116\049\082\087\043";"\074\120\048\121\115\107\122\053","\085\075\101\108\113\117\097\061","\089\110\088\116\057\116\122\120\055\113\099\061","\049\080\101\054\097\119\061\061";"\055\122\105\069","\047\050\084\049\052\057\074\043\087\115\072\061","\072\073\043\097\084\110\052\109";"\073\114\081\075\119\106\069\105\069\108\086\054\076\118\071\070\055\110\074\085";"\081\073\061\061";"\099\109\050\122";"\066\080\113\071","\086\089\090\049\121\119\061\061","\099\068\120\113\075\120\085\080\106\084\116\080";"\112\114\101\086\097\116\099\053\052\119\061\061";"\115\069\117\056\122\076\117\061";"\056\052\120\120\077\073\061\061","\115\056\120\113","\056\068\053\075","\078\043\051\053","\077\103\056\107\055\083\057\086\050\115\122\085\110\070\072\061","\050\112\107\120\117\073\061\061","\076\113\085\054","\078\071\078\067\076\116\117\087\072\098\073\061","\112\089\057\070\051\103\105\050\088\080\110\088\102\074\056\053\047\068\069\052";"\098\098\109\101\100\083\098\067\069\114\115\105\098\109\049\088\056\066\073\061","\097\113\056\068\109\101\114\061";"\086\107\054\052\050\107\083\079\114\119\061\061","\107\086\081\071\055\116\110\071\099\097\048\105\115\099\061\061";"\087\121\089\072\105\050\086\072\047\098\054\090\119\090\078\107","\101\084\073\043\077\077\109\072\117\048\077\053\117\115\099\081\087\055\113\075\075\057\116\052\050\048\065\116\074\072\061\061","\117\065\113\050\056\072\061\061";"\086\122\053\097\078\077\121\077\107\117\110\111\116\069\106\104\080\099\061\061";"\050\057\085\107","\103\085\098\118\102\119\061\061","\086\043\057\119\098\099\061\061","\057\101\051\090\087\072\061\061","\104\057\118\084","\088\068\075\114\055\083\104\118\054\083\104\115\067\072\061\061";"\078\088\101\099\119\119\061\061";"\118\052\085\072\121\103\112\043\077\115\117\083\101\086\053\077\070\099\061\061";"\070\106\073\115\107\119\061\061","\056\085\051\100\057\100\121\121\052\070\107\084\067\054\114\061","\051\101\110\099\101\071\109\066\065\052\119\061","\049\084\052\075\089\047\089\054\082\121\090\081\112\074\069\080\049\086\116\108\070\119\061\061";"\049\052\075\089\114\069\118\061";"\114\099\061\061","\080\090\106\109\106\107\080\105\090\119\061\061";"\118\085\101\069\078\055\056\090";"\110\120\109\069\051\099\061\061";"\056\078\082\052\119\084\054\079\057\114\120\061";"\056\052\114\118\051\098\057\061";"\049\051\112\100\048\114\103\049\122\056\047\083\112\083\053\113\110\122\121\054\087\104\112\081\112\106\090\053\098\119\061\061","\068\084\086\067\075\084\080\061","\052\111\043\113\067\072\061\061";"\110\078\117\071\112\098\073\061";"\086\114\084\050","\100\048\110\121\099\073\061\061","\078\067\071\115\115\116\073\081","\108\049\077\111\122\114\108\052\110\072\061\061";"\105\101\079\109\051\107\057\107\050\080\086\103\079\108\111\102\074\109\103\118\118\099\061\061";"\054\075\068\101\081\099\061\061";"\089\099\109\085\051\122\068\076","\117\080\072\106";"\100\122\057\070\043\103\099\073";"\087\047\099\110";"\084\110\085\116\049\055\107\117";"\054\081\056\054\084\078\097\054\047\105\087\119\052\099\115\113\114\099\120\061";"\117\076\114\100\055\076\054\043\102\073\061\061";"\101\049\070\088\057\047\085\122\105\105\116\074\109\109\120\089","\043\087\116\077\068\077\043\109\113\043\118\061";"\076\109\120\043\076\084\120\088";"\118\090\084\098\075\086\073\061";"\121\050\120\080\051\054\043\115";"\103\074\086\043\109\048\085\074\074\121\074\106","\067\111\078\111\115\084\102\050\099\073\061\061","\070\121\054\073\078\071\090\110\070\047\068\083\055\073\061\061";"\105\105\113\101\068\077\066\070\089\050\073\066\119\114\121\070";"\104\066\055\117\105\106\078\075\090\105\054\107\056\110\116\084";"\070\069\069\080\089\071\084\087\119\053\116\119\100\065\051\110\087\105\120\111\120\119\061\061","\076\073\061\061","\122\085\100\112\119\104\076\061","\048\051\112\069\109\072\112\069\115\065\116\047\078\119\061\061","\078\107\086\072\066\117\083\080\112\119\065\052\072\074\053\066\105\056\079\116";"\121\048\087\078\101\105\081\116\081\078\084\122\087\083\086\102\120\099\067\102","\116\070\114\122\111\112\080\111\104\084\049\117\082\072\061\061";"\113\070\071\056\043\073\053\118\089\049\078\108\078\074\053\073\071\103\072\061","\068\049\052\054\077\122\056\047\088\071\073\070\119\073\061\061","\076\105\110\074\082\119\061\061","\056\080\107\119\100\087\074\073";"\117\085\122\110\099\108\087\108";"\088\098\049\119";"\048\118\117\076\056\083\108\057\119\099\061\061";"\079\079\073\109\100\107\113\083";"\102\100\089\097\074\051\075\108\050\082\097\061";"\054\075\118\072\097\072\061\061";"\072\080\119\100\047\090\055\099","\083\051\120\061";"\055\088\052\108\052\120\112\088\102\100\118\076\051\074\056\076\069\049\111\114\043\082\121\073\077\075\071\114\065\101\073\084";"\118\072\048\051\074\054\056\083";"\082\103\113\080\110\120\098\108";"\070\084\074\106\057\074\043\070\051\103\099\061","\049\102\119\105","\078\099\054\083\068\072\061\061","\043\085\109\065\108\072\061\061","\106\120\054\083\098\077\074\118\080\101\119\061";"\111\108\069\086\099\098\067\098","\067\121\079\102\119\106\100\048";"\101\079\074\102\051\076\069\079\113\043\057\061";"\085\104\079\073\110\087\054\108\083\115\104\117\047\119\080\080\081\119\055\121\111\055\057\066\118\081\057\121\052\073\061\061","\066\110\085\097\097\119\061\061","\082\051\074\054\111\097\075\049\051\076\102\085\071\078\048\076\056\052\085\118\069\102\043\050\102\117\080\050\068\119\061\061","\114\118\101\047\065\070\112\113\111\121\088\084\050\122\099\061";"\118\074\066\048\087\053\113\080","\082\089\075\067\082\066\083\088\104\087\116\081\121\077\108\104\065\065\105\107\065\073\061\061";"\057\051\076\111\105\051\119\061","\077\043\107\055\052\074\108\083";"\090\047\047\054\053\114\117\113\098\067\068\047\113\107\099\061";"\106\068\073\089\111\119\090\052\049\066\111\088\100\109\119\061";"\101\049\073\070\103\052\108\107\103\099\061\061","\053\122\054\103\117\105\050\049\114\057\114\069\102\112\065\087\084\072\061\061";"\106\074\068\117\121\050\074\105\057\099\061\061";"\071\074\086\086\047\084\052\077\102\101\116\068\057\056\065\080\066\043\075\055","\122\050\067\070\114\076\068\075\049\102\117\061","\086\112\102\086\112\119\080\061","\078\082\115\090","\080\122\043\118\066\119\083\050\113\111\087\113\090\119\061\061","\105\071\075\080\065\121\089\090\113\055\047\043\049\086\115\072\072\072\061\061","\108\043\050\099","\067\078\085\082\049\103\119\061";"\055\116\103\099\074\069\103\069\101\075\119\061","\108\076\103\054\055\052\072\070\118\074\080\109\081\106\089\068\072\072\061\061";"\112\116\090\048\067\087\112\047\117\078\083\052","\087\066\112\114\047\069\084\110\075\072\061\061","\103\104\072\055\071\074\119\070\069\104\116\086\056\075\085\076\101\057\114\061";"\047\082\050\078","\118\083\079\069\050\090\105\106\086\090\102\114\068\097\054\114\078\121\081\061";"\097\067\047\079";"\085\047\113\090\102\097\115\114\087\084\111\080\102\119\061\061";"\110\115\052\052\077\072\061\061";"\121\070\121\049\121\099\061\061","\071\107\118\109\082\079\051\076\088\111\072\072","\114\073\061\061","\077\109\087\082\119\122\073\048\047\067\100\049\072\101\117\061";"\079\098\099\101\056\112\112\071\053\050\067\077\057\052\077\102\082\072\043\069\081\052\122\104\108\085\100\057\099\120\118\061","\052\043\108\069\069\103\117\066\050\119\061\061";"\111\067\097\110\082\119\061\061";"\054\121\083\090\117\109\084\084\087\102\122\117\054\051\089\116";"\057\118\055\068\109\053\105\105\103\073\061\061","\122\118\050\043\087\119\061\061";"\120\084\098\100\085\072\061\061","\074\074\072\069\067\076\084\057","\101\052\099\113\077\075\079\083\054\119\061\061","\117\100\043\114\111\118\085\100","\073\050\097\055\050\101\086\055\065\051\047\111\120\078\048\047\074\116\085\047\084\073\061\061","\100\118\079\111";"\099\075\069\077\075\108\054\050\088\110\050\074\053\119\061\061","\115\120\071\115\116\073\118\054","\065\116\090\108\076\112\083\113";"\077\084\098\104\066\085\083\052\098\053\097\061","\104\057\112\102\066\057\068\116\099\057\111\122\108\111\080\109";"\084\118\087\069";"\085\104\068\077\086\111\055\113\111\112\066\117\079\050\110\069\073\067\112\043\102\120\056\069\088\109\079\057\099\102\085\043\119\084\052\118\087\120\109\087\121\104\065\085\079\071\080\101\077\113\083\082","\104\067\105\121\085\054\113\104\107\102\055\050\117\069\120\061";"\067\116\117\110\075\119\099\082","\086\090\070\054\114\048\069\104\081\119\061\061";"\085\070\043\098";"\075\114\080\077\072\097\089\067\100\056\054\104\083\099\088\102\101\098\118\061";"\105\121\065\043\043\098\087\086\086\080\054\061";"\051\104\097\069\073\052\119\057";"\105\053\098\109\117\099\061\061","\081\072\048\067";"\076\112\109\066\118\076\055\049\108\100\114\061","\098\043\051\071\073\049\057\099\099\119\090\097\118\106\070\083\043\090\104\101\052\069\118\061";"\098\089\069\108\071\122\099\080\079\073\061\061";"\101\082\082\065\111\122\105\087\103\099\061\061","\098\104\084\080\081\081\081\118\071\069\056\072\055\053\107\110\080\098\067\102\099\078\118\047\048\097\119\075\085\118\080\088\089\072\108\073\056\065\057\061";"\054\066\070\068\119\077\066\122\121\082\067\079\065\099\109\118\068\072\061\061","\121\053\117\070\069\119\061\061";"\049\122\119\109\077\069\083\104";"\070\080\047\115\087\052\097\075\053\049\049\119\076\118\071\118\048\104\113\114\056\068\065\088\052\121\081\118\086\084\105\076","\071\069\088\122\082\072\069\090\110\069\084\051\079\073\061\061","\106\087\070\116\098\097\099\061";"\102\082\111\103";"\113\101\074\048\056\080\066\113\048\072\061\061";"\084\065\113\103\102\067\107\069\079\119\061\061","\074\120\090\048\103\051\090\081\066\089\047\097\069\055\084\065\065\119\061\061","\087\054\103\114\085\072\061\061","\106\043\082\098\056\068\055\073\052\057\053\116\082\118\113\066\111\069\081\061";"\113\074\106\084\102\052\119\080";"\073\098\076\097\086\043\113\085\084\119\061\061";"\079\116\075\049\098\108\085\055\056\070\069\113";"\120\108\101\066\118\072\061\061","\079\065\072\089\078\107\101\049\079\072\061\061";"\105\075\115\066\090\072\061\061","\122\055\084\073\116\071\073\119\073\065\107\074";"\043\105\073\072\114\073\061\061";"\086\116\105\088\110\073\061\061";"\114\066\106\078\068\068\102\099\082\056\099\061";"\108\049\082\099\043\070\118\061";"\084\120\098\121\109\089\080\097\089\072\061\061";"\065\052\114\071\112\065\088\067\085\108\057\061","\080\112\105\106\088\110\120\112\105\069\054\061";"\065\104\066\122\082\051\073\116";"\105\116\079\110\114\077\074\053";"\107\047\120\061","\118\057\052\119\102\097\053\079\111\072\115\048\080\104\086\054\118\066\054\061";"\099\110\087\071\119\099\061\061","\080\071\116\108\080\090\110\047\120\103\111\078\048\085\113\111\065\072\061\061";"\047\050\076\043\077\097\120\061","\053\102\084\043\100\048\084\103\089\099\061\061","\048\043\089\108\054\073\061\061";"\066\106\043\113\098\072\061\061","\102\086\090\103\079\115\121\061","\122\081\080\089\097\111\114\106\120\115\122\080\090\055\047\047\106\047\099\061";"\079\084\111\051";"\116\121\055\103\050\109\083\105";"\105\083\071\113\082\072\061\061","\070\075\084\078\108\082\081\105\083\109\099\061";"\073\113\084\065\117\089\101\061";"\120\080\086\072\056\089\075\053\111\056\105\066\065\051\098\118\079\066\051\110\085\072\061\061","\072\097\056\088\089\080\071\113\110\077\101\061";"\121\111\075\054\087\119\061\061";"\116\047\113\115\083\056\080\112\075\072\061\061";"\101\049\121\061";"\100\122\057\072\104\099\061\061","\043\073\061\061","\074\052\106\089\047\051\122\053\055\073\081\061";"\072\115\121\101\099\114\108\082","\049\122\121\109\078\069\065\075\116\066\115\080\116\057\104\078\072\119\061\061","\104\043\089\065\073\069\052\057\051\099\057\061","\085\050\068\097\075\082\117\057\114\119\061\061","\112\121\108\054\102\088\109\084\065\073\061\061","\084\100\074\074\052\075\084\051\081\106\054\061";"\104\117\085\052\076\073\061\061","\074\108\100\112\075\069\054\070";"\118\114\120\054\085\052\052\085\104\074\071\088","\048\051\114\081\121\079\074\107";"\101\107\055\085\122\049\052\077\109\050\106\110\114\072\061\061";"\079\074\115\048\075\075\099\098","\120\085\057\072\102\115\075\121\069\043\085\054\110\073\061\061","\054\120\082\078\078\122\116\050\107\117\051\074\071\048\110\086\112\073\061\061";"\113\117\085\050\069\100\079\106\111\088\115\084\107\089\101\057\072\099\121\061","\119\057\057\070\054\049\090\072","\108\109\054\066\115\099\061\061","\098\099\074\050\053\051\048\110\048\050\109\102\108\081\118\061";"\108\089\055\077";"\105\105\118\057\116\073\077\100\071\065\073\061";"\078\098\047\097\066\098\116\078\117\083\057\061";"\115\089\070\050\055\082\066\043","\077\100\118\055\080\047\085\112";"\102\065\066\073\080\084\057\071\043\121\070\067";"\057\106\119\120\097\119\087\103\043\071\057\083\080\051\043\090";"\051\089\114\051\073\108\078\107\056\102\081\076\083\119\061\061";"\098\052\076\077\086\108\086\120\082\051\067\109\074\077\056\053\047\111\048\090\081\073\061\061";"\107\115\081\121\089\119\099\056\097\122\055\085\097\052\081\099";"\083\073\061\061";"\088\117\112\098\049\083\080\061","\051\106\106\068\105\115\105\070\051\071\113\112\043\114\065\057\100\073\061\061","\112\078\048\047";"\113\115\101\105\111\089\090\051\089\067\055\121\067\119\061\061";"\080\074\097\043\089\103\098\075\079\098\110\067","\107\074\104\105\047\074\102\090","\114\049\084\118\067\089\054\056\074\074\089\118\102\077\076\061","\087\068\056\078\088\073\061\061","\065\084\116\118","\116\054\047\050","\055\113\053\077\074\104\068\056\070\119\061\061","\104\090\078\118\108\078\119\061","\104\071\111\067\098\106\112\117\080\055\097\050\056\067\051\048\066\099\061\061";"\047\121\056\116\102\102\111\087","\068\056\052\120\073\052\071\043\114\073\061\061","\051\069\119\053\083\117\054\061";"\121\116\088\050\112\076\067\085\066\120\081\061";"\122\082\089\100\101\119\061\061";"\097\066\105\088";"\112\066\050\073";"\111\110\100\114\081\070\057\097\109\043\101\104\087\072\061\061","\076\080\066\083\078\079\051\101\117\084\121\061";"\098\102\066\102\090\053\079\068\122\122\121\061";"\109\048\080\122\075\102\073\084\066\097\107\076\071\051\112\110\047\099\061\061","\109\101\081\072\082\088\049\077\109\119\061\061";"\099\054\100\097","\065\108\088\076\043\110\066\055\104\118\101\075\054\117\119\061","\043\086\112\065\082\098\104\117\115\109\119\079\069\072\074\066\067\113\108\108","\043\116\074\119\119\099\061\061";"\070\120\097\071\076\053\072\049\089\073\113\089\048\108\120\074\112\099\097\061","\054\088\051\089\080\070\048\047\047\099\061\061","\117\069\110\110\119\053\081\061","\085\070\101\067\074\052\117\061","\121\054\099\074\083\079\073\061","\109\081\085\088\049\097\083\111\082\102\054\075\070\109\076\065\076\047\048\099\050\050\100\043\071\103\048\089\065\072\061\061","\068\109\089\079";"\103\053\076\116\054\074\054\050\073\103\084\057\051\072\071\101\049\119\061\061";"\100\066\116\085\103\112\065\052\121\105\075\118";"\074\066\115\101\072\072\061\061","\086\112\116\117\098\116\071\103\109\073\061\061";"\098\076\047\085\089\049\076\088\053\054\089\114";"\104\106\068\052\087\068\072\083\078\055\069\119\119\113\049\114\068\070\120\061";"\087\119\061\061","\085\119\071\103\083\119\061\061","\112\099\110\082\069\119\061\061";"\068\047\082\074\120\071\073\061";"\100\050\076\120\109\073\061\061","\114\112\105\115\051\076\119\061","\043\066\052\078\089\077\097\061","\076\043\104\100\085\073\061\061","\114\086\076\056\106\119\054\109\104\053\069\084\069\118\122\100\078\065\113\071\110\109\086\108";"\114\071\122\067\072\051\105\112\102\104\119\061";"\051\067\119\082\080\073\061\061","\066\103\107\101\083\098\120\057\089\114\070\101\051\070\118\105";"\056\049\121\114\076\053\070\078\080\084\111\101\088\083\105\051\079\099\061\061";"\080\119\061\061";"\106\113\107\071\097\043\110\065","\111\070\078\065\075\110\119\089\087\057\067\079\116\099\061\061";"\121\087\056\080\056\120\048\072\051\113\049\087\120\109\121\122\075\053\119\061";"\111\079\072\121\099\119\061\061","\074\072\061\061","\089\067\043\081";"\119\100\083\106\108\085\071\053\118\067\080\053\079\071\117\086\115\085\065\110\121\075\098\110","\056\101\112\082\086\075\075\099\111\100\072\076","\081\078\111\087\047\100\116\074\057\098\069\082\103\099\061\061","\076\086\068\070\047\099\061\061","\080\116\118\102\054\068\121\086\051\103\067\070\120\106\066\087\085\114\097\061";"\065\070\118\101\068\066\082\076\106\050\097\061","\111\107\098\111\052\055\055\106\088\120\101\068\087\074\111\119\051\066\054\061","\082\072\061\061";"\053\076\047\057\099\056\088\088\075\068\102\122\121\113\074\085\065\073\061\061","\057\050\075\053\077\071\116\121\109\077\110\050\104\098\101\072";"\083\109\076\119\065\089\081\098\068\104\088\116\055\076\072\061";"\048\081\106\105\114\072\061\061","\117\090\108\098\073\110\120\061";"\082\081\072\103\066\057\097\049\079\101\087\109","\084\116\082\074\087\073\061\061";"\110\065\049\068\080\105\119\061","\098\098\114\084\083\108\080\057\116\079\065\122\084\119\061\061","\049\086\047\070\083\119\086\118\078\102\099\061","\110\108\108\047\054\085\100\122\089\100\117\061","\109\098\056\110\066\097\057\082","\100\104\072\108\068\089\049\118\090\113\100\103\105\050\111\077\099\074\121\061","\106\112\070\115";"\048\066\111\052\103\051\099\056\090\110\103\111\104\102\105\098\056\119\061\061";"\097\051\121\077\108\082\101\047\077\055\070\054\108\078\103\065\120\072\061\061";"\082\116\056\089\070\099\061\061";"\120\120\073\071\054\098\097\081";"\051\081\079\070\055\081\065\105\065\087\117\061";"\097\055\071\120\084\051\054\061";"\121\112\099\107\068\103\050\121\079\097\085\097\068\104\099\103";"\121\070\074\100\102\088\053\052\100\047\077\078\089\074\075\090\082\056\089\089\069\072\061\061","\053\098\112\105\081\119\061\061","\067\110\112\119\086\047\080\110\087\083\102\065","\074\052\085\097\113\073\061\061","\082\119\079\072\086\119\061\061";"\050\057\119\115\103\057\120\069\112\047\043\066\085\069\057\080\121\073\061\061";"\053\085\074\089\080\055\108\070\122\071\099\061";"\119\078\108\067\119\054\043\110\107\106\086\051\074\105\067\083\087\081\080\061";"\097\057\053\081\106\083\086\068\105\065\087\082\052\072\061\061","\106\102\111\056\052\080\115\080","\113\047\118\119","\121\075\050\078\114\086\053\118\098\073\061\061","\056\113\099\118\070\119\061\061","\122\053\113\071","\105\072\061\061","\070\098\074\119\071\109\114\061","\082\066\083\050\089\073\099\061";"\121\078\112\073\065\102\051\052\073\115\073\074";"\082\082\069\112\120\120\109\122\109\103\104\054\077\049\118\122\119\073\061\061";"\073\100\115\090\067\083\083\088\103\118\108\086\077\067\088\097\067\121\108\100\109\119\061\061","\086\072\049\090\081\086\121\057\055\119\061\061";"\085\089\077\057\081\073\061\061","\068\057\084\101\101\116\122\116\100\069\081\079\080\108\121\050\118\120\072\061","\072\086\083\069\043\106\086\049\052\102\048\072\079\071\086\104\065\099\061\061","\083\106\102\111\102\111\098\102";"\053\073\061\061","\049\106\109\081";"\088\111\117\066\069\071\097\090\071\053\107\112\088\122\101\048\114\115\120\061","\120\043\107\055\110\072\061\061","\049\067\120\065\071\054\087\084","\067\052\098\104\053\101\097\056","\099\076\110\111";"\073\052\108\052\047\084\051\121","\102\051\049\111\097\053\073\061";"\103\099\105\069\086\099\061\061";"\102\097\050\089\068\121\121\043\067\057\043\081\054\119\061\061","\121\069\085\105\050\047\114\082";"\110\098\121\117","\049\068\114\072\086\047\111\105\050\101\120\087\106\051\073\118";"\076\082\099\076\067\072\061\061";"\108\120\109\121\076\099\111\053\080\077\054\069\072\103\067\080\113\073\061\061";"\077\069\112\079\089\078\113\086\086\117\116\117\065\067\072\118\079\066\069\056\112\073\061\061","\075\100\072\075\068\047\105\107\054\119\061\061";"\076\089\089\086\122\053\085\055\110\117\049\116\079\103\116\072\074\080\043\084\049\119\061\061";"\072\121\101\084\089\099\061\061","\081\098\089\076\078\119\061\061","\079\108\049\107\113\099\061\061";"\050\057\103\086\101\073\087\097\082\109\115\070";"\090\114\088\119\116\076\066\048\097\108\116\121\071\086\065\089\115\102\057\061";"\071\043\117\071\084\073\061\061";"\072\053\066\081\047\082\082\085\085\051\109\112\097\111\053\050\121\065\108\065\103\082\065\121\110\055\067\043\106\073\061\061";"\056\057\078\113\065\102\057\061";"\108\111\083\102\075\087\117\097","\080\110\122\108\054\106\114\061","\097\069\085\100\067\085\119\061";"\119\050\079\082\121\043\080\077";"\113\076\070\119\054\072\079\067\108\119\061\061","\065\070\047\048\083\119\088\115\052\102\121\061","\120\050\070\043\043\052\108\122\054\052\103\101";"\089\067\057\052","\084\102\090\067";"\122\073\076\061";"\053\109\073\074\083\055\081\052\087\049\056\106";"\107\115\100\082\075\075\071\070\101\055\102\110\115\088\118\061","\052\100\072\079","\066\056\110\065\080\105\049\071\104\078\075\104\067\072\061\061","\077\066\122\066\079\083\080\074\120\057\065\071\090\122\071\070","\055\082\098\057\052\043\078\047\089\087\049\113";"\107\120\051\113\087\072\072\061","\051\052\120\101\119\073\061\061","\111\118\055\065\077\083\099\051\088\116\119\061","\066\051\043\105\078\066\050\102\067\088\090\065\048\088\057\061";"\079\088\098\048\054\085\057\061";"\119\069\100\104\112\043\074\106\073\119\061\061","\103\118\079\053\085\070\078\102\056\114\065\078\084\071\112\069\055\115\081\061","\102\101\118\111\110\067\077\117\081\119\061\061","\073\076\099\108\054\084\121\086\083\072\061\061","\055\077\103\109\070\114\118\061","\084\077\106\082","\077\073\061\061";"\085\067\107\087\114\070\098\099\079\073\061\061";"\119\070\083\074\056\122\069\055";"\053\073\114\075\080\084\053\097\082\119\061\061","\114\082\109\053\107\106\121\103\111\104\054\090\101\097\068\049\107\111\081\061";"\098\048\114\087\120\072\061\061","\054\043\082\111\103\082\100\068","\071\082\078\053\050\072\061\061";"\089\114\077\085\083\119\061\061","\111\071\098\049";"\080\073\061\061";"\077\112\112\069\109\087\104\081\113\103\106\070","\121\115\086\087","\085\087\090\083\101\074\098\087\119\049\122\084\072\112\099\053\085\114\121\061";"\083\053\085\069\105\119\061\061";"\098\051\069\102\087\074\118\077";"\083\104\120\106\087\077\115\069\055\116\120\061";"\097\105\115\067";"\089\102\107\104\102\081\089\114\118\098\055\080\084\050\110\070";"\087\101\086\078\101\075\089\084";"\078\079\077\054\120\099\061\061","\076\070\054\054\105\043\056\057\109\076\120\061";"\119\050\067\074\055\080\054\068\103\111\100\047\097\121\102\118\056\048\080\090","\099\107\089\081","\119\109\080\103\113\099\061\061","\120\065\120\099\051\085\084\109\089\069\110\047","\087\075\084\084\087\117\074\111\053\070\107\049\088\066\068\106\121\050\099\061","\049\070\072\075\049\050\099\061";"\081\097\110\070\054\099\061\061","\049\079\118\112\057\119\061\061","\073\051\056\118\084\049\048\081\122\079\051\051\080\108\070\079\085\086\070\080\100\065\101\061";"\083\043\049\047\080\072\061\061","\072\055\103\050\119\118\083\102\066\081\057\061","\072\088\080\118\119\120\043\109\068\049\085\051\048\071\074\085\067\082\081\061";"\104\098\103\114\109\117\087\113\070\053\082\082\121\115\120\061","\079\049\080\066\054\076\114\085\090\072\055\089\103\070\116\051\080\099\061\061";"\076\108\089\115\066\072\061\061";"\047\106\078\122";"\057\121\120\117\082\054\105\043\102\115\080\047\071\120\097\077\081\068\089\113\085\072\061\061";"\081\078\081\049\049\073\070\122\053\076\097\054\113\049\043\101\079\111\107\056\105\088\121\101\049\068\050\109\048\073\061\061","\110\085\107\083\081\081\083\099\089\068\087\121","\119\112\072\057\097\097\075\070\102\069\055\069\110\115\050\052\111\072\061\061","\072\052\109\121\079\055\115\071\108\070\099\088\109\112\118\056\068\089\105\121";"\108\107\056\069\076\121\049\055\053\080\076\067\056\109\116\101";"\111\065\057\116\071\113\098\106\070\107\069\121\055\112\055\074\085\119\061\061","\109\055\072\102\120\072\051\110\099\073\061\061";"\106\108\078\049\068\072\061\061","\105\073\061\061";"\073\085\057\107\068\068\054\066\065\120\070\108\109\099\047\053\117\066\071\110\121\106\120\061";"\048\116\057\075\110\104\097\061";"\118\047\055\048\053\073\061\061";"\104\067\085\121\088\098\081\087\077\119\061\061";"\097\070\119\085\051\087\120\055";"\052\075\120\043\114\087\087\113\086\057\051\101","\051\099\061\061","\119\051\100\121\087\100\071\087\087\099\061\061","\051\056\049\065\055\102\122\105\089\113\072\053\065\077\110\068\121\043\119\061","\049\101\102\084\117\047\103\113\067\097\070\103";"\105\111\049\114\067\108\049\110\050\066\081\061";"\056\097\087\047\103\099\115\075\055\115\106\056\047\119\061\061","\122\109\116\057\088\099\102\057\078\066\066\090\076\118\089\083\098\081\080\061";"\098\120\081\070\102\073\061\061";"\056\078\086\087\071\121\067\084\074\086\067\121\104\102\083\110\088\089\081\061","\072\105\052\071\043\121\119\052","\049\105\072\106\104\088\118\108\108\099\061\061","\085\106\103\111\110\073\061\061";"\112\077\108\057\047\116\068\072\108\117\101\061","\117\051\072\115\067\049\055\083\105\076\106\049\105\048\117\061";"\048\051\056\119\089\100\073\061";"\116\108\075\104\047\085\057\061";"\101\057\067\043\043\054\085\100\052\073\121\061","\119\117\043\047\112\067\088\114","\053\047\100\106\090\117\073\061";"\069\100\099\055\047\055\076\061";"\050\084\053\114\069\099\061\061","\088\104\072\116\088\090\047\108\106\051\087\080\086\079\085\098\085\056\119\061","\099\050\069\090\071\047\047\120\081\074\057\061","\068\110\114\061","\116\109\052\083\110\068\108\056\071\112\098\078";"\113\090\080\043\116\089\100\085\051\077\099\061","\067\056\108\084\119\051\067\101\083\090\119\061";"\121\106\098\112\071\089\074\116";"\102\114\117\061";"\049\072\054\051\070\078\053\070\043\072\109\057","\113\078\121\047\050\050\073\061","\114\054\107\116";"\105\102\099\068\105\103\056\080\057\116\053\100","\099\098\118\103\074\066\076\061","\048\119\047\111\057\088\088\050\114\086\082\108\079\086\120\061","\076\115\057\090";"\115\107\077\106\043\078\085\086\121\072\061\061","\110\087\103\106\113\112\080\057\072\069\108\102\065\085\121\099\072\073\061\061";"\077\110\066\083\066\056\099\121\080\089\080\061";"\068\055\112\076\109\079\104\087\074\098\084\089\072\077\119\121","\120\107\082\076\114\072\061\061","\090\097\121\118\117\120\113\086\090\072\078\100\087\108\054\112\076\099\061\061";"\067\047\108\099\081\047\082\068","\074\077\099\087\122\115\109\122\051\049\054\061";"\080\106\114\088\048\111\085\081";"\115\100\105\070\106\104\086\088\099\113\112\103\089\099\111\111\099\072\061\061";"\099\043\056\050\113\083\102\080\111\121\098\111\111\072\074\055\110\072\061\061";"\066\082\109\087\067\075\070\120\077\066\080\061";"\115\082\117\100\065\057\110\086\101\085\099\061","\100\118\114\119\088\055\075\049";"\101\088\082\089\052\068\074\099\055\112\054\061","\048\088\083\075";"\090\121\107\053";"\120\049\083\052\119\090\084\050";"\086\087\087\111\116\073\061\061";"\113\084\113\066\115\085\081\121\074\075\116\053\073\112\106\088\105\047\073\085\111\073\061\061";"\116\113\085\090\109\056\107\051\097\119\072\061";"\085\078\089\118","\084\080\054\066\107\109\048\078\080\055\079\108\114\055\079\043\085\056\076\048\083\073\061\061";"\054\099\122\074\083\113\065\116\057\080\076\061","\051\074\079\053\066\075\117\097\050\107\047\070\106\050\074\075\072\080\114\061","\117\083\104\050\085\105\119\078","\050\078\065\049\079\119\061\061","\078\116\115\053\048\055\117\061","\056\066\089\080\052\113\106\116\117\113\049\067";"\099\080\052\048\048\085\070\120\113\049\117\061","\120\104\068\067\088\052\110\079\055\051\054\061","\078\115\087\080\049\109\084\052\087\084\050\119\106\122\073\061";"\071\115\116\056\086\119\061\061","\104\070\076\083";"\068\057\082\099\117\055\102\080\074\049\119\061";"\115\097\115\053\068\109\066\115\118\107\076\086\080\107\088\047\088\072\061\061","\056\113\104\111";"\074\069\103\082\068\118\076\069";"\106\098\057\072\099\098\116\119","\085\047\081\047\098\087\074\054\077\068\099\073\055\119\061\061","\120\048\065\084\086\119\047\101\083\075\053\056\066\121\051\048\104\120\086\090\086\115\076\061","\076\110\109\120\051\066\099\103\098\050\120\061";"\047\047\079\116";"\051\121\110\080\102\047\086\053\057\072\061\061";"\106\085\075\067\098\074\090\117\088\110\053\073\071\047\103\072\105\119\056\116\053\070\106\051\110\106\084\106\081\073\061\061","\079\043\083\066";"\072\089\118\081\118\115\103\085\104\087\114\061";"\097\119\105\054\111\122\080\061","\074\070\083\098\080\109\104\089\047\115\056\051\099\097\054\054\107\051\121\070","\100\100\052\088\072\084\107\068\071\043\107\083","\109\048\053\090\097\109\054\061","\086\105\116\066\070\056\072\097\113\107\068\056\065\107\074\081\083\099\061\061";"\107\071\051\101","\071\122\068\114\047\052\080\061";"\110\110\081\102\069\102\056\115\087\080\043\088\114\113\121\047\066\076\088\084\072\111\072\075\084\075\114\056\055\119\061\061";"\075\074\073\074\057\099\061\061";"\052\112\107\088","\100\120\081\065\050\108\068\118\114\070\121\061";"\071\118\109\113\078\119\113\089\079\068\089\103\073\073\076\120";"\089\087\121\118\065\077\072\061","\082\118\121\070\097\103\069\111";"\079\073\081\079\074\114\084\105\121\084\076\061","\087\080\101\121\112\098\080\061","\121\051\102\116\115\122\072\061","\047\066\116\086\057\103\077\075","\121\067\083\098\075\081\101\082\080\119\100\098\087\109\055\086\088\073\061\061","\089\084\103\116\121\114\086\051\090\080\082\074\049\120\069\105\068\055\081\061";"\111\120\118\107\078\121\114\074\051\072\061\061","\048\067\069\121","\072\112\113\113\078\099\061\061";"\086\088\054\100\110\118\076\061","\105\104\075\084\084\043\077\087";"\112\110\075\107\108\054\066\117";"\057\049\106\071\073\087\043\105\054\121\082\101\108\072\078\085\081\072\061\061","\087\087\051\074","\052\051\103\053\103\053\078\048\082\072\097\061";"\089\109\101\101\081\114\072\099\082\067\114\061","\116\069\069\078\101\072\099\050\108\090\118\043\050\055\100\098\043\072\061\061";"\071\088\057\082\047\116\097\054\112\066\080\061";"\069\112\089\057\073\048\072\061","\115\084\053\076\116\099\061\061","\083\074\050\099\070\105\100\050\097\072\061\061","\101\089\122\053\119\074\112\097\103\051\100\073\105\065\082\104";"\105\112\050\053\083\073\061\061";"\122\056\077\056\056\114\068\052\110\106\119\061";"\066\097\105\088\054\051\085\085\051\116\049\107\113\078\067\104\054\115\051\089\102\099\061\061";"\103\070\065\049\074\087\052\105","\054\081\088\084\121\075\104\104\102\110\113\070\067\119\061\061";"\111\120\106\053\077\080\117\112\115\090\052\079\054\106\087\050\071\099\061\061";"\106\119\061\061";"\107\116\099\111\108\090\105\117\121\122\072\119\068\072\061\061";"\086\097\057\081\089\081\118\052\070\050\116\115";"\081\120\090\089\073\071\068\103","\047\067\075\071\070\097\119\083\072\086\057\061","\081\078\067\099\048\119\061\061";"\103\101\071\072\048\100\089\113\108\086\122\083\067\065\071\101";"\074\049\051\115\057\100\120\061","\065\117\048\073\073\053\053\055\080\108\079\108";"\100\083\099\088\082\110\120\061";"\078\086\098\051\098\072\061\061";"\072\080\116\073\050\098\086\067\121\070\054\101\077\067\051\047\067\072\061\061","\103\054\110\107\069\116\121\082\070\072\099\098\078\104\068\105\116\054\049\079","\069\065\082\078\118\120\076\061","\069\118\065\122\111\066\049\107";"\114\048\104\119\077\089\049\105\043\119\061\061","\070\102\069\113\119\072\061\061","\066\048\090\048\081\117\052\081\055\085\049\071\113\112\100\109\054\079\084\105";"\116\088\087\118","\119\113\104\049\081\073\061\061","\050\074\101\089\114\121\115\067\081\102\054\048\074\073\083\104\065\116\074\072\070\073\108\081\083\068\113\050\068\072\061\061","\077\090\087\078\066\056\122\077\051\070\074\120";"\085\101\101\065\073\098\107\121\121\084\097\061","\069\084\082\116\098\112\098\053\053\081\069\047\115\069\080\114","\050\073\061\061";"\102\043\121\074\119\073\061\061","\054\077\073\083\074\047\115\117\120\074\099\074\071\085\098\052","\077\108\056\105\056\049\102\069\108\115\043\051\084\052\120\114\110\115\115\054\117\115\115\103\120\047\107\109\073\099\061\061";"\080\056\086\120\051\087\102\072";"\050\082\047\078\043\118\076\061";"\050\115\070\090\054\119\061\061";"\051\119\107\075\105\099\061\061";"\056\086\108\054";"\099\112\112\066\121\089\085\121\052\099\061\061";"\075\117\047\117\104\082\084\082\083\121\048\053";"\088\075\066\067\114\073\061\061";"\099\072\065\106\120\049\122\054\104\086\120\082\081\073\061\061";"\099\069\050\078\118\057\066\079","\071\112\119\114\118\086\057\099\067\082\071\088\080\047\117\098\117\090\114\061";"\119\070\054\075\050\086\049\051\081\072\061\061","\112\087\113\083\043\056\090\074\108\072\097\061";"\105\071\089\100\054\077\089\085\047\110\085\114\072\118\114\061","\075\071\056\083\080\115\051\116\106\047\105\055\100\072\079\117","\073\057\085\085\107\111\089\086\079\055\120\072\121\099\061\061","\121\069\054\052\098\065\086\073\122\099\061\061","\074\072\122\122\052\119\061\061";"\065\100\076\113\074\113\122\053\080\088\101\078\069\052\090\080";"\089\068\077\070\073\077\080\061","\085\069\097\113\056\047\089\065\089\116\054\061","\082\099\112\086\054\099\061\061";"\078\107\114\075\090\111\071\069\070\079\057\061","\043\119\078\106\078\075\113\114\104\121\097\102\071\120\099\061";"\122\072\061\061","\097\077\115\118\117\104\111\074\099\049\081\102\121\117\120\061","\052\073\061\061";"\120\067\090\079\068\070\097\061";"\090\104\068\049\119\053\097\110\078\049\118\068\049\077\057\120\112\119\061\061";"\088\122\110\090\088\097\082\066\067\074\120\071";"\083\114\122\073\043\072\061\061","\106\054\052\049\084\103\073\089\106\106\077\097\049\088\113\107";"\122\114\055\066\115\073\119\061";"\099\121\085\083\081\106\098\074";"\090\116\043\103\054\116\050\057\068\051\105\100\085\100\050\100\090\099\061\061";"\082\054\108\116\087\087\071\051\097\085\118\061";"\098\109\081\074\043\072\054\054\085\097\117\061","\120\048\051\051\073\101\047\097";"\073\065\052\112\118\103\108\083\073\073\061\061";"\043\068\043\083\100\119\070\070\104\057\054\061","\078\050\088\056\089\120\079\089\118\100\082\070\074\116\090\069\109\114\108\100";"\055\047\072\121\052\072\061\061";"\103\054\106\122\072\109\113\112\102\118\116\102";"\057\053\049\067","\043\049\054\112\113\120\086\102\108\083\086\074\107\057\102\057\109\105\043\050\119\072\061\061";"\083\069\049\080\117\052\097\082\080\104\065\105","\075\100\106\087\111\077\066\110\109\106\085\082\048\109\112\056\098\106\074\087";"\066\077\106\117\053\110\073\052\098\111\074\047\079\089\083\077\122\116\099\089\122\072\061\061","\118\068\070\108\067\072\061\061";"\110\055\069\085\105\052\084\073\121\087\115\118\066\047\110\082\086\074\101\086\107\090\071\101\080\102\080\076\081\075\118\061";"\078\051\069\114\100\052\117\065\068\078\075\057\115\098\067\068\076\072\061\061";"\071\081\051\098\115\118\084\065\055\075\043\075\099\083\115\076\110\122\073\099\120\112\065\107\071\072\071\115\066\072\061\061","\054\066\116\105\050\112\121\061","\076\114\048\086\104\072\061\061","\069\054\098\055\047\086\099\061","\104\077\048\051\106\119\061\061";"\048\068\073\099\115\116\079\100\053\054\097\112\049\087\072\070";"\072\073\061\061","\103\084\117\099\122\088\066\051\066\099\082\086\047\101\073\072\087\122\071\108\109\067\122\074\097\112\121\104\065\084\072\061","\081\050\116\077\105\119\061\061";"\104\111\053\081\079\072\061\061","\089\105\084\115\076\103\067\104\066\049\087\082","\073\086\078\114\119\065\089\099\088\110\107\117\104\119\061\061","\101\053\122\100","\047\082\065\075\106\098\043\047\072\057\083\110";"\079\107\106\120\043\106\116\074","\050\120\068\104\101\097\079\114\082\110\088\110\082\049\073\118\107\118\054\112","\073\068\054\109\048\112\087\047\119\051\102\110\051\073\061\061","\085\090\048\057\066\073\061\061","\110\086\103\116\067\073\061\061";"\065\111\051\072";"\051\116\082\104\103\105\048\084\043\106\081\075";"\099\053\102\104\067\081\053\099\087\067\118\065\120\083\114\088\107\114\070\101\050\055\076\061","\097\109\114\103\098\073\061\061","\086\116\043\118\081\047\099\072\078\066\102\089\081\055\083\076\048\055\117\061","\098\079\110\085\067\101\107\051\052\114\121\052\051\075\107\105\109\105\052\073\075\072\061\061";"\078\082\105\084\112\119\061\061";"\087\083\088\067\086\072\061\061";"\100\109\071\078\083\119\061\061","\056\113\089\089\083\082\080\055";"\106\101\077\065\052\104\074\076\105\101\081\103\121\108\121\050\098\084\078\051\069\103\057\061","\087\079\097\082";"\117\043\070\084\077\072\061\061";"\073\070\067\106\086\119\061\061","\105\120\117\087\090\081\070\050\073\118\076\056\043\068\043\065\090\087\084\056\113\114\052\101\110\053\079\080\086\072\061\061";"\101\069\115\056\118\103\086\103\116\118\111\099\079\073\080\057\076\072\101\053\105\073\061\061","\097\110\053\072\083\119\061\061","\104\072\061\061";"\067\068\081\098\047\119\061\061";"\066\049\120\102\116\119\061\061";"\054\050\098\054\105\085\120\078\066\080\119\119\066\052\118\120\043\072\061\061";"\112\075\054\122\116\078\085\076\105\057\114\116\103\073\061\061";"\088\066\087\052\051\051\100\067\071\085\081\061","\099\114\086\056\050\073\061\061","\079\050\054\111\066\052\116\113\103\103\084\086\051\099\061\061";"\087\080\069\052\043\121\101\061","\084\072\074\087\071\079\072\061","\055\102\053\111","\107\108\112\122\088\115\115\050\103\107\074\074\099\099\061\061";"\071\107\121\065\054\105\047\087\119\099\061\061","\088\089\076\102\078\079\068\121\077\073\061\061","\104\118\122\106\071\119\061\061","\089\075\076\043\104\084\066\056\121\083\068\072\077\066\057\101";"\121\087\119\072\072\048\072\087\068\120\090\049\102\115\083\113\072\103\107\078\108\106\110\057\084\117\068\114\112\119\061\061";"\052\065\098\052\082\119\061\061";"\068\113\078\103\097\077\070\073","\052\082\097\051\073\069\097\104\053\099\061\061","\114\069\075\048\054\043\081\068\103\097\065\069\066\111\081\108";"\088\051\108\114\052\104\121\061","\078\120\106\109\052\111\052\073\070\118\087\114\081\073\081\111";"\049\047\114\114\110\099\061\061";"\048\048\054\057\122\066\089\083\051\105\043\110\113\067\053\086\077\100\121\061","\117\080\086\049\107\113\114\072\088\065\078\070\119\073\114\055\086\099\061\061";"\055\066\098\088\086\072\057\061","\117\109\080\107\112\087\114\061","\110\066\076\109\066\072\120\119","\116\098\068\084\081\088\110\116\074\115\121\061";"\114\076\070\120\106\073\061\061","\121\085\081\111\075\089\079\089";"\100\056\107\053\100\071\120\049\116\068\111\082\108\065\101\065\098\099\061\061";"\109\122\108\051\102\088\043\098\122\088\116\075\055\105\103\082\116\050\047\104\051\104\053\114\107\043\076\117\100\072\061\061";"\055\119\061\061","\079\113\110\080\075\098\087\079","\043\112\112\085";"\118\120\100\113\072\108\101\061";"\082\089\087\102\075\075\113\051\098\078\043\076";"\101\088\079\080\070\071\056\067\072\122\098\047\089\087\114\119\105\116\089\080\117\051\073\109\069\102\113\054\110\073\061\061";"\100\047\104\048\097\099\061\061","\107\110\117\055\065\083\117\111","\043\074\088\053\067\072\061\061";"\101\117\066\118\090\077\117\117";"\104\074\054\113","\080\112\081\056\110\119\061\061","\111\072\061\061","\080\068\121\073","\047\097\047\051","\108\106\074\050\057\073\061\061","\087\074\051\051";"\071\122\049\056\084\071\119\061";"\102\043\070\070\077\118\066\055\050\086\118\061","\089\071\102\071\090\119\061\061";"\097\049\052\055\047\109\054\061";"\100\071\121\109\101\103\121\074\106\116\100\108";"\102\086\071\055\078\072\061\061";"\053\120\118\072\098\073\113\065\122\076\090\101","\075\074\111\110\079\065\120\061";"\043\079\117\068\053\067\071\057\122\053\097\061";"\057\069\117\082\057\110\114\076\104\072\078\085\078\101\073\109\100\087\099\061","\120\108\047\043\070\083\075\113\083\085\043\066\079\072\061\061";"\116\071\068\066\107\048\106\071\081\116\054\061","\077\110\109\053\085\077\056\088\075\072\061\061","\099\047\099\079\071\102\052\056","\073\107\117\048\056\115\121\104\080\104\098\089";"\077\078\080\086\075\090\067\089\107\107\050\122\051\117\081\061","\104\109\117\115\082\070\065\067\048\072\061\061","\075\077\099\104";"\052\084\089\068\087\056\105\109\111\081\071\120\119\119\061\061";"\107\084\054\103\122\099\061\061","\056\098\053\113\118\084\072\102\043\118\111\073\104\077\048\071","\103\066\072\098\117\114\069\070\075\085\080\061";"\052\057\048\065\072\050\080\061","\088\113\070\088\112\119\043\090\105\072\054\115\054\065\101\085";"\100\069\080\082";"\108\043\084\118\102\111\072\061","\072\081\053\087\069\099\115\066\119\122\077\103\113\117\116\072","\098\100\104\075\055\119\061\061";"\082\119\061\061";"\051\049\075\112\084\043\119\089\102\080\052\098\097\070\075\089\117\099\061\061","\090\121\097\079\069\099\061\061";"\079\087\105\086\103\099\061\061","\099\107\079\071\057\072\061\061","\105\081\088\098\108\119\061\061","\067\090\115\103\088\055\082\120";"\043\069\066\081\115\072\061\061";"\049\117\057\098\100\065\120\106\079\073\098\107\043\105\080\107\084\119\061\061";"\075\071\104\100\079\066\055\054";"\085\081\078\056\101\101\112\108\049\099\061\061","\087\047\070\087\120\071\101\061","\069\047\089\048\083\048\120\061","\068\099\061\061","\081\115\109\121\119\118\114\110\120\102\113\102\109\054\103\117";"\065\082\097\108\119\051\070\070\118\108\106\085";"\106\075\084\065\075\071\119\109\107\113\054\061";"\119\099\052\057\073\112\085\054\121\104\072\105\050\112\056\067","\053\054\083\090\112\119\061\061";"\108\047\098\117\049\105\109\057\066\080\110\053\098\052\070\107\088\082\075\051\057\119\061\061","\073\065\047\054\102\084\113\088\065\116\070\078\086\073\061\061";"\074\076\077\053\048\099\061\061";"\056\086\072\090\088\073\061\061","\070\084\067\107\048\119\089\067\097\053\089\111","\068\097\108\067\047\072\061\061";"\069\119\073\103\120\122\088\100\083\120\069\052\103\075\106\055";"\110\119\055\086\122\085\083\099\082\065\048\085\052\073\061\061","\069\105\097\068\101\081\076\070\100\099\061\061";"\078\079\109\109\109\107\099\099\117\118\066\107";"\101\099\061\061","\067\043\084\043\050\043\100\104\076\110\049\089\103\066\089\100\070\099\061\061";"\081\074\073\053\050\067\114\074\106\088\085\074\105\082\114\117\053\112\101\071\078\071\068\082\065\106\084\113\106\119\061\061";"\110\107\085\053\121\121\116\081\072\073\103\076\065\066\120\083","\105\066\068\052\111\104\057\061","\049\073\117\083\043\072\061\061";"\122\043\083\077\101\119\105\089\048\116\114\050","\083\047\101\114\111\072\061\061","\119\117\056\070\082\106\120\061","\103\079\102\070\057\088\083\099\070\051\117\061","\116\068\081\067\103\118\075\114\099\074\119\061","\118\089\117\071\122\043\121\055\050\073\061\061";"\108\080\068\048\097\110\086\122";"\099\110\102\078\104\084\097\061","\069\081\105\068\086\084\076\054\072\068\076\061";"\118\065\048\088\118\070\080\100\104\121\051\043\104\098\099\080","\111\051\071\087\088\088\119\116\088\051\088\072\114\043\047\053\072\119\086\082\065\099\061\061";"\097\075\084\088\072\077\112\104\111\053\118\117\057\107\056\052\074\073\061\061";"\102\065\069\074\084\074\082\049\106\073\061\061";"\108\102\056\049\088\116\073\061","\067\054\056\081";"\079\052\122\090\111\083\054\061","\056\081\068\112\102\120\074\103\084\119\061\061";"\054\108\088\097\071\073\061\061","\053\048\118\053\080\076\112\122\049\084\069\119\119\089\103\086\043\107\075\100\067\111\054\061","\088\085\053\122\047\069\114\061","\082\115\090\097\101\105\054\061","\049\081\101\084\108\120\099\082\082\107\067\119\055\074\121\061","\048\077\077\111\065\115\108\070","\072\050\113\052\054\114\119\077";"\113\114\053\102","\056\043\072\089\117\099\061\061","\054\100\080\049\078\075\114\061","\108\102\052\067\108\072\061\061";"\070\099\061\061","\076\104\090\051\055\101\073\119\067\103\119\061","\079\080\089\106\077\090\119\061","\052\043\072\078\052\112\082\075\117\117\118\061";"\085\115\086\055\122\074\089\075\105\098\110\116\069\071\108\073","\051\114\101\111","\082\101\069\052","\073\107\111\103\113\107\115\100\116\088\119\061","\098\071\086\074\083\088\110\088\055\115\097\082\067\083\075\052\112\112\085\098\065\084\113\110\043\111\103\111\115\051\089\112\101\066\069\082\075\113\098\084\043\056\050\052\074\082\057\087\108\072\061\061";"\074\070\081\084\079\085\054\061","\080\056\101\113\057\078\073\061";"\054\100\113\051\120\112\069\106\083\110\101\055\049\072\061\061","\109\071\098\074\100\100\081\085\050\099\061\061";"\105\067\052\073\100\083\098\102";"\080\048\066\057\116\053\085\108\077\054\085\086\085\101\118\079\119\114\079\117\118\106\122\054\052\071\065\097\066\072\061\061";"\103\103\067\103\066\109\050\088\116\090\112\053\077\118\054\061";"\103\117\088\078\085\073\061\061";"\110\049\108\121\085\120\043\048\106\099\097\061","\107\068\067\116\077\099\061\061","\057\079\086\078\078\073\061\061","\098\073\097\049\111\104\088\107\055\082\121\101\113\054\084\071\114\097\112\068\081\073\061\061","\074\115\081\054\090\089\043\080\082\112\073\101","\056\067\098\082\112\097\066\118\048\077\109\050\071\079\105\103\057\055\089\110\066\072\061\061","\115\106\110\098\105\107\121\056\122\105\066\057\077\111\082\054\078\050\043\054","\069\116\076\113\101\071\057\061","\098\109\072\073\112\047\117\061";"\056\103\097\106\117\117\077\085\078\100\052\097\109\054\055\053\108\048\111\117\043\066\068\073\074\043\056\098\047\072\061\061";"\078\067\065\079\077\114\121\083\107\114\117\061","\053\101\071\115\079\054\109\122\111\113\121\061";"\105\114\119\118\065\056\101\115\097\112\090\081\085\073\061\061","\077\107\106\114\069\108\051\076\056\118\077\052\048\054\087\107\113\112\115\107","\056\053\071\086\057\053\118\061","\049\075\077\057\049\104\097\111\112\069\075\055\074\049\079\075\051\111\073\061","\118\077\122\090\110\072\061\061";"\057\085\116\075\090\089\113\057\116\099\070\121\120\070\103\088\090\043\101\071","\089\075\088\121\119\099\061\061","\080\056\120\053\065\109\074\047\099\072\051\075\072\073\061\061","\104\099\098\100\103\105\121\061";"\050\073\121\082\101\105\086\115\118\105\077\098\108\110\105\122\080\109\054\108\052\048\078\054\099\047\099\087\110\072\061\061";"\084\052\047\075\100\047\112\115\078\065\077\079\101\099\061\061","\049\102\118\112\069\116\072\061","\070\080\050\118\111\080\097\076\104\053\086\073","\117\121\114\104\104\104\104\108","\107\070\077\122\079\079\055\052\114\119\061\061";"\075\065\122\090\073\072\061\061";"\086\107\101\052\101\074\115\065\043\099\061\061";"\082\114\080\116\115\099\061\061";"\050\120\113\106\099\114\086\055\055\106\082\075\066\099\120\061";"\043\068\043\066\120\101\101\114\076\081\120\115","\090\122\105\111\084\069\085\079\086\112\049\113\120\078\103\106\104\081\078\104\119\099\061\061";"\073\056\056\100\119\047\079\102";"\057\108\118\074\103\073\061\061";"\119\057\122\050\107\087\086\117","\067\117\086\090\057\104\085\080\098\074\120\061";"\070\082\069\047\055\099\061\061","\081\069\068\049","\120\078\047\051\078\120\108\087\069\119\079\074\047\073\114\061","\114\078\122\114\053\100\073\061","\116\043\121\099\076\085\053\087\089\047\065\073\105\079\097\106";"\085\088\086\098\048\113\102\079\111\079\119\090\109\100\074\116\085\053\073\061","\122\057\102\070\057\067\115\055\110\112\120\061";"\088\119\061\061";"\052\113\110\078\088\085\071\088\048\068\114\076\087\047\120\109\047\055\073\043\043\112\120\104\117\043\085\055\085\073\061\061","\074\117\078\097\048\102\070\090\111\085\076\061","\082\074\076\071\106\099\061\061","\087\080\079\071\078\073\043\087\121\099\061\061";"\067\085\054\052\080\081\100\071\119\072\061\061";"\076\069\048\083\052\071\088\049\089\108\116\078\103\099\061\061","\100\097\057\050\110\099\061\061";"\077\076\120\069\085\073\061\061";"\076\116\068\085\121\099\061\061";"\104\083\066\110\085\068\076\118\110\053\072\097";"\103\110\121\108\083\073\061\061","\098\109\077\055\052\080\103\087\117\110\057\061","\099\049\111\101\110\075\078\105\116\079\081\102\115\104\079\089\043\099\050\086\066\073\061\061";"\118\109\057\043\102\099\061\061","\073\056\056\072\076\104\118\068\119\085\071\088\076\113\076\074\097\056\120\048","\117\069\070\073\043\106\076\057\106\073\061\061","\087\072\097\087\069\115\083\051\113\077\068\055\113\055\081\080\065\047\085\068\071\072\061\061";"\110\099\061\061","\049\052\087\071\070\065\048\084\109\107\068\069\051\103\084\099\087\065\076\061";"\101\072\077\054\089\099\061\061";"\083\081\100\097\113\119\061\061","\109\121\053\055\086\072\074\108\103\078\105\078\113\105\114\104\113\112\119\122","\119\098\049\084\047\114\120\061";"\121\043\100\105\101\075\051\071\055\106\113\080\076\083\097\051\071\097\066\109\108\072\120\071\088\068\055\056\069\072\061\061","\048\083\051\043\112\086\065\048","\108\050\086\080\106\087\117\121\112\056\119\061";"\070\079\048\106\108\122\066\116\121\050\121\109\109\115\076\061","\115\115\074\100\087\101\108\097\053\098\099\061","\097\068\114\121\099\050\110\101\050\069\075\069\048\072\065\065\070\069\073\076";"\112\066\066\068\049\116\052\111\097\077\079\119\122\103\122\109\067\112\111\105\120\075\111\067\109\054\048\065\111\073\061\061";"\086\065\074\076\111\078\067\072\076\055\074\109\047\072\061\061","\110\107\071\088","\072\051\118\109\119\072\061\061";"\105\110\072\111\080\100\077\070\118\056\120\061","\088\120\070\106\102\119\061\061";"\109\068\054\106\089\072\061\061","\087\072\061\061";"\050\085\070\069\099\111\043\089\068\110\108\051\117\099\061\061";"\052\118\054\056\100\119\061\061";"\108\101\079\055\104\073\061\061";"\079\117\068\113\052\103\101\061","\073\100\105\048";"\100\087\056\105\118\067\089\102\076\067\073\101\102\052\118\086\111\108\073\061";"\117\050\118\101\066\100\080\061";"\112\110\070\050\067\072\061\061","\112\113\104\110\080\080\107\120";"\114\048\109\112\084\089\080\104\097\099\061\061";"\083\067\065\109\079\099\061\061";"\114\118\081\069\104\097\055\057\115\103\121\061";"\122\065\114\067\109\054\053\084\073\119\061\061","\089\079\050\087\089\076\110\079";"\069\076\070\070\087\068\056\090";"\070\074\049\075\080\072\061\061";"\087\078\078\078\054\080\071\112\108\078\067\119\076\084\107\111\108\074\054\108\107\084\112\087\052\097\080\112\101\078\121\119\043\057\075\071","\115\076\052\100\075\088\054\061","\057\119\061\061";"\051\055\068\079\050\074\056\056\050\050\052\105\084\105\113\101\076\110\078\098","\085\089\102\090\103\090\087\048";"\112\052\083\054\116\117\051\104";"\072\105\068\114\054\083\071\052\052\075\072\061";"\070\049\121\122\077\107\079\057\043\117\112\083\080\072\061\061","\074\104\104\077\057\084\079\085\075\068\067\122\107\119\051\051\102\116\069\116\087\078\069\053\099\119\106\088\056\074\099\101","\089\071\105\081\105\051\112\081\088\068\077\077\084\089\055\076\082\106\088\049\087\112\070\073";"\051\110\113\119\112\099\061\061";"\072\119\120\052\087\043\066\087","\117\082\098\068\050\072\048\102\073\097\099\105\119\098\100\120\105\112\085\112\079\099\061\061";"\056\050\097\068\047\048\106\065\082\103\083\069\084\072\090\082","\089\077\069\102\083\117\070\066","\121\043\049\079\070\069\088\048\114\080\075\099\122\099\061\061";"\056\098\071\078\075\043\067\111\118\097\108\079\109\120\102\104\119\100\066\077\085\088\075\072\106\043\051\117\117\099\061\061";"\085\075\068\119\086\048\083\055";"\065\056\084\075";"\074\109\098\090\052\099\061\061","\084\049\115\051\056\087\118\043\105\119\061\061";"\077\054\110\109\071\097\115\122\103\119\061\061";"\048\053\088\051","\072\065\057\108\056\070\120\121\070\073\061\061";"\076\113\089\104\110\118\072\065\066\081\098\109\053\108\122\086\077\107\082\089\104\071\084\043\107\073\061\061";"\048\085\074\054\078\066\106\085\075\099\061\061","\050\050\056\078\102\117\089\098\074\049\083\101\088\048\101\061","\078\084\075\070\120\054\076\061","\100\066\073\118\052\065\114\061";"\084\099\061\061","\105\057\107\087\117\075\121\061";"\066\080\057\100\050\112\056\056\087\106\099\061","\065\110\073\117\043\097\075\098\066\087\070\078\119\090\048\052\069\105\090\068";"\086\117\078\113\117\072\098\105\109\112\101\061","\078\056\051\102\067\088\082\101";"\105\072\079\051\106\117\112\073\056\080\111\122\087\101\089\103\081\071\097\080\119\119\061\061","\112\077\114\090\082\073\061\061","\078\099\061\061","\067\106\122\114\067\069\098\072\081\086\103\097\098\122\043\077","\115\111\086\043\102\099\074\070";"\070\102\106\089\102\098\056\105\116\050\079\071";"\080\102\083\089\098\118\097\109","\105\099\061\061","\078\109\053\089\072\099\087\075\085\052\049\071\073\050\057\049";"\090\080\052\088\121\067\117\048\111\116\054\117\115\065\076\107","\089\120\115\090","\065\055\115\118\107\051\122\076\086\111\114\061";"\056\081\101\069\107\075\114\061";"\072\084\066\051\087\107\055\053\114\082\089\067\072\099\061\061";"\111\053\112\080\075\076\068\090";"\109\099\090\050\118\071\057\119\104\110\083\047\097\099\061\061","\043\102\076\069\101\048\105\116\066\102\119\048\070\100\068\055\073\050\106\067","\100\109\078\071\069\080\105\068\084\067\068\048\076\072\061\061";"\099\119\065\083\071\105\081\084","\051\102\122\110\057\099\061\061","\086\089\077\115\110\113\113\083\083\112\120\047\086\111\071\073","\053\068\082\120\109\075\047\051\068\099\061\061","\086\083\066\075\118\087\120\061";"\070\112\108\084\101\084\121\097\080\073\116\089";"\085\077\082\119\050\067\088\057\047\054\084\068\076\074\066\108\073\098\099\072\065\088\100\106\079\050\109\069\086\075\120\111\070\051\084\071\097\102\118\061","\051\043\088\047\118\102\072\061","\080\071\068\054\081\073\061\061";"\111\099\061\061","\081\057\051\099\081\119\061\061","\089\049\084\075\104\090\119\061";"\107\105\049\077","\119\050\076\061","\113\050\052\049";"\105\121\103\085\117\081\105\111\111\118\097\061","\051\098\067\116\088\099\061\061";"\051\053\080\053\074\105\115\070\121\102\103\055\101\119\061\061","\098\053\113\107\109\054\101\116\108\055\056\080\070\071\110\116";"\109\051\048\101\116\099\061\061","\120\099\120\072\074\080\047\057\079\078\079\068\075\075\057\061";"\118\078\089\080\111\082\057\061";"\057\050\108\103\048\119\053\068","\090\088\100\073\088\119\061\061","\067\084\076\087";"\100\048\084\099\066\103\120\054\115\102\067\066\067\043\101\061";"\068\117\056\082\056\073\061\061","\080\115\089\117\085\070\119\075\105\047\118\061","\090\118\084\118\115\119\061\061","\057\116\106\102\070\079\121\087\050\122\072\072\108\049\083\121","\083\103\055\070","\121\087\053\057","\118\099\090\104\122\072\061\061","\056\073\078\107";"\043\086\077\105\086\099\086\084\072\115\069\090\081\118\072\108","\097\072\098\079\067\110\115\104\108\106\121\061","\076\057\098\051";"\120\111\065\056","\101\074\076\078\083\119\061\061","\100\108\110\087\121\073\061\061";"\051\085\109\068","\120\055\043\050\103\086\056\104\101\097\048\101","\084\115\083\078\097\073\089\099\066\111\054\098\119\088\111\090\052\073\061\061","\051\071\121\114";"\057\106\084\075\115\081\121\061";"\097\067\068\068","\097\079\100\081\075\111\105\087\087\080\107\089\106\054\103\073\098\073\075\082\078\057\090\101\120\074\109\105\083\113\100\070\050\052\068\069\082\053\079\104","\050\113\050\079\068\099\061\061";"\085\065\112\102\086\111\122\077\047\074\099\061";"\109\082\065\056\051\048\114\061","\057\101\102\050\057\043\102\080\121\103\118\061","\081\086\101\085\065\068\120\061","\101\079\101\118\100\073\080\101\067\103\088\069\118\072\061\061";"\122\100\084\118\050\107\076\112","\106\053\043\083\104\106\075\121\085\078\073\061","\070\112\112\075\050\105\101\070\074\122\120\097\072\043\077\114\120\119\061\061","\070\087\067\105";"\082\097\083\076\098\102\047\055\089\099\061\061","\119\080\120\057";"\054\088\105\103\107\065\090\047\067\109\074\068\077\086\055\121","\068\087\069\056\050\088\065\112\118\107\073\049\106\086\121\101\114\098\081\098\101\112\117\117\120\081\097\114\104\121\081\061";"\116\074\101\065\066\089\050\102\080\088\067\085\082\110\057\053";"\051\056\054\069\067\077\110\103\097\103\109\051\048\072\061\061";"\050\118\087\106\116\057\121\061";"\121\089\098\115","\067\068\116\102\065\098\048\043\047\077\070\076\106\109\055\086\066\072\061\061","\103\118\097\074\119\102\043\106\121\072\061\061","\110\057\074\074\122\069\070\066\089\075\076\098\066\055\085\088","\076\072\053\121\080\056\114\056\120\073\061\061","\075\090\080\048\113\099\061\061";"\047\122\106\108\078\082\049\082\106\085\057\103\054\075\076\089\074\106\073\061","\108\077\048\102\113\110\086\083\085\069\073\061";"\119\084\084\071\053\048\117\061";"\083\107\049\043\084\053\106\109\106\115\113\068\097\052\052\073\078\121\078\070\051\056\098\047\090\119\121\100";"\113\074\080\079\067\090\101\108";"\083\107\089\121\089\072\061\061";"\050\088\048\118\049\069\052\083\104\047\098\069\116\072\105\047\097\104\050\071\084\050\085\086\109\067\043\053\054\089\120\116\117\099\049\050\098\107\108\070\116\089\052\079\116\068\117\061";"\066\104\080\070\069\072\061\061","\109\084\097\066\050\111\049\084\076\079\065\104","\079\057\071\087\071\051\100\112\054\072\061\061";"\055\114\079\120\112\121\071\119";"\088\111\107\049\113\087\083\075\114\111\112\099\119\114\101\071","\116\108\043\116\068\072\061\061","\057\111\100\112\049\057\081\055\111\057\070\080\072\066\066\089","\089\099\061\061";"\070\075\089\081\078\081\099\061";"\102\066\115\107\048\103\072\061","\085\086\112\090\085\099\119\061","\101\090\056\110\076\112\113\116","\085\067\078\073\118\105\113\101\068\099\061\061";"\054\047\077\097\109\116\054\061";"\078\072\061\061","\076\080\105\054\082\106\069\101\085\073\061\061","\119\089\082\090\097\057\052\085\047\110\102\084\043\106\119\105\113\101\056\113\065\117\050\117\074\065\077\076\107\053\120\069\101\050\118\061";"\071\073\114\098","\108\100\103\080\073\119\061\061";"\090\117\113\107\108\074\121\061","\073\112\070\108\052\114\102\114\090\072\061\061","\075\073\114\050\122\101\080\069\081\097\076\098\082\118\116\086\116\049\082\087\090\099\061\061";"\051\087\117\108\075\106\107\104\088\082\099\079\057\056\053\108\080\072\061\061";"\074\057\076\113\079\072\061\061","\109\051\086\087","\076\119\051\086\072\073\061\061","\069\081\112\097\073\119\061\061","\071\110\080\107\084\048\054\080\053\073\101\107\084\097\048\098\053\115\104\098\122\106\065\087\107\105\107\085\120\110\117\061","\087\101\100\112\086\111\108\053";"\057\101\116\049\070\099\061\061","\120\075\084\089\072\047\054\061","\065\110\072\073\118\120\107\065\086\079\065\050\050\073\061\061","\120\104\116\114\122\054\043\056\049\120\100\065\073\116\048\084\080\088\113\080\073\099\061\061";"\099\048\051\120","\056\114\054\072","\075\108\119\121\083\112\120\107\100\073\061\061";"\084\051\090\054\115\087\084\120\090\071\114\122\100\101\081\112","\069\080\076\106\087\052\089\109","\065\073\061\061","\089\055\112\087\082\102\113\106\050\054\056\100\116\066\075\087","\100\079\120\075\112\100\049\078\121\110\110\116\067\119\061\061","\111\107\122\047\104\108\069\102\055\104\069\112\043\099\061\061","\104\105\122\117\113\114\073\061","\084\104\090\053\089\086\071\047";"\050\052\121\071\122\120\115\114";"\050\068\103\077\065\089\077\050\113\084\088\071\067\056\119\049\067\113\066\088\117\087\111\086\085\055\048\057\122\119\061\061";"\104\106\113\090\108\053\101\061";"\083\111\080\081\097\097\105\090\100\050\056\110\081\107\117\087","\119\117\071\047","\065\051\085\055\099\076\073\097\066\108\079\117\097\086\120\088\084\105\119\081\087\106\097\061";"\043\054\054\077\050\073\061\061","\086\072\114\080\116\085\085\117\065\106\081\061";"\118\073\076\075\122\086\118\087\086\108\071\104\115\072\102\077\069\099\097\061";"\067\103\057\087\057\112\121\061","\066\082\087\057\084\118\080\106\056\050\074\067\083\112\066\071","\069\097\117\090\070\120\107\066\112\047\117\070\111\081\084\081\097\051\122\056\107\072\061\061","\068\114\113\108\106\053\050\098\090\056\080\047\052\116\083\051\110\084\080\061";"\107\049\087\118\081\108\098\120\110\099\061\061";"\085\049\113\065";"\076\112\066\073\072\108\084\122\087\086\054\090\097\114\099\082";"\099\088\072\111\119\104\065\099","\100\115\082\057\090\080\079\055\114\073\061\061","\109\113\053\056\098\100\097\049\086\098\052\057\097\082\108\118\097\115\069\087\056\099\061\061";"\109\088\053\081\050\078\081\078\079\105\068\086\054\119\061\061";"\087\051\115\072\078\110\120\069\082\121\122\121\054\099\111\082\103\072\061\061";"\080\109\078\104\057\106\050\083\113\099\061\061","\052\083\049\115";"\087\057\118\085\078\097\097\084\121\065\112\121\087\055\083\079\098\118\084\067\082\081\057\078\065\121\075\121\090\073\061\061","\090\070\113\111\106\070\049\102";"\066\048\120\072\110\043\069\049\108\088\052\105\117\043\122\114\054\067\081\061","\078\100\113\054\121\050\121\110\114\100\103\113\120\073\061\061","\051\073\061\061";"\097\110\110\090\089\122\051\104\104\047\043\112\120\098\051\072\072\099\061\061","\054\116\083\105\048\055\078\089","\088\111\056\076\089\120\107\117\057\099\111\090\082\072\061\061";"\118\122\090\115\076\072\061\061";"\056\073\086\114\068\122\068\071\106\073\061\061";"\108\066\104\054\115\065\120\088\084\108\054\047\065\107\121\061";"\122\053\067\086\119\098\115\079\090\087\122\084","\118\089\098\073\122\072\061\061","\121\082\102\082\082\057\073\061";"\055\049\073\105\085\078\119\078\066\073\083\111\084\120\118\119\071\072\061\061","\088\106\047\087\056\090\106\074";"\119\065\074\116\078\119\061\061","\057\067\102\077\073\066\081\120\048\051\111\053\115\114\117\057";"\057\112\090\072\112\075\050\076\117\075\055\081\102\119\061\061","\073\109\088\108","\122\114\083\055\101\048\122\057\074\117\057\048\066\074\068\118\088\100\057\061","\051\088\057\111\076\055\089\104\102\101\121\078\069\081\107\047","\055\102\050\104\104\080\056\109\065\097\099\107";"\056\098\119\110\106\119\065\054\119\075\119\070\077\112\119\061","\118\053\103\118\052\080\056\106\121\116\104\083\074\075\043\114\101\113\057\061";"\067\052\110\049\077\072\061\061","\082\081\065\085\104\050\073\120\112\110\109\080";"\069\110\108\090\079\078\074\098\116\069\116\066\104\090\073\061";"\065\050\066\103\056\050\077\050\106\049\088\068\071\054\085\067\111\110\121\110\052\099\082\106\080\067\082\052\083\073\061\061","\076\105\066\119\106\119\121\061","\120\120\074\067\048\074\120\061","\070\049\075\083\055\069\075\057\105\089\109\115\122\073\061\061","\071\109\066\066\116\066\073\066\101\085\081\061","\089\043\053\098\116\113\053\085\103\117\106\056\078\080\121\081\101\114\082\047\051\099\061\061";"\073\083\054\104\048\105\072\073\081\072\117\089","\121\108\110\054\048\075\110\053\049\105\050\116\074\098\072\061";"\067\053\076\049\084\065\119\061";"\071\113\119\072\090\122\047\073";"\105\100\121\099\098\065\105\117\110\118\099\086\083\114\078\049";"\053\111\106\053\072\099\061\061";"\102\076\083\113\121\049\079\049\078\117\048\086\067\071\077\085";"\104\118\112\113\074\072\061\061","\111\118\051\043\089\068\107\111\075\072\061\061";"\104\088\097\052\115\077\073\061","\099\106\047\065\068\076\054\061";"\053\089\081\068\090\115\114\061";"\052\100\090\087\085\099\061\061","\105\056\066\068\121\047\052\057\072\071\084\118\118\048\108\088\084\073\121\061";"\056\053\077\113\078\113\084\088";"\065\122\051\054\048\073\061\061","\049\048\074\106","\109\080\051\082","\053\070\085\105\107\050\066\052\120\070\122\071","\076\067\118\103\097\072\061\061";"\047\051\066\104\102\074\114\061";"\105\070\108\054","\122\081\082\113\122\077\121\067\105\078\099\061";"\102\115\067\118","\055\090\053\065\050\048\072\061";"\057\057\082\120\086\088\105\113\119\098\082\105\078\120\050\084\077\073\061\061";"\074\055\113\097\120\074\107\054","\098\057\048\085\070\119\061\061";"\104\097\050\100\054\088\083\106\056\119\061\061","\097\080\047\105\113\048\080\061";"\110\118\069\121\122\074\071\118";"\078\079\050\065\076\100\072\061","\052\108\117\054\067\050\070\051\043\057\087\052\089\100\043\084\107\107\054\061";"\050\053\068\080\106\103\073\102\049\082\049\043\112\055\055\049","\102\066\050\110","\073\086\070\098\049\051\072\061";"\048\051\086\088\048\098\080\061","\047\109\050\097\114\097\076\061";"\088\122\049\048\113\116\084\115\109\071\121\075","\069\048\104\098\108\050\090\075";"\117\071\114\116\112\074\075\047","\114\099\052\075\116\108\080\116\083\105\072\051\065\116\114\085","\101\108\116\043";"\089\053\080\099\111\052\049\076\065\053\121\114\078\099\061\061";"\082\074\090\087\076\081\075\097\115\106\102\043\048\108\083\048","\079\097\067\082\075\069\106\110\069\110\071\077\100\099\061\061";"\115\084\077\100";"\115\076\107\086\082\119\116\118\068\105\118\061","\109\100\050\075\068\119\066\057\117\054\076\061";"\080\080\074\053";"\051\106\106\098\118\066\054\074\048\100\076\061","\088\076\047\050\103\055\121\061"}for idx,assert in ipairs({{(1546762-(645022-(-39135)))-862604,-206902+208718},{((-729681+-609961)-(-502113))-(-837530);878128+-876952},{-914043+915220;-136439+138255}})do while assert[254230-254229]<assert[(-120678+-540614)-(-661294)]do tmpname[assert[-1032519-(-1032520)]],tmpname[assert[442285+(-33913-408370)]],assert[545053+-545052],assert[759227+(-1271483-(-512258))]=tmpname[assert[-1022366-(-1022368)]],tmpname[assert[284321-284320]],assert[-89275-(-89276)]+(-258479+258480),assert[-543496-(-540745-2753)]-(16940+-16939)end end local function b(idx)return tmpname[idx+((-220007+-128384)+378081)]end do local idx=tmpname local assert=table.concat local b=math.floor local void=string.sub local rawequal=type local cls=string.len local collectgarbage=string.char local flush={b=(-643779+196458)+447360;["\050"]=(775460+-1121849)+346406,["\051"]=-1026753+1026806,["\052"]=-98237+98296;H=-586760+586792;x=-19225+(280202-260973);d=-761630+761660;X=-494582+494588,Q=313907+-313883,q=-545868-(-545926),["\048"]=-791796+791823;c=297230+-297182,T=834320-834310;Z=-700527+(970741+-270209),s=212985-212936,C=255928-((698213-120670)+-321644),["\055"]=-349164+349219;w=262683-262667,h=(-227276-678380)+905659,["\056"]=-582145+582199;v=579523-579487;G=(773149+-1711839)-(-938752),I=-990133-(-990133);["\047"]=994732-994710;o=-884268-((-727358+(-120652-(837487+-387269)))-(((1038223-(-102634))-773275)-781535)),z=-776471-(-776489);U=-713157+(547271-(-165928));m=590347-590346;P=-527015+(-694077+((1305503-272684)-(-188329))),n=347298+-347248,t=-545382+545420,r=217331-217287;R=-300250+300263;A=(53708+876371)-930045;B=(134537+-479121)-(-344607),K=-403407-(-403453);["\057"]=(-179405+686797)+-507372;f=-405449-(-405482);D=-477590-(-477633);u=(-483728-(-482499))+1237;["\054"]=-712391+(-509601+1222020);F=-611543+611578;V=-730283+730302;W=588878-588847;L=78401+-78349;E=542044+-541993,["\053"]=(892434+20666)-(((462737-(-82540))+(1157385-936571))+146962);g=896964+-896901,j=-896204-((-215508-(-299213))-979920),["\043"]=488682-488621;N=(1035495-(103505-(-736227)))+-195738,J=675026+-675011,k=((425104+(-1113221-(-751579)))+50699)+(-75294-38865),O=696685+-696671;S=713371-713350;M=516787+-516761;y=-907910-(-907922);["\049"]=-755506+755547,p=-492471+(901200-(-582540+(2017826-1026566)));e=651224+-651184,l=302413-302356;a=755193+-755133,Y=805311+-805274;i=-608698-(-608743)}local Factory=table.insert for tmpname=-97765+(-653796-(-751562)),#idx,-112284-(-112285)do local value=idx[tmpname]if rawequal(value)=="\115\116\114\105\110\103"then local rawequal=cls(value)local gmatch={}local size=-322135+322136 local gmod=261825+-261825 local wrap=658017-658017 while size<=rawequal do local idx=void(value,size,size)local assert=flush[idx]if assert then gmod=gmod+assert*(802624+-802560)^((-602549-(-602552))-wrap)wrap=wrap+((-780393-(-80086))-(-700308))if wrap==-982454+982458 then wrap=606312-606312 local idx=b(gmod/(-426147-(-1288845-(-797162))))local assert=b((gmod%(440835-375299))/(-20719-(-20975)))local tmpname=gmod%(-781908-(-782164))Factory(gmatch,collectgarbage(idx,assert,tmpname))gmod=360798-360798 end elseif idx=="\061"then Factory(gmatch,collectgarbage(b(gmod/(487113-421577))))if size>=rawequal or void(value,size+(-1047075+(205289+841787)),size+(-781079+781080))~="\061"then Factory(gmatch,collectgarbage(b((gmod%(((2087907-847888)-280819)+-893664))/(-386598-(-386854)))))end break end size=size+(536415-536414)end idx[tmpname]=assert(gmatch)end end end if _a_tmpfile_rawget_gmod__G_iterator~=b(682798+-711864)then return end do local idx=true local assert=string[b((-904669-43667)-(-1367475-(-447901)))]local tmpname=function()error(b((501174-(-35807))-565325))end local void=false local rawequal=pcall(function()void=true end)and void local cls=math[b(684719+-712750)]local collectgarbage=table[b(-571408+((767799+-1125960)+901445))]local flush=table and table[b(808068+((371334+236548)+-1445201))]or unpack local Factory=cls(-615593+(428048-(-187548)),908612-908547)local value=(-879948+1659074)+-779126 local gmatch=475973+-475973 local size={pcall(function()local idx=(-17369+9733007)-b(652085+-680625)^(13175627-336277)return b((873627+-494377)+-408517)/idx end)}local gmod=size[(322326-649749)+327425]local wrap=tonumber((assert(tostring(gmod),b(((706930-(-186948-(-867660)))+330699)-386498)))())for tmpname=-238926-(-238927),Factory,544660-544659 do local void=math[b(-140866+(915374+-802539))]((57678+156110)-213787,496755-496655)local rawequal=cls(76861+-76861,1008913-1008658)local collectgarbage=cls(-685284+685285,void)local size=cls(-828417-(-828418),(-639315-(-469165))+170152)==(-965119+391505)-(-573615)local m=gmod:gsub(b((-668871+654634)+-15344),b(122104+(-564735+(-221690-(-636028))))..(tostring(cls(-211639-(-211639),(-798675+-38575)+847250))..b(-775254+746961)))local rawlen={pcall(function()if cls(-989876+989877,589750-589748)==-523577+523578 or tmpname==Factory then local tmpname=tonumber((assert(tostring(({pcall(function()local idx=((-970646+1300288)+15048796)-b(-39575+11243)^(14352655-225081)return b(496737-525470)/idx end)})[(-656838+902798)+-245958]),b(-813970-(-784389))))())idx=idx and wrap==tmpname end if size then error(m,-742761-(-742761))end local value={}for idx=-866867+866868,void,270903+-270902 do value[idx]=cls(995997+-995997,136371-136116)end value[collectgarbage]=rawequal return flush(value)end)}if size then idx=idx and(rawlen[117555+-117554]==false and rawlen[-1021042-(-1021044)]==m)else idx=idx and rawlen[(823906-602362)-221543]value=(value+rawlen[collectgarbage+(-912653+912654)])%(27133+-26877)gmatch=(gmatch+rawequal)%(875148-874892)end end idx=idx and value==gmatch if idx then else repeat return(function()while true do l1,l2=l2,l1 tmpname()end end)()until true while true do l2=cls(-377955+377956,(330720-(-512558))-843272)if l2>-1016718+(2005318-988598)then l2=tostring(l1)else l1=l2 end end return end end local idx,assert do local tmpname=math[b(380649+-409879)]local void=math[b(1032613+-1060644)]local rawequal=table[b(-96624+(9495-(-58536)))]local cls=string[b(-772639-(-744544))]local collectgarbage=71866-71866 local flush=925377-925375 local Factory={}local value={}local gmatch=718802-718802 local size={}for idx=-304755-(-304756),-164329-(-164585),-88918-(-88919)do size[idx]=idx end repeat local idx=void(-487812+487813,#size)local assert=rawequal(size,idx)value[assert]=cls(assert-(-241442-(-241443)))until#size==908608+-908608 local gmod={}local function wrap()if#gmod==-569652-(-569652)then collectgarbage=(collectgarbage*((-72710-972233)+1044960)+((508593+-1149476)+(24915359076544-(-147306))))%(35184372895742-806910)repeat flush=(flush*(438243+-438034))%(-96282-(((-914480+464417)+776274)-422750))until flush~=-62965-(-62966)local idx=flush%((33908+(977358+-22968))-988266)local assert=(tmpname(collectgarbage/((-154366-(977444-396415))-(-735397))^((-529047-(-529060))-(flush-idx)/(-592667+592699)))%(4294106513.0-(824113+-1684896)))/(-55616-(-154350-(-98732)))^idx local void=tmpname((assert%(-782275+782276))*(-65292+4295032588.0))+tmpname(assert)local rawequal=void%((284511+-1186891)-(-967916))local cls=(void-rawequal)/((-523808+332594)+256750)local Factory=rawequal%(-172434-(-172690))local value=(rawequal-Factory)/((-912421+(1291657-585981))+207001)local gmatch=cls%(-40954-(408847+(-1019878+569821)))local size=(cls-gmatch)/((-678358+1265557)+-586943)gmod={Factory,value;gmatch;size}end return table[b(513626-542219)](gmod)end local m={}assert=setmetatable({},{[b(-968269+940110)]=m;[b(463861-493216)]=nil})function idx(assert,tmpname)local void=m if void[tmpname]then else gmod={}local idx=value collectgarbage=tmpname%(478846+(745637+35184370864349))flush=tmpname%((326933-541242)-(-214564))+((((((631821-931129)+-454806)+468496)+822619)+(-591799-(916761+-1248936)))-277375)local rawequal=string[b(-390422+361180)](assert)void[tmpname]=b((((-450723+-595383)+(678717-(-930682)))-315761)+-275508)local cls=((972353-908158)+-472109)+(589006-(837281+-656343))for rawequal=-730217-(-730218),rawequal,(-231919-(-197217))-(-57679+22976)do cls=((string[b(369185+-398566)](assert,rawequal)+wrap())+cls)%(-277862+278118)void[tmpname]=void[tmpname]..idx[cls+(749315+-749314)]end end return tmpname end end return(function(tmpname,rawequal,cls,collectgarbage,flush,Factory,value,m,gmod,gmatch,class,void,yield,math,readline,onload,rawlen,iterator,number,_G,size,newpath,wrap)iterator,onload,readline,_G,wrap,newpath,class,gmatch,size,void,m,number,yield,rawlen,math,gmod=function(idx,assert)local tmpname=m(assert)local b=function(b,rawequal,cls,collectgarbage)return void(idx,{b,rawequal,cls;collectgarbage},assert,tmpname)end return b end,function(idx,assert)local tmpname=m(assert)local b=function(b,rawequal,cls,collectgarbage,flush,Factory)return void(idx,{b;rawequal,cls,collectgarbage,flush,Factory},assert,tmpname)end return b end,function(idx,assert)local tmpname=m(assert)local b=function(b)return void(idx,{b},assert,tmpname)end return b end,function(idx,assert)local tmpname=m(assert)local b=function(b,rawequal,cls,collectgarbage,flush)return void(idx,{b,rawequal,cls;collectgarbage,flush},assert,tmpname)end return b end,(-563806-(-1591295-(664853+-1406804)))-285538,function(idx,assert)local tmpname=m(assert)local b=function(...)return void(idx,{...},assert,tmpname)end return b end,function(idx)size[idx]=size[idx]-(22017-22016)if-331577+331577==size[idx]then size[idx],gmatch[idx]=nil,nil end end,{},{},function(void,cls,collectgarbage,flush)local tostring={}local getuservalue,c,include,os,m,ipairs,const,key,short,float,arr,value,imports,hooks,length,resume,tonumber,export,gethook,setvbuf,size,int,data,read,string,isLinux,hasnext,code,byte,next,double,increment,setupvalue,new,require,count,xpcall,exports,upvaluejoin,hookfunction,roblox,print,remove,io,bool,loader,delete,getlocal,i,isWindows,j,oldpath,index,rawget,loadlib,package,packages,unsigned,seek,object,readlines,loadfile,raise,lines,getupvalue,wrap,program,gsub,write,searchpath,setlocal,status,loadstring,upvalueid,factory,tmpfile,apply,open,path,close,newpath,gfind,parse,dofile,array,create,module,char,obj,load,dir,error,getinfo,rawset,signed,rawnew,type,randomseed,a,rawlen while void do if void<(993606+-828801)+8226308 then if void<-695574+4658366 then if void<3216461-892652 then if void<-78200+876083 then if void<4937+460314 then if void<(1223857-118260)-852252 then if void<-570651-(-721745)then if void<295434+-197716 then if void<-830704-(-872167)then size=gmod()value=assert[idx(b((426250+-1418042)-(-962350)),17782466590676-(-114449))]void=math(-969062+16411291,{})tmpname[value]=void value=assert[idx(b(-528839-(-43245+-457554)),9700509641978-597986)]void={}gmatch[size]=void m=false void=gmatch[size]void[value]=m void=gmatch[size]value=assert[idx(b((1092274-300145)+-821629),((-1622061-(-108792+-727115))-(981932-789549))+13134092621446)]m=assert[idx(b(972947+-1001176),930096+193297291528)]void[value]=m m=true void=gmatch[size]value=assert[idx(b(((263686-(-294995))-(-191838))-779462),-698090+29277037389497)]void[value]=m value=assert[idx(b(-153334+125446),27785049465644-(-135706))]void=tmpname[value]m=void void=not m void=void and(-793524-193943)+10183067 or 4205770-(-351307)else value=assert[idx(b(467667-496890),16747438330885-(783784+-1494672))]void=tmpname[value]size=number((356042-(-221444))+15704042,{collectgarbage[-11813-(-966799-(-954985))],collectgarbage[882863+(-1829697-(-946836))];collectgarbage[493555-493552];collectgarbage[-818451-(257358+((-298515+(54829+((535945+-1548588)-(1025521+-1732530))))-526493))];collectgarbage[-32646+32651]})value=void()void=value(size)value={}void=tmpname[assert[idx(b(-811969-((-199541-(292601+((-515438-(-230541))+475707)))-100539)),493107302953-(-108077))]]end else void=path index=count void=count and((449538+-1370522)+1502109)+4087369 or 311653+6189546 end else if void<-186255-(-406943)then if void<-737127-(-924747)then value=assert[idx(b(582764-610750),26117248193376-(-1006167))]void=tmpname[value]void=void and 5299910-191348 or 420949+11706029 else value=assert[idx(b(648415-677516),427291+23438512000802)]void=tmpname[value]size=readline(-944165+10056857,{collectgarbage[((252918+637589)-25772)+-864734]})value=void()void=value(size)void=tmpname[assert[idx(b(219104-247164),-335920+19912840389147)]]value={}end else io=type==rawlen searchpath=void path=void void=io and 6811664-(968940-576295)or-805953+918378 count=io end end else if void<-3215-(-421943)then if void<-504000-(-903893)then if void<(-67962-715544)+1072781 then void=value and(1006230+11854913)-(-875056)or-659507+4164910 else size=gmod()gmatch[size]=cls[-858540-(-858541)]value=assert[idx(b(894573+-922735),31735693838565-(734450+-1241834))]void=tmpname[value]value=void()m=_G((-436442+32254)+9739632,{size;collectgarbage[458149-458148];collectgarbage[133055+-133053];collectgarbage[117812+-117809];collectgarbage[(-185479+-590957)+(567308-(-209132))],collectgarbage[-292834-(-292839)];collectgarbage[66269-66263],collectgarbage[-60743+60750];collectgarbage[495201-(30098-(-465095))],collectgarbage[-960890+960899]})void=value(m)void=tmpname[assert[idx(b(219552-(-220721-(-468858))),-630510+33034362622851)]]value={}size=class(size)end else size=iterator(-872171+15474041,{collectgarbage[((1286058-931859)-(-191570))-545768]})value=assert[idx(b(514478+-543194),(-1127068-(-95325))+8322233077596)]void=tmpname[value]value=void()void=value(size)value={}void=tmpname[assert[idx(b(-774646-(1001357+-1748037)),296316+18266024166404)]]end else if void<-238683+691722 then void=nil m=assert[idx(b((-2076028-((((-1371029-(-973232))-(-161719))+((-120914-830306)+-177026))-(583808-902148)))-(-1000724)),(9775791262084-409894)-(((-1495303-(-974696-(-643576)))-(-436866))+-95492))]size=void void=tmpname[m]newpath=gmatch[collectgarbage[326126+(817749+(-1944005-(-800131)))]]short={void(newpath)}wrap=short[257360+-257358]void=15443102-(-801503)m=short[-513524-(-513525)]rawlen=short[397274-397271]else wrap=gmatch[collectgarbage[-475568+475569]]rawlen=assert[idx(b((-67758+-443708)+482058),7786891028429-(-373193))]m=wrap[rawlen]short=assert[idx(b(((1067133-928065)-(-671088))-839314),30761535835581-100575)]newpath=tmpname[short]short=assert[idx(b((-144264-422914)+539211),(22377336453203-202125)-(162974+668320))]rawlen=newpath[short]newpath=assert[idx(b(-507278+478622),944776+21564558134137)]wrap=rawlen[newpath]size=m==wrap value=size void=2294279-(545434+(-11619-(-378794)))end end end else if void<-466791+1033754 then if void<4592+502662 then if void<-876950+1363661 then if void<(-799380-(-267453))-(-1205159-(-205035))then value=gmatch[collectgarbage[156039+-156038]]rawlen=assert[idx(b(648529-676823),-80237+20776708694951)]void=value[rawlen]value={void}void=tmpname[assert[idx(b(831586+-859883),16634700258782-865301)]]else void=gmatch[collectgarbage[(353506+-266442)-(-453683-(-540746))]]value=assert[idx(b(-201155+172944),(((1013709+-190249)+13079694209389)-767186)-(-513597))]size=assert[idx(b(533872-562641),-286063+12916357968713)]value=void[value]value=value(void)value=tmpname[size]size=assert[idx(b(593797-621684),(-853546+21598117062959)-(-581299))]void=value[size]size=gmatch[collectgarbage[(-463667-(-477718))+-14049]]value=void(size)void=tmpname[assert[idx(b(889744+(92154+-1011120)),25865832148939-226813)]]value={}end else size=assert[idx(b(-634183-(-605020)),(441335+13160865311913)-924452)]m=true value=tmpname[size]size=assert[idx(b(766553-(223176-(-573002))),29308954943156-684727)]void=value[size]size=.7 value=void(size)void=gmatch[collectgarbage[-466158-(-466159)]]size=true value=assert[idx(b(778929+((-674408+683443)-816672)),((33510342300599-(-893138))-721318)-471198)]void[value]=size size=assert[idx(b(331347-(969850+-608950)),-239152+34077281051200)]void=gmatch[collectgarbage[-957603+(53621-(476618+-1380602))]]value=void(size,m)void=tmpname[assert[idx(b(-35333-(-6862)),-534989+11690193723211)]]value={}end else if void<-355060-(-885700)then upvaluejoin=assert[idx(b(-1026709+997745),958329+16921969229466)]signed=gmod()newpath=nil seek=-570347.0-(-570971)bool=assert[idx(b((369546+-29907)+(-67220-301228)),947164+25658597374282)]gmatch[signed]=newpath print=math(((507090+-233470)-(-36108))+14977705,{signed})newpath=tmpname[bool]a=-368971-(151434+-520405)bool=newpath(print)print=assert[idx(b(486435-514370),(-788395+(-641214+15477033070062))-(-266137))]bool=tmpname[print]unsigned=-827812-(-827712)print=assert[idx(b(-64151-(-35880)),-611932+((-160505+6806983021063)-(371553+-138864)))]newpath=bool[print]print=assert[idx(b(-875519+847301),339767+6660463438943)]bool=newpath(print)remove=assert[idx(b(530498+-559025),-407769+24692775655114)]newpath=gmod()print=assert[idx(b(-235072+206345),((519527+-1458825)-(485772+-717251))+1549117810833)]setupvalue=assert[idx(b(387646-416974),13974698448451-(-92369))]gmatch[newpath]=bool bool=gmatch[newpath]factory=assert[idx(b(((-717014+-838138)-(-669111))-(-856516)),17849289849221-814245)]oldpath=tmpname[remove]remove=oldpath()bool[print]=remove bool=gmatch[newpath]print=assert[idx(b(960669+-989500),1004384+((((-1346175-(-898590))+(450910+-1168825))-(-276435))+22193124753214))]oldpath=true bool[print]=oldpath oldpath=rawlen bool=gmatch[newpath]print=assert[idx(b(-397427-(-369442)),(17388324176141-(-1038715))-(-873055))]length=assert[idx(b(-168880+140383),9277146025837-((-287501-(-529406))+-217431))]hookfunction=-656928-(-656928)upvalueid=assert[idx(b((30251-(-378583+1095634))+658605),32282263560918-75264)]bool[print]=oldpath print=assert[idx(b((490269+(-700630-(-909961)))-728161),22270822613510-997851)]bool=gmatch[newpath]oldpath=-449527-(-450039)bool[print]=oldpath oldpath=assert[idx(b(-1036166-(-1006810)),(80602+15556897623375)-546288)]print=tmpname[oldpath]oldpath=assert[idx(b(832879+-862292),((1093022-949878)+813444)+32928661103513)]gsub=-187670+187686 bool=print[oldpath]oldpath=assert[idx(b((1114110-(-280784+795944))-627370),-253280+13273072681236)]print=bool(oldpath)oldpath=assert[idx(b(111476-141140),864259+10634448190561)]bool=gmod()gmatch[bool]=print print=gmatch[bool]type=tmpname[upvalueid]ipairs=(-1075806-(-764626))+311144 apply=-51762.0-(-700443+648291)upvalueid=assert[idx(b((-1732993-(-922042))+782177),-673635+8546225320170)]remove=type[upvalueid]upvalueid=(1632990-1011608)-621382 type=remove(upvalueid,seek,a,apply)seek=814859+-815171.0 upvalueid=assert[idx(b(845144-873559),3592136204960-(-659540+68842))]isLinux=assert[idx(b(-203652+174857),(-494718+(251839+22311652616641))-(-1160896-(-901065)))]a=-863844+863844.5 apply=-408294+408099.0 print[oldpath]=type oldpath=assert[idx(b(-193102+163865),-194432+3930559346060)]status=assert[idx(b(-844008+815297),29465158812422-(-70571))]print=gmatch[bool]type=tmpname[upvalueid]upvalueid=assert[idx(b(942860+-970800),(674739+-937877)+(21446226551101-(-875686)))]remove=type[upvalueid]upvalueid=-720334+720334.5 searchpath=assert[idx(b(-858225+(56761+771914)),9401691817974-(-547417))]type=remove(upvalueid,seek,a,apply)a=-123089+123119 upvalueid=assert[idx(b(-328372-(-300036)),12470176156250-(-1223433-(-617207)))]print[oldpath]=type oldpath=assert[idx(b(360260-389093),-1043090+33339234011488)]print=gmatch[bool]type=tmpname[upvalueid]upvalueid=assert[idx(b(-347660-(-318364)),((-1541242-(-748953))+((-70842-(-8082))+430746))+12349001723246)]remove=type[upvalueid]seek=157778+-157748 upvalueid=-688493-(-688523)type=remove(upvalueid,seek,a)print[oldpath]=type readlines=assert[idx(b(284047-312540),30964607662923-918302)]type=assert[idx(b(404351-(-379808-(-813423))),-960509+31472941198479)]print=gmatch[bool]seek=assert[idx(b(-620827-(-591903)),17998178266079-(-966282))]oldpath=assert[idx(b(901928-930739),-964675+30303848251595)]remove=tmpname[type]type=remove()getinfo=assert[idx(b((471911-24557)+-476072),(130805-(-597704))+(29231327210247-(-1508319-(-773141))))]export=-749565-(-749581)print[oldpath]=type a=-621589-(-494343+-127246)print=gmatch[bool]oldpath=assert[idx(b((574466-((1842433-685104)-883420))-328870),(-809792-(-530028))+6368220945997)]remove=gmatch[newpath]print[oldpath]=remove remove=assert[idx(b(117256+-146587),22262734411757-(-328675))]oldpath=tmpname[remove]remove=assert[idx(b(709805-738051),8059472525835-(-1739382-(-824222)))]print=oldpath[remove]remove=assert[idx(b((-254666+1028014)-801595),(-969999+11871973742524)-(-760801))]char=-569136-(-569152)oldpath=print(remove)print=gmod()apply=(36663-(-69779))-(764646-(256109+402096))gmatch[print]=oldpath remove=assert[idx(b(699330+-728798),32267960110323-(-610355))]oldpath=gmatch[print]upvalueid=tmpname[seek]seek=assert[idx(b(-611256-(-583042)),21972014963259-((-326939-(-72090))-(-958433)))]type=upvalueid[seek]seek=532286+-532285 upvalueid=type(seek,a,apply,hookfunction)oldpath[remove]=upvalueid hookfunction=-274971-(-274971)seek=assert[idx(b(((((-595839+-238415)+((328827+(809058-(-847170)))-370677))+-771497)+27300)+-64563),7360076686413-265507)]remove=assert[idx(b(-333113-(-305125)),(-886196+790417)+9716687324508)]oldpath=gmatch[print]upvalueid=tmpname[seek]apply=122023+-122023 seek=assert[idx(b(805701-834626),22350067963174-916139)]type=upvalueid[seek]seek=-594096-(-594096)a=-839532+(272307+567225)upvalueid=type(seek,a,apply,hookfunction)oldpath[remove]=upvalueid remove=assert[idx(b(701603-729616),104025+14092533977939)]type=-429952+429953 oldpath=gmatch[print]oldpath[remove]=type oldpath=gmatch[print]type=true remove=assert[idx(b(207066+(-608489-(-327914+-45473))),(315975-970899)+17067223026581)]oldpath[remove]=type oldpath=gmatch[print]remove=assert[idx(b(107655+(-62246-74379)),27924709254746-171790)]upvalueid=assert[idx(b(873285-901471),13530962974-(-101431))]type=tmpname[upvalueid]upvalueid=type()oldpath[remove]=upvalueid remove=assert[idx(b(-221058-(-191527)),11780804633058-480573)]oldpath=gmatch[print]type=gmatch[bool]oldpath[remove]=type remove=_G(13793367-699719,{print})rawget=-225511-(-225511)oldpath=gmod()gmatch[oldpath]=remove hasnext=assert[idx(b(199212-227881),278943+29903203087869)]type=gmod()remove={}gmatch[type]=remove a=assert[idx(b(855804+-883721),-576392+14181706731739)]upvalueid=_G(925119+(2094697-(-979891)),{newpath;oldpath,type})remove=gmod()gmatch[remove]=upvalueid seek=gmatch[size]upvalueid=seek[a]seek=gmod()a=assert[idx(b(384125+(-1087587-(-674690))),26697270226116-(-575764))]gmatch[seek]=upvalueid loadstring=assert[idx(b(922723-951774),((-791464+(-803913+1636331))+-81201)+16938798158627)]hookfunction=gmatch[seek]io=gmatch[signed]path=io[getinfo]io=assert[idx(b(-931096-(-902193)),(397486+8562808544104)-(567321-217443))]count=path..io index=searchpath..count apply=hookfunction..index hookfunction=assert[idx(b(590081+-619227),13830506568433-(-271275))]upvalueid=a..apply index=assert[idx(b((159516+(630200-(-887647+1277933)))+-427664),(-708464-(-999959))+8215996526397)]a=gmod()apply=assert[idx(b((155551-(-634085))+-817679),33868364761083-(-484403))]include=assert[idx(b(-355257-(-325642)),16432066099453-(((-864598+1618084)-(-164497))+-82446))]gmatch[a]=upvalueid path=26481+-26481 upvalueid=_G(2422110-(-262288),{remove,seek})tmpname[apply]=upvalueid apply=tmpname[hookfunction]hookfunction=assert[idx(b(-558849+530888),19281656252593-(976917+-2015376))]upvalueid=apply[hookfunction]count=assert[idx(b(-885547+856676),(13604+6215492883536)-513160)]hookfunction=assert[idx(b((-119212+1011562)+((701964+-756525)+(((451884+31616)+-351123)+(154885+-1154013)))),-775123+26597500479747)]apply=upvalueid(hookfunction)hookfunction=tmpname[index]index=assert[idx(b(-553347+524288),21261509718593-(524030+-1001760))]program=-340216-(-340217)upvalueid=hookfunction[index]index=assert[idx(b(721521-749922),790701+(-833185+5261742411652))]hookfunction=upvalueid(index)index=gmatch[bool]io=628104+(-1404157-(-776054))upvalueid=assert[idx(b(523602+(-340198-((466145-481005)+226789))),16252492562584-(-973987))]apply[upvalueid]=index index=-258029.0-(-258030)upvalueid=assert[idx(b(-620373-((-1002642+881074)+-470735)),34900127899944-(-385682+528300))]apply[upvalueid]=index upvalueid=assert[idx(b(-133352-(975889+-1081366)),29744741985337-(-696504))]index=283230+-283230 apply[upvalueid]=index getinfo=-969689-(-969689)getlocal=assert[idx(b(-1062513-(-1034315)),52248+22574819447457)]searchpath=tmpname[count]count=assert[idx(b(-844741-(-816355)),23278398315251-(62643-199414))]index=searchpath[count]upvalueid=assert[idx(b(-903862+(-760646+1635121)),23121652970333-(-81129))]count=920147+-920146 searchpath=index(count,path,io,getinfo)apply[upvalueid]=searchpath index=-684306-(-684306)upvalueid=assert[idx(b((-1525501-(-43640+(321901+-1271824)))+504044),3951291049864-(-623706))]apply[upvalueid]=index searchpath=assert[idx(b(709689-738787),(1007760-645156)+(380948+(-841336+14422594782115)))]upvalueid=assert[idx(b(-1040389+1012189),14974011732063-(-519000-(-600864)))]index=tmpname[searchpath]searchpath=index()index=apply apply[upvalueid]=searchpath upvalueid=assert[idx(b((882042-73514)+-837090),311575+10883107997076)]packages=assert[idx(b(453787+-481932),15422049652243-(-619045))]io=623519+-623518.5 hookfunction[upvalueid]=index count=assert[idx(b(169964+-199370),628135+12079813005182)]searchpath=tmpname[count]upvalueid=assert[idx(b(674832-(1480093-776900)),((-1657571-(-714300))+7572)+30870457273933)]count=assert[idx(b(-477663+(-390533+840031)),((98821+-1417463)-(-546832))+9338223539947)]path=(-319137-(-203306))+115831.5 index=searchpath[count]count=867767+-867766.5 require=assert[idx(b((1308785-303759)-1033125),11058157449568-(-591739))]searchpath=index(count,path)hookfunction[upvalueid]=searchpath upvalueid=assert[idx(b(974318-1003098),964421+(-482572+22597617257532))]index=-385275+385276.0 getinfo=-601892-(-601892)roblox=assert[idx(b(997055-1025145),637840+16671899104008)]count=assert[idx(b(851076-880560),757988+24963646262679)]hookfunction[upvalueid]=index upvalueid=assert[idx(b(468979-497361),431393+(26567367294736-(-484192)))]obj=assert[idx(b(-499221+471065),2449798965633-(-393211))]path=(90544-601812)+511268 index=379089-379089 hookfunction[upvalueid]=index create=assert[idx(b(-287700-(-259722)),21717173884337-576615)]searchpath=tmpname[count]upvalueid=assert[idx(b(-367605-(-339551)),24122049606800-(-191134))]count=assert[idx(b(((719587-689417)-827464)-(-768763)),(22854089405906-(-146585))-(324918+-616915))]index=searchpath[count]count=(-342467+291244)+(-87228.5-(-138452))searchpath=index(count,path,io,getinfo)count=assert[idx(b((((-1222604-(-600833))-(-958+-951339))-(-293246+67743))-585289),-191350+(-753630+23363814282302))]hookfunction[upvalueid]=searchpath upvalueid=assert[idx(b(((-241079+(1013264+-578110))+-1214011)-(-990784)),(-51833+14007714908940)-476126)]searchpath=tmpname[count]write=437833+-437818 tostring[-952685-(-952688)]=assert[idx(b(-176762-(-148388)),19512953187024-(-396513))]count=assert[idx(b(-528256+499400),-874148+34322067277499)]index=searchpath[count]getinfo=-568176-(-568223)path=(186387+-678516)-(-492176)count=-866599-(-866600)io=522402+-522401 searchpath=index(count,path,io,getinfo)count=assert[idx(b(22693-51959),(4090005328341-(-372783))-(-974439))]hookfunction[upvalueid]=searchpath upvalueid=assert[idx(b(624534-653924),-898435+1232309114473)]index=-604136-(-604136)hookfunction[upvalueid]=index upvalueid=assert[idx(b((-273413+-549131)-(-793265)),-998339+31369304296388)]index=assert[idx(b(-397945-(-369906)),246019+32455631625466)]hookfunction[upvalueid]=index upvalueid=assert[idx(b(-709763-(-680483)),-588610+16876814069028)]searchpath=tmpname[count]count=assert[idx(b(-621897-(-226492-(-644367+1010422))),-741480+29844341647819)]xpcall=assert[idx(b(-156212-(-128157)),(-393954+719128)+20484599187884)]arr=657885+(324211+-982054)path=1014750-(-580417+1595167)index=searchpath[count]count=871532+(-188342-683190)io=-472666-(-891257-(-418591))searchpath=index(count,path,io)loader=assert[idx(b(386953+-416318),740953+(10708476749115-(-937867)))]hookfunction[upvalueid]=searchpath upvalueid=assert[idx(b((109599-(-451681+156605))-((-990662+434457)-(-988984))),(-285435-151990)+17614151066632)]index=.8 path=assert[idx(b((391166+-218869)+-201624),((17399802673069-974136)-(-576586))-(-435411))]hookfunction[upvalueid]=index upvalueid=assert[idx(b(998727-1028250),365647+28389455673259)]count=tmpname[path]path=assert[idx(b(883909-912772),(403488+13450534597090)-175975)]searchpath=count[path]count=assert[idx(b(-389738-(-360327)),-652861+34935536656740)]path=-593802-(-593851)index=searchpath[count]getinfo=-968356-(-968806)hookfunction[upvalueid]=index count=assert[idx(b(180102-((1532596-1001843)+-321449)),-258576+22336718711370)]searchpath=tmpname[count]upvalueid=assert[idx(b(313227+(-421513-(-79463))),(658011+6886162976107)-993306)]count=assert[idx(b(884640-912581),27625826078899-(-644308))]io=970289-969839 index=searchpath[count]count=-922528-(-922577)searchpath=index(count,path,io,getinfo)hookfunction[upvalueid]=searchpath io=(106259-(-71416))+((-941183-(-334282))+429236)upvalueid=assert[idx(b(426257+-454974),-417711+28155643758078)]searchpath=assert[idx(b((-623059-(-797131))-202660),-799883+21290048453585)]index=tmpname[searchpath]searchpath=index()hookfunction[upvalueid]=searchpath searchpath=assert[idx(b(-451748-(-422097)),-693979+(622704836141-(-644546)))]index=tmpname[searchpath]load=-894267+894267 searchpath=assert[idx(b(-356117-(-327432)),757369+(31095268601495-847463))]upvalueid=index[searchpath]path=assert[idx(b(-722525+693711),32158531604622-854094)]searchpath=assert[idx(b((126116-290114)-(-134451)),(880029+-280203)+5200311020797)]index=upvalueid(searchpath)upvalueid=assert[idx(b(212594-(540954+(-335685+36358))),28736334141879-490388)]count=tmpname[path]path=assert[idx(b(-658397-(-628981)),(7961160709368-(-165697))-(-686992))]searchpath=count[path]path=-832275+832275 count=searchpath(path,io)index[upvalueid]=count upvalueid=assert[idx(b((916769+-814784)+(507251-637390)),33993037797046-264812)]count=assert[idx(b(630487-660129),-558210+31455920633649)]searchpath=tmpname[count]count=searchpath()index[upvalueid]=count io=assert[idx(b(-787336+758509),7555503351920-92920)]count=assert[idx(b(545194-573959),(22095590066351-(-548630))-(-73059+161561))]upvalueid=assert[idx(b(696118-725713),13996528222703-(209890-(-220677-(-1580))))]searchpath=gmatch[bool]index[upvalueid]=searchpath searchpath=tmpname[count]setvbuf=-29894-(-29894)count=assert[idx(b((-10059-(-764001))-782004),241516+(10945560345599-260570))]upvalueid=searchpath[count]getinfo=-862075-(-862025)count=assert[idx(b(-529824+501879),4668935223472-(-271774-(-232917)))]searchpath=upvalueid(count)upvalueid=assert[idx(b(-640707-(-611389)),(-37806-(-621592))+9445662137384)]path=tmpname[io]io=assert[idx(b(-310607+281115),1006798+31719230223931)]count=path[io]io=(-172429-(-429655))+-257225 path=count(io,getinfo,rawget,char)searchpath[upvalueid]=path io=assert[idx(b(-786852-(-757766)),(-593940-(-448305))+17361338475311)]path=tmpname[io]upvalueid=assert[idx(b(207462-236212),19795546993796-329899)]getinfo=-306374+306404 io=assert[idx(b(-323240+294235),-46674+30475171526483)]rawget=-1037269-(-1459761-(-422492))count=path[io]io=-503279-(-503279)char=(-1264656-(271681-930639))+605703 path=count(io,getinfo,rawget,char)searchpath[upvalueid]=path upvalueid=assert[idx(b(-98681-(-70753)),6101156353385-(-493664))]path=assert[idx(b(804061+-833429),26991452386153-484338)]count=-98798-(-703982+605183)searchpath[upvalueid]=count count=tmpname[path]upvalueid=assert[idx(b(571997-(636566-35177)),-46262+10377210905810)]path=count()rawget=(577392-311631)+-265557 searchpath[upvalueid]=path package=assert[idx(b(-124290-(-94615)),11700995590375-(-624380))]upvalueid=assert[idx(b(583151-611673),28430854735261-(-202711))]getinfo=-396470+396674 io=assert[idx(b(363328+-392886),(645793+17521524623084)-25118)]path=tmpname[io]io=assert[idx(b(-986772-(-958508)),372218+9009456588484)]count=path[io]io=591669-591465 path=count(io,getinfo,rawget)searchpath[upvalueid]=path upvalueid=assert[idx(b(908231-936204),-532055+15445782766275)]getinfo=assert[idx(b(-181387-(-152306)),265125+25467691436901)]io=tmpname[getinfo]getinfo=assert[idx(b(442714-472030),(917981-972513)+34924528827867)]path=io[getinfo]object=-611632+((1610287-641762)-356893)io=assert[idx(b((309562-(-666879))-1006042),6089174151011-(-960823))]count=path[io]searchpath[upvalueid]=count upvalueid=assert[idx(b(-106595-(-77832)),949463+19677938968209)]getinfo=assert[idx(b(974286-1003568),9103610287970-(-310389))]count=-577831+577847 searchpath[upvalueid]=count count=gmatch[seek]upvalueid=assert[idx(b(-96226+68317),-968+35010640776169)]searchpath[upvalueid]=count io=tmpname[getinfo]upvalueid=assert[idx(b(762594+-791866),255410+4978572304301)]getinfo=assert[idx(b((202186-(-711879))+-943298),32502607695381-206876)]path=io[getinfo]io=assert[idx(b(((-363416+-447233)-127241)+909526),15801754083812-(-357809))]count=path[io]searchpath[upvalueid]=count rawget=760988-(1612630-851658)getinfo=assert[idx(b(23885+(1009670+-1062141)),-612205+1825594623741)]path=assert[idx(b(-631629+(823471-(923815-702845))),23390346245848-(801740-50646))]count=gmatch[bool]char=-747473-(-309351-(769783+-331661))upvalueid=assert[idx(b(709326-737277),32094786273730-(-209687))]searchpath[upvalueid]=count count=tmpname[path]path=assert[idx(b(597889-626260),20664756706120-389056)]upvalueid=count[path]path=assert[idx(b(-812744+783963),(35096420099501-876272)-(-652783))]count=upvalueid(path)string=assert[idx(b(553494-582641),-989315+17332603109833)]upvalueid=assert[idx(b(942144-(449574-(-521044))),(10906613076122-(-960100))-(216582-(-119595+804588)))]io=tmpname[getinfo]getinfo=assert[idx(b(-237904-(-208301)),538157+201047027602)]path=io[getinfo]getinfo=437162-437162 io=path(getinfo,rawget,char,export)count[upvalueid]=io export=(-767354+139976)-(-627383)upvalueid=assert[idx(b(-818785-(-789241)),16864118359369-783285)]char=596519-596519 getinfo=assert[idx(b(-574988-(-546689)),532198+((22633169044381-(-1033442))-(-691013+-274464)))]io=tmpname[getinfo]getinfo=assert[idx(b(170132-199135),34787341237655-420465)]path=io[getinfo]rawget=-350547+350557 getinfo=208433+-208433 io=path(getinfo,rawget,char,export)count[upvalueid]=io io=assert[idx(b(-154612-(-126648)),992934+29458959584725)]path=tmpname[io]io=path()export=((-739923-318447)-(-477953))-((217343+-1384397)-(-586595))upvalueid=assert[idx(b(-513196-(-1460129-(-976412))),1208858440379-(-441079))]count[upvalueid]=io upvalueid=assert[idx(b((495501-(-36759-(-849707)))+288598),6839829026763-(-893700-(-128138)))]path=-11738-(390734+-402473)char=assert[idx(b(-444360-(-416129)),(22290280446702-(-88850))-888127)]count[upvalueid]=path path=assert[idx(b((-810922+283744)+498096),4713550836795-162033)]upvalueid=assert[idx(b(-315065+285559),4849460017402-338580)]count[upvalueid]=path path=-203219-(-203219)upvalueid=assert[idx(b(851947-880828),24046041487895-(-952880))]count[upvalueid]=path upvalueid=assert[idx(b(170116+(302354-(686943-(-113216-(-299360))))),450629+(-499138+13504148665975))]randomseed=assert[idx(b((401189+495970)+((598326-337264)+(-1353601-(-166364)))),389953+27661169748085)]path=gmatch[bool]count[upvalueid]=path io=assert[idx(b(653868-682561),21572322904182-(-876256))]path=tmpname[io]io=assert[idx(b((-212070+-845533)-(-1038085-(-8564))),(289518-940569)+6215395913630)]upvalueid=path[io]io=assert[idx(b((-869573+((110109-(-694996))+384611))-349586),-135775+10192523318504)]path=upvalueid(io)io=assert[idx(b(-1001440-(-972432)),30429033477538-1012866)]getupvalue=(797980-868378)-(-70398)upvalueid=gmod()gmatch[upvalueid]=path path=gmatch[upvalueid]rawget=tmpname[char]char=assert[idx(b(-41650+13185),(891044+(-1696384-(-982676)))+(-591899+782067417994))]parse=assert[idx(b(413573-443172),212997+(26055539892768-(-342197)))]getinfo=rawget[char]char=297593-297593 rawget=getinfo(char,export,load,arr)export=585552-585572 path[io]=rawget char=assert[idx(b((-48612-(487163-84224))-(-422357)),16373129320875-413657)]arr=298027+-297987 io=assert[idx(b(-189053+(-463888+623521)),349276831909-(-21842))]exports=assert[idx(b((-635299-(-477158))-(-129637)),25089806393298-52399)]path=gmatch[upvalueid]rawget=tmpname[char]char=assert[idx(b(-393030-(-364634)),(548734+(880603+20141923771251))-(341728-(-211639)))]load=643903-((475433-(-384648))-216178)getinfo=rawget[char]char=644322+-644321.5 rawget=getinfo(char,export,load,arr)path[io]=rawget io=assert[idx(b((1226194-511040)+-744580),-745220+412335387865)]path=gmatch[upvalueid]char=assert[idx(b(962387+-991191),7121804441784-138956)]load=184226+-184226 loadfile=assert[idx(b(864030+-892072),-462854+20260857616553)]rawget=tmpname[char]char=assert[idx(b(((-478892+-1448266)-(-924678))+(-200686+1174738)),-952709+12402573143469)]export=-649023+649023 next=assert[idx(b(173822+-202754),31021847598854-873149)]arr=394007+-394007 getinfo=rawget[char]char=(720351+-1090931)-(404697+-775277)rawget=getinfo(char,export,load)getinfo=.3 path[io]=rawget io=assert[idx(b(781611-(913843-103195)),((-386248+((1044977-719440)-484067))+27295396793187)-(-259725))]path=gmatch[upvalueid]path[io]=getinfo char=assert[idx(b((-585773+392449)-(-164769)),3347293752797-89748)]path=gmatch[upvalueid]io=assert[idx(b(-811332+783091),33396756954105-781637)]rawget=assert[idx(b(-620750-(-591481)),-152418+(120201+3692806736402))]getinfo=tmpname[rawget]load=(-546787-(-336136))-(-210652)rawget=getinfo()path[io]=rawget io=assert[idx(b(-1012985+984380),31146+17387027222314)]path=gmatch[upvalueid]getinfo=false path[io]=getinfo io=assert[idx(b(((-591373+1040990)-24082)+(373831+-828517)),9223444873301-(-613316))]path=gmatch[upvalueid]getinfo=1010835-1010835 path[io]=getinfo path=gmatch[upvalueid]io=assert[idx(b(77461+-106557),637561+13836506809990)]getinfo=true path[io]=getinfo path=gmatch[upvalueid]io=assert[idx(b(-589302+559641),929828+34808630107539)]getinfo=gmatch[newpath]path[io]=getinfo getinfo=assert[idx(b((-431970+-483680)+886094),24829855699389-(-221012))]io=tmpname[getinfo]getinfo=assert[idx(b(633929-663548),23359703302881-313574)]path=io[getinfo]getinfo=assert[idx(b((725383+-268229)-485621),415395+16122622357291)]io=path(getinfo)rawget=tmpname[char]path=assert[idx(b(-373660+((-379473-457287)+1180749)),18325540134011-(-458559))]char=assert[idx(b(511653+((-356002+-1179255)-(-994380))),31517101600500-(-37660))]getinfo=rawget[char]export=(652458+-816465)+164007 char=935193+-935192 rawget=getinfo(char,export,load,arr)char=assert[idx(b(839040-867228),-435876+28443443786819)]io[path]=rawget path=assert[idx(b(-247698+218970),6128524850531-(-754552))]rawget=tmpname[char]arr=-150997+(809333-658336)char=assert[idx(b(796691+-825207),(26669906413332-956867)-(-613023))]getinfo=rawget[char]export=(-1388503-(-795446))-(-1301924-(-240841+-468026))load=-577068+(1042718-465650)isWindows=assert[idx(b(((752654+-863354)+(-516552-(-343110)))+254465),12483375355322-(-677032))]char=270050+(-793566-(-615462+91946))rawget=getinfo(char,export,load,arr)char=assert[idx(b(563619+-592203),33183899274622-711783)]load=(788253+-1082458)-(-294205)io[path]=rawget path=assert[idx(b(-632836-(-604191)),26602129340374-420930)]rawget=tmpname[char]char=assert[idx(b(-991819-(-963460)),276116+5175892915201)]getinfo=rawget[char]export=-741377-(-741377)char=91504+-91504 rawget=getinfo(char,export,load)io[path]=rawget path=assert[idx(b(-405280+(1212952-836820)),(-501802+388507)+7169986709977)]export=assert[idx(b(-353507-(-324859)),416049+17184156406702)]getinfo=-553993+553994 io[path]=getinfo key=assert[idx(b(166395+((-631967-(-14019))+422854)),-258811+(27770692357074-351836))]rawget=assert[idx(b(-713152-(-684575)),29837483803088-((372554+-1041362)+465321))]path=assert[idx(b(18540+-47714),-782407+(714340812254-748930))]getinfo=tmpname[rawget]rawget=getinfo()io[path]=rawget getinfo=assert[idx(b(512698+-541381),31682085063535-643715)]path=assert[idx(b((865292-(143294-(-10088)))+-740086),25477568412114-459421)]io[path]=getinfo getinfo=true path=assert[idx(b(168101-196904),889434+(-746607+2179331554575))]io[path]=getinfo getinfo=(-607774+-184500)+(1568497-(1224528-448305))path=assert[idx(b((90863-(-657565))-(1579812-801732)),16365225578862-(-805832))]io[path]=getinfo load=(-866770+524755)-(-342015)path=assert[idx(b(-1021582-(-992488)),865092+27523835660636)]getinfo=false io[path]=getinfo getinfo=gmatch[upvalueid]imports=assert[idx(b(-659058+(874988+-243940)),374086+31623325475978)]path=assert[idx(b(449176-(614978-136582)),9158709603922-(-629756))]rawget=assert[idx(b(-1045946-(-1016280)),237279+9376168960170)]io[path]=getinfo getinfo=tmpname[rawget]rawget=assert[idx(b((523343-188489)+-364310),(621275+30128267682581)-578031)]gethook=assert[idx(b(-1016370+988487),658489+14776623425053)]path=getinfo[rawget]rawget=assert[idx(b(-829933+801085),620181+(41958+975808996585))]getinfo=path(rawget)path=assert[idx(b((-924411-(-315315))-(-579842)),1480+(115054+8940317569210))]char=tmpname[export]export=assert[idx(b(((-1211523-(-977062+(786503+-421364)))-(103412-4180))+(-774165+1444865)),10470412827115-(-268261))]rawget=char[export]export=-788199+788200 char=rawget(export,load)os=-373108-(446813+-819937)arr=(1002460+-1387429)+(1024864-639888)rawset=assert[idx(b((1629123-1047845)-609828),(31031100352722-(-923013))-749213)]getinfo[path]=char char=assert[idx(b(-128343+99473),335469+13776431154654)]path=assert[idx(b(423029-451612),14311613001450-865272)]rawget=tmpname[char]char=rawget()getinfo[path]=char rawget=gmatch[upvalueid]char=assert[idx(b(-276253+247402),5091241259601-1007502)]load=assert[idx(b(648528+(-1121954-(-445304))),-612058+25880098196074)]path=assert[idx(b(372809+(6806+-408372)),6248430485602-(-974795))]getinfo[path]=rawget rawget=tmpname[char]char=assert[idx(b(-395649-(-367101)),437003968152-360527)]path=rawget[char]char=assert[idx(b(-15807-13181),330160+19335009637207)]new=assert[idx(b(660109-689442),18793080683865-(-934400))]rawget=path(char)path=assert[idx(b(268420-((34804-(-264262))-2720)),26611201205093-(-481480))]export=tmpname[load]load=assert[idx(b(210267+-238597),717839+27918897894182)]char=export[load]load=1007028+-1007028 export=char(load,arr)rawget[path]=export path=assert[idx(b(542659-571972),26493376075935-(-303238))]load=assert[idx(b((-1241166-(-712247-334260))-(-165110)),(375594+-1004755)+13067172552169)]export=tmpname[load]arr=-299658+299665 load=assert[idx(b(-417468+388770),((28954-(-794449))+34177796280084)-590519)]char=export[load]load=614423+-614423 export=char(load,arr)rawget[path]=export resume=gmod()load=assert[idx(b(580335-609200),676808971579-(-449611))]export=tmpname[load]load=assert[idx(b(686724+-715436),-634103+23106864382240)]path=assert[idx(b(690753+-719702),(5384375704650-968299)-(-1018505))]char=export[load]load=1008630-1008630 int=assert[idx(b(47265-76242),602951+12992221694986)]arr=-324309-(-324316)export=char(load,arr)load=assert[idx(b(-335857-(-306669)),275078776915-89531)]rawget[path]=export export=tmpname[load]load=assert[idx(b(300640-328949),((34371352845156-581880)-(-192405))-645755)]arr=-47972-(-47979)char=export[load]path=assert[idx(b((-746307+-209753)-(-928178)),(-322387+9924842479728)-(166749-(-332495+(1298471-332749))))]load=-923996+923996 export=char(load,arr)rawget[path]=export char=gmatch[upvalueid]path=assert[idx(b(992447-1021554),2634433901654-(-237963))]rawget[path]=char export=assert[idx(b(940984+-969429),-663133+(560382+4861130903481))]char=tmpname[export]export=assert[idx(b((-673277-(-760302))-115331),411688+15434441998297)]path=char[export]export=assert[idx(b(160639-189228),29946077390997-(-224829))]char=path(export)path=gmod()gmatch[path]=char export=assert[idx(b(273021+-302378),341749+17185431068644)]char=gmatch[path]arr=tmpname[isLinux]isLinux=assert[idx(b((-427834-(-462203))-63018),(149183+(22832718303685-(-912569)))-(-585782))]load=arr[isLinux]isLinux=(153313+-343215)+189902 arr=load(isLinux,gsub,object,os)isLinux=assert[idx(b(-565028-(-536148)),(29122787590140-707885)-(-357452))]gsub=(1988020-1015553)-972493 char[export]=arr object=816010-816010 char=gmatch[path]arr=tmpname[isLinux]isLinux=assert[idx(b(-516839+488197),-664450+2541193959529)]load=arr[isLinux]export=assert[idx(b(1015692-1043600),-366657+27648927698004)]isLinux=434976-434975 os=-212913+212918 arr=load(isLinux,gsub,object,os)char[export]=arr char=gmatch[path]arr=assert[idx(b(-497881-(-469658)),((16425+157975)+((-643283+-308256)+540762))+30680250840779)]load=(647582+-617884)+-29697 export=assert[idx(b(-273828-(-588007+342778)),(166569+-919152)+3687195849025)]char[export]=load os=-420495-(-420496)char=gmatch[path]export=assert[idx(b(784656-812602),((983448+-768854)+-95762)+13808869798274)]load=tmpname[arr]arr=load()char[export]=arr export=assert[idx(b((249220-291757)+14441),512916+25219996631037)]char=gmatch[path]load=assert[idx(b(537586-(544582+(-908390-(-929792)))),4448+17841892635362)]char[export]=load char=gmatch[path]export=assert[idx(b((-128657+-132076)+231577),(6429625170221-(-176708))-472527)]object=95566+-95586 load=487543-487543 char[export]=load export=assert[idx(b(781818-(563799+246331)),749701+9143110151484)]char=gmatch[path]load=false char[export]=load char=gmatch[path]load=gmatch[bool]gfind=assert[idx(b(303027-332210),(326049+4047158057720)-704017)]export=assert[idx(b(-216036+187177),249363+24643350582275)]char[export]=load load=assert[idx(b(((-29356+-333433)+120598)+213401),1005038676598-(-700509))]export=tmpname[load]tostring[-133382+133384]=assert[idx(b(198026-226398),16434201231981-(-976057))]load=assert[idx(b(-1025352-(-997307)),-608281+18700411044769)]delete=assert[idx(b(262361-290366),-41832+14963939935839)]increment=assert[idx(b(-763265-(-733995)),194365+(28192467173971-(-556352)))]char=export[load]load=assert[idx(b(-651980+622689),151088531830-710236)]export=char(load)gsub=assert[idx(b(503880-(120438-((364+127197)-540190))),1033995+20702712641424)]load=assert[idx(b(951676-979944),21896937785965-(-1721054-(996148+-1717980)))]char=gmod()gmatch[char]=export export=gmatch[char]isLinux=tmpname[gsub]gsub=assert[idx(b(993415-(240082+781875)),(-445884+8826560270288)-(-465130))]arr=isLinux[gsub]gsub=(-843537+((1259300-414036)+(335472+321162)))-658360 isLinux=arr(gsub,object,os,unsigned)export[load]=isLinux os=-332852+332852 module=assert[idx(b(478793+-508081),4260322588529-(-853653))]load=assert[idx(b(((-736805+337381)-583177)+953718),-178796+11275320620326)]gsub=assert[idx(b(426856+-455836),(33591963921487-(1010593+(-857828+815503)))-300115)]object=278443+-278433 export=gmatch[char]isLinux=tmpname[gsub]gsub=assert[idx(b(440826+(-390584-(-370683+450608))),19984937105192-(-751586))]unsigned=14167-(238251-224134)arr=isLinux[gsub]gsub=(794276-464113)-330163 isLinux=arr(gsub,object,os,unsigned)gsub=assert[idx(b((639876+(-1524928-(-127357)))+(1371531-641920)),4513299534822-(((2227+75036)-19241)+-600218))]object=-691327+691364 export[load]=isLinux load=assert[idx(b(25418+-53635),22161617866135-(1013018+-1055335))]export=gmatch[char]isLinux=tmpname[gsub]gsub=assert[idx(b((193302+(568837+-1280321))-(-489029)),1029526+17685739785035)]os=879563-(90237-(-789288))arr=isLinux[gsub]gsub=406042-(((-452718-(-750675))-219877)+327925)isLinux=arr(gsub,object,os)export[load]=isLinux arr=(508030-(705864+212781))-(-410615)load=assert[idx(b(-154304+125427),(-430452+1103721)+8542053438664)]isLinux=assert[idx(b(-279192-(-249813)),13496449987645-(-972647))]export=gmatch[char]export[load]=arr export=gmatch[char]os=847858-847843 arr=-565297-((-445140+-516306)+(1358926-962783))load=assert[idx(b(359175+(-1326116-(-937474))),313221+14657401371823)]export[load]=arr load=assert[idx(b(-1039073+(1444118-433912)),-96009+(49119+2147196157870))]export=gmatch[char]arr=tmpname[isLinux]isLinux=arr()export[load]=isLinux export=gmatch[char]arr=gmatch[bool]load=assert[idx(b((196819-(1398836-((637239+(755385-(-42718)))-601401)))+338827),34403+(19771803471175-(-981397+1885953)))]object=assert[idx(b((-977064+4583)+943978),4483885050817-(-712482))]dir=assert[idx(b(-1044622+1015327),(27454+(143764+582754))+12622402299295)]export[load]=arr unsigned=255112-255112 arr=assert[idx(b((804668-485783)-348322),-205460+32391996191930)]load=tmpname[arr]arr=assert[idx(b((-1026404-(-606337))+392008),384405+10490086907257)]export=load[arr]arr=assert[idx(b((-113328+(530239+(933601+-1381013)))-(-1731)),(964843+-620796)+1646329051782)]load=export(arr)export=gmod()gmatch[export]=load load=gmatch[export]gsub=tmpname[object]arr=assert[idx(b(675113+-704741),-420106+18452637004733)]object=assert[idx(b(93813+-122099),25900842251382-((-403314+739203)+72643))]isLinux=gsub[object]object=120832+-120832 gsub=isLinux(object,os,unsigned,write)load[arr]=gsub write=-99475.5-(-99508)arr=assert[idx(b(-266755+(-480626-((-540995-(-760862))-938312))),27277748254727-945826)]object=assert[idx(b(-328798+300735),3323584236599-633839)]os=-629337+(-629476+1258785.5)load=gmatch[export]gsub=tmpname[object]object=assert[idx(b((-857512+872938)+-43365),-260620+29725810120023)]isLinux=gsub[object]unsigned=-660456+660456 object=-490658+490659 gsub=isLinux(object,os,unsigned,write)isLinux=-142049+142050 load[arr]=gsub byte=assert[idx(b(-757693+728321),15155974157089-(-430969+752194))]load=gmatch[export]arr=assert[idx(b((-843111-(-810488))-(-3726)),17520882958322-807306)]unsigned=403802+-403752 os=589392+-589342 object=assert[idx(b(341791-(473003+-102787)),(833576+33330970776073)-(-607679+(304483-(-279009))))]load[arr]=isLinux load=gmatch[export]gsub=tmpname[object]tostring[395843-(451757+-55918)]=assert[idx(b((-261626-(-260604+314132))+286472),-788735+4675233754835)]arr=assert[idx(b(137501+(208680+(-38100-(-695274-(-1643961-(-611434)))))),31799969232202-(-255462))]object=assert[idx(b((-135576+-382771)-(-706236-(-215880))),950947+19320731838147)]isLinux=gsub[object]object=-193506+193556 gsub=isLinux(object,os,unsigned)load[arr]=gsub isLinux=-805246-(-805246)object=assert[idx(b(360901+(776296+-1166201)),(27985340374278-532990)-(-431625))]load=gmatch[export]j=assert[idx(b(-890134-(-860485)),-385417+(-550712+22156164268013))]arr=assert[idx(b((-131740-(-79846))-(-23130)),8843229427654-(-318085))]os=-694944-(-999826+304882)load[arr]=isLinux arr=assert[idx(b(788770-817870),4963515980844-(-713698))]isLinux=false load=gmatch[export]load[arr]=isLinux load=gmatch[export]arr=assert[idx(b(444584+-472960),17340717280126-(-184360))]isLinux=assert[idx(b((772370+(62005-242484))-(349306-(-271224))),-450467+2665753796539)]load[arr]=isLinux arr=assert[idx(b(-44058+15523),12526849910444-(-966429))]load=gmatch[export]isLinux=gmatch[bool]load[arr]=isLinux isLinux=assert[idx(b((-121146+-666890)-(-758430)),-235527+(4650447177908-(-808460)))]arr=tmpname[isLinux]setlocal=assert[idx(b(251915+(-772220-(-1031401+540302))),-95764+32160057737574)]isLinux=assert[idx(b(340190-(-557517+925742)),3471597539085-(177891-310804))]load=arr[isLinux]isLinux=assert[idx(b((-1106148-(-432008))+645829),-850513+10311992928324)]arr=load(isLinux)load=assert[idx(b(-532735+504203),12723749533719-751568)]gsub=tmpname[object]lines=assert[idx(b(-871110-(-794430-47649)),-761210+34773317552626)]hooks=assert[idx(b(247143-276030),-514790+17897298734368)]object=assert[idx(b(-981473-(-952770)),8668317271937-(-502046-(-79163)))]isLinux=gsub[object]object=(-181789+(322624+780969))-(142553+779250)gsub=isLinux(object,os)arr[load]=gsub isLinux=gmatch[export]load=assert[idx(b(-888557-(-860284)),-955706+2882301430728)]arr[load]=isLinux gsub=assert[idx(b((560723+-525873)-(392415-328517)),14304942743952-(-641135))]isLinux=tmpname[gsub]gsub=assert[idx(b((-777390+1205502)+(-698081-(-241739))),(406253+16008919036209)-726060)]load=isLinux[gsub]gsub=assert[idx(b(703577-732838),6539456195830-(-475667))]isLinux=load(gsub)unsigned=assert[idx(b(-1044068+(567255+447606)),-80493+21181690302295)]error=assert[idx(b((-370785+(-407728-154368))+903265),28091113637309-(-54078))]load=gmod()close=-108595+108595 gmatch[load]=isLinux gsub=assert[idx(b(708420-736686),350390+(17845899683049-(-71181)))]isLinux=gmatch[load]os=tmpname[unsigned]unsigned=assert[idx(b(652966-681485),-822427+5598104877300)]write=465739+(-702995-(-237286))object=os[unsigned]unsigned=976284-976284 os=object(unsigned,write,program,close)isLinux[gsub]=os unsigned=assert[idx(b(-772895+744332),19027517362390-173106)]gsub=assert[idx(b(-856099+826784),28532488974293-33210)]isLinux=gmatch[load]program=((919816+-859080)+415559)+-476295 os=tmpname[unsigned]unsigned=assert[idx(b((397069-(-430463))-(-149808+1006148)),(-228442+1091870)+7444470999209)]close=540274+-540274 object=os[unsigned]unsigned=-65298+65298 write=444390+-444390 os=object(unsigned,write,program,close)isLinux[gsub]=os object=-202925-(-202926)gsub=assert[idx(b(-437732-(-409223)),12433329441539-626635)]isLinux=gmatch[load]isLinux[gsub]=object isLinux=gmatch[load]gsub=assert[idx(b(531701-559993),-667418+(10094340975747-(-965282)))]unsigned=assert[idx(b((150953-1010914)+(137133+694358)),14936959339101-(-750710))]os=tmpname[unsigned]unsigned=assert[idx(b(-121836+(-6808-(886457-(-817819+1803346)))),-400514+23275017200658)]object=os[unsigned]unsigned=97533+-97433 write=(95024+-910731)+815807 program=369584+-369484 os=object(unsigned,write,program)isLinux[gsub]=os write=assert[idx(b((-772889-102406)+846323),-182116+(31743503399597-(-503706)))]isLinux=gmatch[load]unsigned=tmpname[write]gsub=assert[idx(b(391842+-420483),34166877866430-(-478546-(-297928)))]code=assert[idx(b(469338+(-140945+-356807)),(252947+232099)+24187170506224)]write=assert[idx(b(35142-64125),250135+23548465137278)]os=unsigned[write]unsigned=assert[idx(b(292357+-320770),134806+32866593391306)]object=os[unsigned]isLinux[gsub]=object object=((-961506+1009551)-299689)+251658 isLinux=gmatch[load]gsub=assert[idx(b(-591143-(-562319)),555877+14569017475758)]write=assert[idx(b(747088+(-1327196-(((1645268-948331)-287720)+-961018))),-933379+30257482966143)]isLinux[gsub]=object object=assert[idx(b(922053-(211925-(-739073))),(9377124042988-(-770018))-(-230645+623555))]isLinux=gmatch[load]gsub=assert[idx(b((1335985-446846)+-917949),667563+20467202914265)]isLinux[gsub]=object gsub=assert[idx(b((-761170+1144203)+-411246),19827018861543-(948073+-1743368))]isLinux=gmatch[load]unsigned=tmpname[write]write=assert[idx(b(-359476-(-330981)),126473+23036163377028)]os=unsigned[write]loadlib=assert[idx(b(844555-872911),261191+25891039063687)]read=assert[idx(b(512921+-542375),21099508838886-80526)]write=assert[idx(b(398980+(493506+-921772)),649139+5268843264309)]close=((-1044420-(-613058-21067))-(-332486))+77810 unsigned=assert[idx(b(-211744+183333),551936+21374233812770)]object=os[unsigned]isLinux[gsub]=object isLinux=gmatch[load]gsub=assert[idx(b(604952+-633562),10543340870675-(-181407))]unsigned=tmpname[write]write=assert[idx(b(-468561+440378),((17327782035576-21860)-904641)-866704)]os=unsigned[write]unsigned=assert[idx(b(578817+-607480),828863+22690825021346)]object=os[unsigned]isLinux[gsub]=object gsub=assert[idx(b(((-818724+-570485)-(-439101))-(-374171+-547516)),11325129736784-464103)]isLinux=gmatch[load]object=gmatch[char]isLinux[gsub]=object os=assert[idx(b(-713714-(-861735-(-176686))),23069623379777-971089)]i=assert[idx(b((304285+1625)+-334099),(341355+30597063502948)-431476)]isLinux=gmatch[load]gsub=assert[idx(b(433048-461960),22358289519827-817402)]object=tmpname[os]os=object()write=assert[idx(b((949083+(-863039-(-585134)))-(-352489+(951219-(-101934)))),9681529635411-(-484434))]object=assert[idx(b((-939528+397699)-(-513528)),19126632393705-375010)]program=-976817+976781 isLinux[gsub]=os gsub=tmpname[object]object=assert[idx(b((-1239175-(-627615))-(-582045)),21140303493289-(-872532))]isLinux=gsub[object]object=assert[idx(b(-752194-(-724263)),944348+1925624498938)]gsub=isLinux(object)isLinux=gmod()gmatch[isLinux]=gsub object=assert[idx(b(-572174-(-544273)),(-329137+32376801109678)-(-356421))]gsub=gmatch[isLinux]unsigned=tmpname[write]write=assert[idx(b((-484563+(529401-822492))+((-1036043-(-786524))-((-795579-(667416+-1126062))+(-627200-34592)))),-173986+31889394213335)]os=unsigned[write]write=-871413+871414 unsigned=os(write,program,close,setvbuf)gsub[object]=unsigned object=assert[idx(b(733482+-762000),397998+(32291752664578-(956262-742119)))]write=assert[idx(b(1014930-1043500),18369748706727-(-295927))]gsub=gmatch[isLinux]setvbuf=303457-303457 unsigned=tmpname[write]write=assert[idx(b(1004796+-1032868),23370378356391-264123)]os=unsigned[write]write=-54397-(-54397)close=851343-851343 program=-1002940+1002970 unsigned=os(write,program,close,setvbuf)os=((835047+-1448678)+1124140)+-510508 gsub[object]=unsigned write=assert[idx(b(566675-(562399+33101)),32891066752392-820889)]gsub=gmatch[isLinux]object=assert[idx(b((-744900-(-593075))-(-122622)),3797805676052-810138)]gsub[object]=os close=-827701-(-944162-((462102+-135678)+-442681))object=assert[idx(b(-922399+894523),(-866+599767)+31187760267489)]float=gmod()gsub=gmatch[isLinux]unsigned=tmpname[write]program=(399322-(-266383))-665501 write=assert[idx(b(842542-870679),(-632999+438559)+3954490273483)]os=unsigned[write]write=-380916+381120 unsigned=os(write,program,close)gsub[object]=unsigned gsub=gmatch[isLinux]object=assert[idx(b(((225638+-11489)-(-651526))+-893703),18798913334723-(-114782))]program=assert[idx(b(234590+-262810),9302191979155-580382)]write=tmpname[program]program=assert[idx(b(-209209-(-180505)),28292646804620-658126)]unsigned=write[program]write=assert[idx(b(832266-(1883942-1023414)),128323+26911978476421)]os=unsigned[write]gsub[object]=os gsub=gmatch[isLinux]os=200373-200359 object=assert[idx(b(-908758-(-953333+73852)),16304663737204-599835)]gsub[object]=os os=true object=assert[idx(b(-245973+216549),8417617267062-(-84892))]gsub=gmatch[isLinux]gsub[object]=os object=assert[idx(b(216439-245993),24476280357156-437419)]os=false unsigned=assert[idx(b((-781473+(-136663+215328))+673968),(-676691+(-584004+2141790))+13077250075998)]program=assert[idx(b(((-782923+-203340)-(-2858))+955256),(((-675611+(-472339-(-132592)))+395448)+11052483482542)-240404)]gsub=gmatch[isLinux]gsub[object]=os object=assert[idx(b(((-1005883-(-1016322))-(1537447-771462))-(440867+(940841+(822562+-2930306)))),(-150793+4711488078701)-(117921+-128427))]gsub=gmatch[isLinux]os=tmpname[unsigned]unsigned=os()os=assert[idx(b(-834332-(-806356)),6313+30092532904565)]gsub[object]=unsigned gsub=gmatch[isLinux]object=assert[idx(b(247613-276448),410883+17833801497927)]gsub[object]=os gsub=gmatch[isLinux]raise=assert[idx(b(-624831-(-596822)),(-721965+-118167)+19093083307133)]object=assert[idx(b(-637601-(54511+(-51222-612212))),422228+19837034457153)]write=tmpname[program]program=assert[idx(b(-1064937-(-1035474)),9429658512874-(-760797))]unsigned=write[program]write=assert[idx(b(-268787-(27189-((378259+573500)+(-1344764-(-660552))))),-347367+25243752737148)]os=unsigned[write]program=assert[idx(b((-1333583-(-386604))+919052),(738977-1016534)+26598370174837)]gsub[object]=os gsub=gmatch[isLinux]object=assert[idx(b(-781412-(-752490)),7858894103054-997582)]os=gmatch[a]gsub[object]=os gsub=gmatch[isLinux]write=tmpname[program]object=assert[idx(b((-426231+-411442)+808087),136588+32376376255256)]program=assert[idx(b(-843498-(-1288395-(-444435-29897))),494182+21376833391247)]unsigned=write[program]write=assert[idx(b(-768220-(-738880)),21641207147419-207986)]os=unsigned[write]gsub[object]=os object=assert[idx(b(-95523+66047),287413+13842914449397)]program=assert[idx(b(592141+-620428),-998046+29499440666976)]gsub=gmatch[isLinux]write=tmpname[program]program=assert[idx(b(70025-99312),(-832996-(-299159))+24079972306301)]unsigned=write[program]open=assert[idx(b(-609820+580486),-936815+1645882615785)]write=assert[idx(b((752173+-1719922)+938383),260137+26879195423910)]program=gmod()os=unsigned[write]gsub[object]=os close=gmod()data=assert[idx(b(91573+-120193),20980869420544-(-45200))]object=assert[idx(b(333354-362250),(-1231073-(-434501))+7629800982145)]tonumber=assert[idx(b(-149278-(-119676)),714446+16025233311759)]gsub=gmatch[isLinux]os=true gsub[object]=os c=assert[idx(b(813383+-841973),755793+18788017040180)]gsub=gmatch[isLinux]object=assert[idx(b(-930813-(-901289)),(264916+(-962426+(1385394-514151)))+(-350104+1361020742128))]os=gmatch[char]setvbuf=gmod()gsub[object]=os object=gmod()unsigned=gmod()os=gmod()gsub={}gmatch[object]=gsub gsub={}gmatch[os]=gsub gsub={}gmatch[unsigned]=gsub gsub={}write=gmod()gmatch[write]=gsub gsub={}gmatch[program]=gsub gsub={}gmatch[close]=gsub gsub=818480+(226458-1044938)gmatch[setvbuf]=gsub gsub=(-362972-(604714-162774))+804912 gmatch[float]=gsub gsub={}gmatch[resume]=gsub gsub=readline(15754847-158578,{})tmpname[loadstring]=gsub loadstring=gmatch[resume]gsub=iterator((15005834-(-910445))-(-691821),{object,os,close;unsigned,write;program;setvbuf,resume})loadstring[read]=gsub loadstring=gmatch[resume]read=assert[idx(b(((-473831+(-376711-124785))+1906415)-959978),15348842730546-(-225841))]gsub=number(-143980+4638413,{float,bool;close;write,a,program;unsigned,setvbuf;resume,object;os})tmpfile=-328407-(738003+-1066411)loadstring[read]=gsub read=assert[idx(b(-1016413+((-973576+1237067)-(-63389+-661150))),4857969753221-(-434466))]gsub=yield(16484196-(-849697-(-806957)),{isLinux,write;setvbuf,object;bool;os;close})loadstring=gmatch[resume]loadstring[read]=gsub loadstring=gmatch[resume]read=assert[idx(b(-392602-((540218-678135)+-226322)),-126126+16753367251503)]gsub=loadstring[read]loadstring=gsub()read=assert[idx(b(-627927+599359),55761+24164680375361)]loadstring=gmatch[export]gsub=loadstring[read]loadstring=assert[idx(b(405356+-433565),25894680874513-(-665259))]read=yield(-326249+(-289735+1375346),{export})loadstring=gsub[loadstring]loadstring=loadstring(gsub,read)read=assert[idx(b((1023984+(-624733-529558))+101488),-641179+15356104380052)]loadstring=gmatch[export]gsub=loadstring[read]loadstring=assert[idx(b(202631-231671),190111+(((412000+(514478-659960))-(-250503))+699671521764))]loadstring=gsub[loadstring]read=math(407050+4746557,{export})loadstring=loadstring(gsub,read)read=assert[idx(b(571719+(-455952+(-834058+689074))),377876+3277018666724)]loadstring=gmatch[export]gsub=loadstring[read]loadstring=assert[idx(b(-81344-(-52936)),-550558+224990692435)]read=_G((-93087-(-1009713))+(597990+7768344),{resume})loadstring=gsub[loadstring]loadstring=loadstring(gsub,read)read=assert[idx(b((-763108-(-737847))-((-814555+1786469)-968271)),651560+30229440187071)]loadstring=tmpname[read]read=assert[idx(b(-299101-(146666-416555)),24230+32977737016054)]gsub=loadstring[read]read=assert[idx(b(((-390508+1060929)+200896)+-899981),493368+(((678469+-224986)+-1238405)+23475828584106))]loadstring=gsub(read)read=assert[idx(b(((583772+271312)+-15829)+-868678),14686797483880-(-168490))]gsub=gmod()rawnew=assert[idx(b(-198499+169477),21502425838718-(-385520))]array=assert[idx(b(-138211-(-109121)),21324075129467-300004)]gmatch[gsub]=loadstring loadstring=gmatch[gsub]const=tmpname[randomseed]randomseed=assert[idx(b(-892033-(-863055)),(1544841-((((-845593-(36498-((-795902-(-350444))+1294010)))-(-639988))-(-310022+48355))-(-555419+785617)))+17398698469537)]double=const[randomseed]randomseed=400121-400120 const=double(randomseed,ipairs,tmpfile,getupvalue)loadstring[read]=const loadstring=gmatch[gsub]getupvalue=655061-(308802+346259)read=assert[idx(b(262354-291723),33670849857275-1018412)]tmpfile=-912722+912722 randomseed=assert[idx(b(8341-(87321+-49872)),604758+2989611604700)]const=tmpname[randomseed]ipairs=-56502-(-56532)randomseed=assert[idx(b(77006-106156),(737696+-317282)+26605738314632)]double=const[randomseed]randomseed=-507893-(-507893)const=double(randomseed,ipairs,tmpfile,getupvalue)loadstring[read]=const read=assert[idx(b(-735400+707388),(24487503092054-(-608322))-(-969679))]const=assert[idx(b(-633125-(-135654-468475)),(896607+19827173643995)-(-884787))]tmpfile=-1029522-(-1029726)loadstring=gmatch[gsub]double=tmpname[const]const=double()double=735110+-735109 ipairs=assert[idx(b(1006736+-1036194),485557+8426994379966)]loadstring[read]=const loadstring=gmatch[gsub]read=assert[idx(b(-1056607-(-950237-77887)),-513154+11369573388337)]getuservalue=assert[idx(b(595158+-623901),19363402935094-(-597876))]loadstring[read]=double loadstring=gmatch[gsub]read=assert[idx(b(585022+-614619),881353+3188804084466)]randomseed=tmpname[ipairs]ipairs=assert[idx(b(286843-315208),29047000248375-626050)]const=randomseed[ipairs]randomseed=assert[idx(b((329374+296204)-654552),-51607+(684716+16123520722610))]double=const[randomseed]loadstring[read]=double read=assert[idx(b(923221+-951967),9310006262671-(-468978))]randomseed=assert[idx(b(238268-266807),(-855072+13414079618346)-(-435742))]loadstring=gmatch[gsub]const=tmpname[randomseed]ipairs=-494922-(516069+-1011195)getupvalue=assert[idx(b(173141-202582),4165049768760-192677)]randomseed=assert[idx(b(402374+(-902426+471544)),(141193+(-579058+31028092117239))-(-683737))]double=const[randomseed]randomseed=472145+-471941 const=double(randomseed,ipairs,tmpfile)loadstring[read]=const read=assert[idx(b(428886-457985),-469220+31518924999000)]ipairs=assert[idx(b((-748687+(958760+-304076))-(-66080)),11031+18808493003228)]loadstring=gmatch[gsub]randomseed=tmpname[ipairs]ipairs=assert[idx(b(1012390-1041250),-618393+35033225220362)]const=randomseed[ipairs]randomseed=assert[idx(b(-1065008-(-1789856-(986110+-1740520))),34604449131662-643849)]double=const[randomseed]loadstring[read]=double double=((-583395-(-832443))-(-600090))-849124 loadstring=gmatch[gsub]read=assert[idx(b((171244+35987)-(1235792-1000369)),4414885716765-(-88257))]loadstring[read]=double read=assert[idx(b(((-81501+((54375+1234778)-386264))+-1247660)-(-398087)),(297000-(-67047))+28516834248995)]loadstring=gmatch[gsub]double=true loadstring[read]=double double=true read=assert[idx(b((578256+-1386693)-(-778804)),813025+3286139487922)]loadstring=gmatch[gsub]loadstring[read]=double read=assert[idx(b(-390537-(-362416)),(27609036850559-(-218601))-(-150970))]ipairs=assert[idx(b((900935+(506239+-2436015))+999461),(34879227962020-(-954110))-573211)]loadstring=gmatch[gsub]double=false loadstring[read]=double double=assert[idx(b(-287886-((638707+-1478241)+579624)),211786+22276613632156)]loadstring=gmatch[gsub]read=assert[idx(b(-547277-(-518826)),12784232686210-(-1007890))]loadstring[read]=double read=assert[idx(b(184109-212302),-385773+4713627571393)]double=false loadstring=gmatch[gsub]loadstring[read]=double loadstring=gmatch[gsub]read=assert[idx(b(278441+-307114),606383+31976387905153)]randomseed=tmpname[ipairs]ipairs=assert[idx(b(670860-699300),(-517367+8972303208987)-(-72123))]const=randomseed[ipairs]ipairs=assert[idx(b(-852584+823767),22650+(34905904076363-(-824748+1520161)))]randomseed=assert[idx(b(730177-759144),24552260258600-(834393+-106882))]double=const[randomseed]loadstring[read]=double loadstring=gmatch[gsub]read=assert[idx(b(632693+-662333),-204881+(24008098827581-(-409797)))]tostring[(-118140+710175)+-592034]=assert[idx(b(-515423-(-487310)),24064755687109-430253)]randomseed=tmpname[ipairs]ipairs=assert[idx(b(926958+-956362),13443347413031-339905)]tmpfile=assert[idx(b(-26026+-3239),(448868-463756)+9986464808116)]const=randomseed[ipairs]randomseed=assert[idx(b((-994205-(-876331))+88376),-856093+34620270191843)]double=const[randomseed]loadstring[read]=double read=assert[idx(b(906113-934611),5354726092730-230682)]double=true loadstring=gmatch[gsub]loadstring[read]=double loadstring=gmatch[gsub]double=gmatch[char]randomseed=assert[idx(b((-624599+-146420)-(-741619)),26546400637922-(-579156))]ipairs=assert[idx(b(679875+-708874),(709434-(-243684))+16103544049279)]const={randomseed,ipairs;tmpfile;getupvalue;raise,isWindows;rawset,int;loadfile;next;loader;gfind,increment,require;loadlib,hasnext,create;setupvalue}getupvalue=assert[idx(b(-602464-(-573235)),-743022+(505768+11104070758646))]hasnext=assert[idx(b(-865987-(-1503937-(-665869))),16735132360770-(-41602))]next=assert[idx(b((-21503+747623)-754189),27218877030298-(-639153))]dofile=assert[idx(b(237199-(-284417-(-550871))),-399703+11061923530222)]gfind=assert[idx(b(-1036292-(-1184374-(-87727+-88675))),18283214446338-1025101)]read=assert[idx(b(-486364+458043),6375581776177-16729)]loadlib=assert[idx(b(157169-185459),((29683703616583-447725)-((-306437-362697)-(-793306)))-(-250508))]require=assert[idx(b(825160+-853267),(825860+26630898410228)-596308)]loadstring[read]=double randomseed=assert[idx(b(-241920-(-213694)),(805833+(2701283894037-734714))-33799)]raise=assert[idx(b(-923095+894733),(174846-(-373027))+3396129778033)]loadfile=assert[idx(b(-783525-(-755119)),619727+3899789449608)]increment=assert[idx(b((-414344-(-1033075))+-647517),-630008+(715799+((-525175+-4462)+2215554819478)))]tmpfile=assert[idx(b(887598-916083),33173024277350-1017427)]isWindows=assert[idx(b(456573+((-1032325+(654529+80918))+-189166)),5714988739436-(-623543+139548))]read=_G(9770004-((1077170-163095)+(((-831292-(-444614))+(1370955-993033))-600454)),{isLinux,char,load})create=assert[idx(b(-720864+692082),316228+(931362+(18480419577051-460029)))]setupvalue=assert[idx(b((328044+556212)+(-850956+-61477)),32975157142793-130360)]double=assert[idx(b(311681-339583),19752820414367-(-974615))]int=assert[idx(b((-473839+((1848504-840395)+-3525))-559403),-621292+(21924605285717-(-278320)))]loadstring=gmod()loader=assert[idx(b(-967426+(809093+129534)),1019817+28056797811123)]rawset=assert[idx(b(306376-335293),24888000446372-(-430572))]gmatch[loadstring]=read ipairs={tmpfile;getupvalue,raise,isWindows;rawset,int,loadfile,next,loader;gfind;increment;require;loadlib,hasnext,create;setupvalue,obj;include;dofile;readlines,dir;factory,byte,tonumber,error;upvaluejoin,c;package;status;hooks;j;module,gethook;exports;array,delete,getlocal;data,setlocal;xpcall,new;rawnew;parse,roblox,string;open,code,i;key,getuservalue,length,packages,lines;imports,tostring[-435926+435927];tostring[-594640+594642],tostring[(821912+-590388)+((-532130+875322)+-574713)];tostring[662166-662162]}obj=assert[idx(b(-57718+29647),614064+20921345470151)]tmpfile=assert[idx(b(-778460+749365),18444087338565-(-791919))]hasnext=assert[idx(b((-1092728-(-998169))-(-65825)),150926+4235115607253)]loadfile=assert[idx(b(-937521+908438),319413+21844646458923)]isWindows=assert[idx(b(264166-292440),(-500010+22819804827550)-(-303481))]dir=assert[idx(b(-810494+782065),34581716587000-(-863527))]tonumber=assert[idx(b(273436+-301924),(-749915+31717410088105)-301264)]factory=assert[idx(b(-276232-(-246831)),25051292807659-(-1809050-(-972875)))]setupvalue=assert[idx(b(-223474+(-23130-(-217460))),1669091342117-(-63456))]loader=assert[idx(b(-686076+658127),2469913898440-(-710039+1319972))]next=assert[idx(b(400887-((-725032+888356)+265808)),14556607242287-217713)]include=assert[idx(b(-890739-(-862397)),74573+21503400888790)]int=assert[idx(b(-458117-((-49118+447656)-((-452769+1044583)-(323753+-560115)))),29875159757511-(-788468))]byte=assert[idx(b(802969-831782),5222550991018-(-738536))]gfind=assert[idx(b(-201883+173808),361816+((358237-604044)+25055858799886))]require=assert[idx(b(-859172-(-831101)),3252017652154-(-672659+1343377))]raise=assert[idx(b((704132+-514084)-219510),(217785-602388)+20424830851483)]package=(947393+-829122)+(726648-844785)readlines=assert[idx(b((640510-855868)+187225),654986+7572743273560)]loadlib=assert[idx(b(-566835-(-537378)),543349+2981405336675)]rawset=assert[idx(b(-981349-(-952697)),-568875+14942720500428)]dofile=assert[idx(b((400785+441699)+-871652),((1612498-704001)+((108734+842889)+30114786538097))-(-568469))]create=assert[idx(b(894009-((340889-192102)-(-774338))),5423805254785-(-181189))]increment=assert[idx(b(-199972+171061),19993737829396-(-979708))]getupvalue={raise;isWindows;rawset,int;loadfile,next,loader;gfind;increment,require;loadlib,hasnext,create,setupvalue,obj,include;dofile,readlines;dir,factory;byte;tonumber}read={[double]=const,[randomseed]=ipairs,[tmpfile]=getupvalue}byte=860019-859827 raise=16691+-16523 loadfile=472626+-472414 const=assert[idx(b(-893717+864942),32610659905561-(39911-(-44639)))]include=((307326+(39396+360633))+(45840+-463932))-289043 tmpfile=assert[idx(b(-507971-(-478354)),(-442448+1121556)+21675605289887)]tonumber=-12012+12146 rawset=699640+-699426 ipairs=tmpname[tmpfile]loadlib=807864+-807744 isWindows=-1042896-(-1043052)next=979156-979022 create=(-101604+-473404)-(-143916-431177)tmpfile=assert[idx(b(-51405+22303),395602+18813989216989)]getupvalue=(757972+-1797726)+(-216723+1256683)randomseed=ipairs[tmpfile]error=-222034-(-222226)obj=975142-(908379+66549)readlines=834536-834316 tmpfile=(-1015807+1383635)-367647 ipairs=randomseed(tmpfile,getupvalue,raise)loader=-524984-(-525176)raise=assert[idx(b(-23133+-4997),-686649+30223407394135)]randomseed=assert[idx(b(-153987-(-125647)),854327+6255597360460)]getupvalue=tmpname[raise]raise=assert[idx(b(281290+-309944),27297046677434-583742)]dir=(572350+360272)-(250455-(-681997))tmpfile=getupvalue[raise]int=573906+(39329-613023)factory=-778218+778352 raise=(-391565+(-119311+889132))-378170 getupvalue=tmpfile(raise,isWindows,rawset)rawset=assert[idx(b((202516-(-244442+(480841+550034)))+554673),(-390608+1129069)+(232006+(9984195479748-(-318599))))]isWindows=tmpname[rawset]rawset=assert[idx(b((874475-650865)-251521),-958906+10040505784790)]tmpfile=assert[idx(b(((-677545-(-282823-532986))-(27204+-232100))+(2598-374876)),-31446+9113134859400)]raise=isWindows[rawset]hasnext=724597+-724444 rawset=389522+-389310 isWindows=raise(rawset,int,loadfile)raise=assert[idx(b(-29349+956),(511188+-626420)+15791071075196)]gfind=134509-134308 loadfile=assert[idx(b(-836335-(-414285-392705)),(-253956+2891086359107)-(-976160))]increment=35441-35265 int=tmpname[loadfile]loadfile=assert[idx(b(((-120539-198158)+834709)-544294),20360714722094-27726)]rawset=int[loadfile]require=-173566-(-512547+338836)loadfile=450392-450195 int=rawset(loadfile,next,loader)rawset=assert[idx(b(-898627-(-869128)),55609+(29020832444931-(-567510)))]loader=assert[idx(b((-458890+(1754389-(((-231165+760472)-(-190632))+277748)))-326977),911644+7205797373296)]next=tmpname[loader]loader=assert[idx(b(-801123+772089),33314621728454-813963)]loadfile=next[loader]loader=-205201-(-205279)dofile=(87237+309839)+-396906 next=loadfile(loader,gfind,increment)increment=assert[idx(b((628593+(280569-960373))+21814),-147776+17771656077315)]gfind=tmpname[increment]loadfile=assert[idx(b(430402-458373),-792999+(-388381+9408456140515))]increment=assert[idx(b(-997117+968251),((-995831+871582)+-649023)+35101536990362)]loader=gfind[increment]setupvalue=(-674265+1016251)-341830 increment=-955969+956175 gfind=loader(increment,require,loadlib)loader=assert[idx(b(-629677+601068),(3578112369537-102088)-145662)]upvaluejoin=-1024373+1024593 loadlib=assert[idx(b(468332+-496511),((-429326+(1830613-391410))+389211974031)-(-184109))]require=tmpname[loadlib]loadlib=assert[idx(b(506855-(882927+-347421)),32982855256804-202520)]increment=require[loadlib]loadlib=-444228-(-444334)require=increment(loadlib,hasnext,create)increment=assert[idx(b(-412351+382764),-787124+9766784556251)]create=assert[idx(b(280367+-309379),(47979-897186)+14314257337260)]hasnext=tmpname[create]create=assert[idx(b(538180+-567531),-864981+(496605+1517547486181))]loadlib=hasnext[create]create=529419-(842648+-313315)hasnext=loadlib(create,setupvalue,obj)loadlib=assert[idx(b(-858661+830361),-974614+15197319438158)]obj=assert[idx(b((312141-253952)+-87625),1014230+12930939706871)]status=788318+-788126 setupvalue=tmpname[obj]obj=assert[idx(b(69853-97855),19217221626698-362154)]create=setupvalue[obj]obj=1008793+(-1417702-(-409129))setupvalue=create(obj,include,dofile)create=assert[idx(b(-76552+47593),-46317+(19972106269534-((492943+181376)+220208)))]dofile=assert[idx(b(905618+-933655),18376647863826-(-219204))]include=tmpname[dofile]dofile=assert[idx(b(960447+-988896),-946970+(32928962029151-(-851668+194396)))]obj=include[dofile]dofile=918211-917991 include=obj(dofile,readlines,dir)dir=assert[idx(b((-507194+-55656)+533775),20400434136603-(-66611-242605))]obj=assert[idx(b(793682-823339),-654037+4874249543113)]readlines=tmpname[dir]dir=assert[idx(b(-65486+(-460671-(-496967))),(-217488+894003)+((116797-(-401469+(1110809-785963)))+29285177382761))]dofile=readlines[dir]c=537348-537094 dir=-796209+(10373-(-786033))readlines=dofile(dir,factory,byte)dofile=assert[idx(b((168673+380126)-578198),10443682184415-(-465605+-280511))]byte=assert[idx(b(132515-(396748+-235964)),17766513756031-(-1033870+(24245-(-942667))))]factory=tmpname[byte]byte=assert[idx(b(-809716+781640),33161392883879-(-426169))]dir=factory[byte]byte=142430-142233 factory=dir(byte,tonumber,error)dir=assert[idx(b((-874702-(-991073))-145989),34292966963434-(-609379))]error=assert[idx(b(589089+-617415),-986844+5553102374138)]tonumber=tmpname[error]error=assert[idx(b(186424+(342596-((58104+35729)-(-463568)))),-195123+1905228179660)]byte=tonumber[error]error=-952187-(-848719-103624)tonumber=byte(error,upvaluejoin,c)c=assert[idx(b((1228247-239147)+(-1981914-(-963846))),-586993+10293631668567)]upvaluejoin=tmpname[c]c=assert[idx(b(397747-426670),25582700981811-810603)]byte=assert[idx(b(240958+-269145),(106041708530-(-471648))-279806)]error=upvaluejoin[c]c=-147698-(-147895)upvaluejoin=error(c,package,status)double={[const]=ipairs,[randomseed]=getupvalue,[tmpfile]=isWindows;[raise]=int,[rawset]=next,[loadfile]=gfind;[loader]=require,[increment]=hasnext,[loadlib]=setupvalue;[create]=include;[obj]=readlines;[dofile]=factory;[dir]=tonumber;[byte]=upvaluejoin}getupvalue=assert[idx(b(-416633-(-388486)),-735859+11204221702309)]const=gmod()gmatch[const]=double double=readline(-1002958+12529696,{})isWindows=assert[idx(b((647037-598149)-76934),27702746048603-(652588+((292958+(-60341-587998))+-853003)))]require=(-178796+-242718)+421514 next=assert[idx(b(598681-627019),-299243+23682809041266)]raise=assert[idx(b(225167-254647),(351156+19269011301729)-479147)]int=assert[idx(b(-602815+574645),952766+6520884146452)]tmpfile=assert[idx(b(-81180+52754),25137380642417-(-293205))]loadlib=706186-706156 ipairs=read[tmpfile]randomseed=double(ipairs)ipairs=gmod()gmatch[ipairs]=randomseed tmpfile=read[getupvalue]randomseed=double(tmpfile)tmpfile=gmod()loader=(-232973-495851)-(-728830)gmatch[tmpfile]=randomseed getupvalue=read[raise]randomseed=double(getupvalue)getupvalue=gmod()gmatch[getupvalue]=randomseed raise=yield(884573+881465,{const,getupvalue,ipairs;tmpfile})gfind=assert[idx(b(598957+-627312),21254156980809-908369)]randomseed=gmod()gmatch[randomseed]=raise raise=onload((894970+(559228+-129716))-746545,{getupvalue,randomseed})rawset=assert[idx(b(129283+-158959),1833287439966-(-356025))]tmpname[isWindows]=raise raise=gmod()isWindows=readline(52057+7932758,{isLinux;gsub})gmatch[raise]=isWindows increment=-394192-(-394132)isWindows=gmatch[isLinux]rawset=isWindows[rawset]rawset=rawset(isWindows,int)int=math(9175470-(-52429),{write,setvbuf;isLinux,loadstring,raise})isWindows=assert[idx(b(-662854+633986),(791854-(-767706-(-640699)))+(-515475+33024745875857))]isWindows=rawset[isWindows]isWindows=isWindows(rawset,int)isWindows=gmatch[loadstring]rawset=isWindows()isWindows=gmatch[raise]int=assert[idx(b(390538+-418528),1597293564921-(126952-(-325727)))]rawset=isWindows()rawset=tmpname[int]int=assert[idx(b(1011037-1040399),21250339248928-616250)]isWindows=rawset[int]int=assert[idx(b((895985-(1218293-192603))-(-101733)),(1493328-(982706-477464))+9749930637191)]rawset=isWindows(int)loadfile=tmpname[next]isWindows=assert[idx(b(-721665-(-693682)),-117891+(18287040198861-(-356777)))]next=assert[idx(b((-1099250-(-876127))+193775),-604934+3881004576898)]int=loadfile[next]next=426073-(112197-(-313876))loadfile=int(next,loader)rawset[isWindows]=loadfile isWindows=assert[idx(b(-330568+301783),33270277119347-475249)]int=gmatch[char]rawset[isWindows]=int isWindows=assert[idx(b((-122480-606807)-(-700490)),29068479843412-69153)]loadfile=assert[idx(b((-209751+36757)+145110),31744863633009-590086)]int=tmpname[loadfile]loadfile=int()rawset[isWindows]=loadfile loadfile=assert[idx(b(-644744+616730),787980+33414451386242)]int=tmpname[loadfile]loadfile=assert[idx(b(335498+-363606),-526742+31812639199841)]isWindows=int[loadfile]loadfile=assert[idx(b(928322+((-202709-127362)-627711)),692943+30044608621196)]int=isWindows(loadfile)isWindows=gmod()gmatch[isWindows]=int loadfile=assert[idx(b(222281-250658),1694607546121-174653)]int=gmatch[isWindows]loader=tmpname[gfind]gfind=assert[idx(b(600475+-629864),(-733669+489739)+(222496+21259569243680))]next=loader[gfind]gfind=404214+-404213 loader=next(gfind,increment,require,loadlib)int[loadfile]=loader loadlib=932086+-932126 loadfile=assert[idx(b((761802+-1409277)-(-617903)),6211809247959-(752232+147369))]gfind=assert[idx(b(-707662+(-128979+(1042574-235373))),455974+4537514516432)]increment=734383+-734333 int=gmatch[isWindows]loader=tmpname[gfind]gfind=assert[idx(b(952831+-981928),28039262949555-(-980769))]next=loader[gfind]gfind=-178391+(-433468-(564992+-1176851))require=((1150503-847321)+-1117991)-(-851718+36908)loader=next(gfind,increment,require,loadlib)int[loadfile]=loader loadfile=assert[idx(b(854361+(-1732253-(-848827))),(27726164945688-216699)-438454)]int=gmatch[isWindows]gfind=assert[idx(b(231920+(827843+-1089421)),26240833475127-(-311390))]loader=tmpname[gfind]gfind=assert[idx(b(-52666+23832),10260822682230-926377)]next=loader[gfind]increment=609334+-609235 require=-1007723+1007879 gfind=852926-(-38166+((544813-(-351902))+((-433839-161612)-(-589814))))loader=next(gfind,increment,require)gfind=assert[idx(b(740240-768382),3156+12458124198201)]int[loadfile]=loader int=gmatch[isWindows]loader=tmpname[gfind]gfind=assert[idx(b((671382-586012)-114215),(-594045-437216)+25015777739712)]require=-230972-(-231227)loadfile=assert[idx(b((-1653995-(-867159))-(-757200)),264742+1980105120813)]increment=(-958584+1070524)+-111685 next=loader[gfind]gfind=90839-90584 loader=next(gfind,increment,require)int[loadfile]=loader loadfile=assert[idx(b(576588+-605642),(-274047-518465)+32198541429644)]int=gmatch[isWindows]require=540207+-540177 increment=assert[idx(b(-406055-(-376673)),304145+11388969666990)]gfind=tmpname[increment]increment=assert[idx(b(((-87541+-235706)+28193)-(-266007)),-386466+28096783033785)]loader=gfind[increment]gfind=assert[idx(b(352756+-381549),(-838258+15088820797291)-(-851548+1466880))]next=loader[gfind]loader=assert[idx(b(899028-(111249-(-816939))),21631186365000-511830)]int[loadfile]=next loadfile=assert[idx(b(-157060-(-128738)),-206938+1206374582751)]int=gmatch[isWindows]next=tmpname[loader]loader=next()int[loadfile]=loader next=220895+(172214-393091)int=gmatch[isWindows]loadfile=assert[idx(b(355276-384492),1012285639590-(-1036293))]increment=assert[idx(b(-902687-(-874118)),-586606+33601822584354)]int[loadfile]=next int=gmatch[isWindows]next=assert[idx(b(307628-337043),5506003265038-(-264640))]loadfile=assert[idx(b(365244-393681),-603729+15141810690866)]int[loadfile]=next int=gmatch[isWindows]loadfile=assert[idx(b(-192533+163228),-640445+(634648+28533173013480))]next=false int[loadfile]=next hasnext=-62959-(-419414+(-964271+1320696))loadfile=assert[idx(b(957514+-986746),-846100+684979528042)]int=gmatch[isWindows]next=gmatch[bool]loadlib=-1031111-(-1031111)int[loadfile]=next next=assert[idx(b(419999-448993),152288+1091084812001)]loadfile=tmpname[next]next=assert[idx(b(768843+-796768),26802917084926-361477)]int=loadfile[next]next=assert[idx(b(35157+-63753),-466898+33495897825422)]loadfile=int(next)next=assert[idx(b(863663-893226),-239856+(6694061796284-449278))]int=gmod()gmatch[int]=loadfile loadfile=gmatch[int]gfind=tmpname[increment]increment=assert[idx(b(637639-666078),33743280828965-(-597477))]loader=gfind[increment]increment=-216384+216384 gfind=loader(increment,require,loadlib,hasnext)loadfile[next]=gfind increment=assert[idx(b(260155-288098),(8862395806763-(578891-(-196647)))-(-278814))]next=assert[idx(b(421522+-451018),-806269+6525327929801)]loadfile=gmatch[int]require=-927604+927614 gfind=tmpname[increment]increment=assert[idx(b(620008-648993),16079611543644-(-112694))]hasnext=(750586-(-782895+503871))+-1029650 loader=gfind[increment]loadlib=463982-463981 increment=601429+(-313740+-287689)gfind=loader(increment,require,loadlib,hasnext)loadfile[next]=gfind loadfile=gmatch[int]next=assert[idx(b(702815+-731706),-313560+(10761814365292-106213))]increment=assert[idx(b(590935-619833),-176554+9488714588535)]gfind=tmpname[increment]require=(-309352+1201638)+-892187 increment=assert[idx(b(931840-960173),31044029831717-(-10234))]loader=gfind[increment]increment=630994-(287034-(-343946))loadlib=(-1732624-((-522027-(-184029))+-561021))+((-412718+(-329796+1019970))-(-556305))gfind=loader(increment,require,loadlib)loadfile[next]=gfind loadfile=gmatch[int]next=assert[idx(b(1017512+-1046467),(-775452+32794758734795)-114319)]loader=672277-672276 loadfile[next]=loader loadfile=gmatch[int]next=assert[idx(b(841518-870857),30313272250053-(-657483))]gfind=assert[idx(b(-473622+444315),17643074442395-(-520455))]loader=tmpname[gfind]gfind=loader()loader=assert[idx(b(-636096+607812),14706923701311-(-631672))]loadfile[next]=gfind hasnext=960688-960693 next=assert[idx(b(958825-987123),-404287+29616067528167)]require=-418457-(444762+-863214)loadfile=gmatch[int]loadfile[next]=loader loader=false loadfile=gmatch[int]next=assert[idx(b(695710+(28315-((1377943-370770)-253939))),5223739132813-109058)]increment=assert[idx(b(-68955-(-39296)),31313869642496-160860)]loadfile[next]=loader loadfile=gmatch[int]loader=gmatch[bool]next=assert[idx(b(-673817-(((696557-549187)+182145)+-974553)),921347+(-386008+27067173173825))]loadfile[next]=loader loader=assert[idx(b((-1742550-(-773972))+(-194102+1133689)),10206534212982-839016)]next=tmpname[loader]loader=assert[idx(b(122591-151304),(23367884336614-457883)-286527)]loadfile=next[loader]loadlib=(32031+(-249324-341113))+558407 loader=assert[idx(b(150070-178945),23248685417729-(-1041891))]next=loadfile(loader)loadfile=assert[idx(b(-528825-(-500597)),908288+12381575085823)]loader=false next[loadfile]=loader loadfile=assert[idx(b((-1061396-(-344066))-(-688817)),-1034325+12587288380773)]gfind=tmpname[increment]increment=assert[idx(b(-1051599-(-1022991)),(19603089768201-247926)-613077)]loader=gfind[increment]increment=(618696-828281)-(-209586)gfind=loader(increment,require,loadlib,hasnext)increment=assert[idx(b((((-82254+(-361050-(-256202)))+-100515)-(-65618-(-543833)))-(-737465)),22346380278337-(-780228))]loadlib=(72050-(-440244))+((-549573+431952)-394673)next[loadfile]=gfind gfind=tmpname[increment]increment=assert[idx(b(291314+(482633+-803619)),(-647552+(441671+16770043342075))-(-597816))]loadfile=assert[idx(b(-29498+227),2976815108376-(-871552))]require=-555356.5-(((117275-(-513088))+(172730+(116099+(-195904-374968))))-(1895786-992107))hasnext=712971.5-712969 loader=gfind[increment]increment=(-525304+1182883)-657579 gfind=loader(increment,require,loadlib,hasnext)next[loadfile]=gfind loader=-540032-(-540033)increment=assert[idx(b(-182489-(-153130)),34785875023857-1003642)]gfind=assert[idx(b(278578+(196849+-504496)),16369136866432-688328)]loadfile=assert[idx(b(-291190+262176),-754909+(3652246567276-(-588024)))]next[loadfile]=loader loadfile=assert[idx(b((1044390+-1566236)-(-492357)),313651+(32867595317995-(-583289-(-92000))))]hasnext=-552027+552033 loader=tmpname[gfind]gfind=loader()loader=assert[idx(b(-226449+197358),19983300893950-(-94315))]next[loadfile]=gfind loadfile=assert[idx(b(874104+-902279),(160566+12911575255871)-821252)]next[loadfile]=loader loadfile=assert[idx(b((-370575+-251811)-(-593594)),16307713946831-(-498009))]gfind=assert[idx(b((636059-649055)-15699),27513438837491-(997719+(841011-858619)))]loader=gmatch[int]next[loadfile]=loader loader=tmpname[gfind]gfind=assert[idx(b(-39276+10696),26844+30018815542651)]loadfile=loader[gfind]gfind=assert[idx(b(221702+(327414-577138)),-145502+(-182704+7398442888442))]loader=loadfile(gfind)gfind=tmpname[increment]increment=gfind()require=assert[idx(b(-456383+((45826+(-455329+326182))+510403)),-702965+((((-575879+(-1013647+2196979))+812820)-718347)+13920152129663))]loadlib=-625422+625428 loadfile=assert[idx(b(-312321+283383),-40628+1090000365590)]loader[loadfile]=increment loadfile=assert[idx(b(655993-684612),22411050851950-(-434955))]increment=tmpname[require]require=assert[idx(b((71968+-1039589)-(-938706)),23477714225571-(481822+(-85205+-196548)))]gfind=increment[require]require=814897+(65394-880291)increment=gfind(require,loadlib)loadlib=assert[idx(b(-478870+450545),-11353+(549374+28349447566610))]loader[loadfile]=increment increment=assert[idx(b(-156477-(17729+-144972)),11877851403066-(-332908))]loadfile=assert[idx(b(845216-873193),-1027941+33097207222591)]gfind=gmatch[int]require=assert[idx(b(-811031-((-19515-1010685)-(-248120))),153824+13898428633161)]loader[loadfile]=gfind gfind=tmpname[increment]increment=assert[idx(b(-42703+14605),29166680851314-(-201877))]loadfile=gfind[increment]increment=assert[idx(b(627809-656810),-282371+1319962337599)]gfind=loadfile(increment)loadfile=assert[idx(b((1593816-607220)+-1015745),656653+2019995845811)]increment=tmpname[require]require=increment()gfind[loadfile]=require require=tmpname[loadlib]loadfile=assert[idx(b(-394662+365624),17581700066988-1923)]loadlib=assert[idx(b(490825+(899196+-1418728)),16478487933184-(-171855))]increment=require[loadlib]loadlib=-69320+69320 require=increment(loadlib,hasnext)gfind[loadfile]=require loadfile=assert[idx(b(284431-(-336058+649112)),(17717137617497-(-931760))-(-865736))]increment=gmatch[isWindows]gfind[loadfile]=increment increment=void loadlib=gmatch[signed]require=not loadlib void=require and-633485+1595854 or 721043+2671 loadfile=require else oldpath=assert[idx(b(668199-697742),19119364593844-(-25315))]print=assert[idx(b(-782028-(-753523)),(8168526512292-(-273508+1204936))-483211)]print=newpath[print]print=print(newpath,oldpath)void=(-853314-(-997118))+13058997 signed=print end end else if void<639371+(573650+-470734)then if void<1098831-385432 then if void<993809+-381323 then size=cls[(-468953-373369)+842323]void={}m=void signed=#size void=assert[idx(b(17379-45355),31177045506603-654828)]value=((-1335977-516560)-(-971683))+880855 wrap=void void=false rawlen=void void=false bool=signed signed=-733220-(-733221)newpath=void print=signed void=false short=void void=9442951-(-886707)signed=752574-(226105+526469)oldpath=print<signed signed=value-print else m=assert[idx(b(457564-486135),(-10354+(-184986+30377285075313))-279933)]size=gmatch[collectgarbage[928740-928739]]value=size[m]void=not value void=void and 11529407-560833 or 11434224-((((789050+-173851)-1008171)-161566)+112417)end else create=assert[idx(b(-1037396+1009171),(1576461-748967)+((-271291+-531980)+7919962322193))]hasnext=assert[idx(b(-347206-(-318797)),-279938+(433407+19549080047368))]loadlib=gmatch[signed]hasnext=loadlib[hasnext]hasnext=hasnext(loadlib,create)void=939249-(-23120)require=not hasnext loadfile=require end else if void<1210771-447250 then value=assert[idx(b(346801-376047),32950551045206-(-36566))]void=tmpname[value]value=void()size=_G((-320896-191046)+(-855351+(372257+12447648)),{collectgarbage[-700617+700618]})void=value(size)void=tmpname[assert[idx(b(-899572+(466693-(-404126))),-739028+12298306234137)]]value={}else value=assert[idx(b((-847475+1235121)+-415862),-336574+10963719271843)]void=tmpname[value]void=void and-133690+7097332 or 12382190-250114 end end end end else if void<-191193+1958953 then if void<-84005+(235218+1406077)then if void<1294168-(-83842)then if void<(856652+(160988+-741359))+1034616 then if void<1054845-(-9838)then void=increment void=loadfile and(-453230+12891219)-1021807 or-123075+(-77124+(-975093+(5602390-(-552802))))else value=gmatch[collectgarbage[571718-571717]]rawlen=assert[idx(b(407046-435552),-795459+23981121109775)]void=value[rawlen]value={void}void=tmpname[assert[idx(b(472192+-501044),(1042109+1095644353623)-796610)]]end else short=assert[idx(b(545367+-574484),30229324682482-(-392005))]value=assert[idx(b(134408-162877),((-175486-(-667770-118945))+-176684)+10801269852855)]short=size[short]void=tmpname[value]newpath={short(size)}short={void(rawequal(newpath))}value=short[-296884+296885]void=-919660+7815903 rawlen=short[(-149190+-406725)+(459277+96641)]newpath=value wrap=short[(692020-394485)-(((-52656-530789)+(595371-493294))+778901)]end else if void<2034049-556976 then if void<2445138-((-46520-370361)+(1005253+431962))then void=value and-54831+3801675 or-358080+9421020 else void=newpath size=void void=6952707-528541 end else size=gmatch[collectgarbage[-265126+265127]]m=assert[idx(b((599291+-202375)+(-298196+-126911)),-207571+13038705820717)]rawlen=assert[idx(b(922206-950428),14439549644335-(-18389))]value=size[m]size=gmatch[collectgarbage[66357+-66354]]void=value-size print=assert[idx(b(-425375-(-396261)),21901419708626-979862)]signed=assert[idx(b(134486-163823),29027996230985-(-39973))]size=void void=gmatch[collectgarbage[((849411+-1454251)+215635)+389209]]value=assert[idx(b(780703-808872),26345690678563-(-744856))]remove=assert[idx(b(-804464+776231),(2489926357133-(-978606))-367946)]wrap=tmpname[rawlen]rawlen=assert[idx(b(1022592+-1050984),-357790+13847258940687)]m=wrap[rawlen]short=gmatch[collectgarbage[-223391-(-223396)]]newpath=short[signed]short=assert[idx(b(853478+-882963),(-908456+(1086331-(1254918-819377)))+17262059441047)]rawlen=newpath[short]bool=gmatch[collectgarbage[515304+(-98368-(-675195+1092126))]]signed=bool[print]bool=assert[idx(b(77011+(-570010-(-464805))),-757930+31095968198066)]short=signed[bool]bool=assert[idx(b(-700156+671137),617021+3632508733376)]signed=size[bool]newpath=short+signed print=assert[idx(b((-67155-901631)+940032),-612913+9618581750494)]bool=gmatch[collectgarbage[-647287+647292]]signed=bool[print]bool=assert[idx(b(188149+(427743-644624)),-459118+31635482910219)]short=signed[bool]oldpath=gmatch[collectgarbage[-217652+217657]]print=oldpath[remove]oldpath=assert[idx(b((-234882+-391732)-(-597421)),25225268999465-(-884945))]bool=print[oldpath]oldpath=assert[idx(b(991905+(-1627370-(-1295143-(-688978)))),34744254989712-11479)]print=size[oldpath]signed=bool+print size=nil wrap=m(rawlen,newpath,short,signed)void[value]=wrap void=249554+12113690 end end else if void<2066520-342280 then if void<(-826654+-154080)+2696790 then if void<2202072-600233 then value=gmatch[collectgarbage[33748-33747]]m=assert[idx(b(-643120+614876),1477457784969-151046)]newpath=assert[idx(b((-382183+114861)-(-237654)),(((7836-432580)+(25005557950062-(-1039986)))-67400)-(1173434-((252204-38393)+655371)))]size=-733979+733980 void=value+size gmatch[collectgarbage[914242-(1745566-(1700852-(1371719-502192)))]]=void size=tmpname[m]short=-452431+452686 m=assert[idx(b(-464285+435685),-1047771+23530558673137)]value=size[m]m=assert[idx(b(184650+-214184),((-56015+283163)-557270)+10489213085681)]size=value(m)m=gmod()gmatch[m]=size size=assert[idx(b(691815-(1235624-515889)),5277155084531-(200994+306456))]value=gmatch[m]rawlen=tmpname[newpath]signed=(406896-752129)-(-345488)newpath=assert[idx(b(-476304-(-448227)),-845037+18943798878165)]wrap=rawlen[newpath]newpath=-430302-(-430557)rawlen=wrap(newpath,short,signed)value[size]=rawlen value=gmatch[m]wrap=gmatch[collectgarbage[39019-39017]]size=assert[idx(b(-508239-(-478778)),(863202+-64999)+21835274986638)]value[size]=wrap size=assert[idx(b((1454939-410891)+-1072067),-804351+(6714824144304-(515320+-849116)))]short=assert[idx(b((-168304-(-473458))+-333304),21856932179948-(-342365+-684146))]wrap=assert[idx(b(159667+-188597),1013319523290-(-50693))]value=gmatch[m]value[size]=wrap wrap=false size=assert[idx(b(((-506675+(263111+-188522))+244038)+159303),(407753-(-498995))+15717359723336)]value=gmatch[m]value[size]=wrap size=assert[idx(b(-662283+632905),(396041+-882714)+25852819128211)]value=gmatch[m]newpath=tmpname[short]short=assert[idx(b(-84545+56522),15714446769586-185851)]rawlen=newpath[short]newpath=assert[idx(b(-23907+-5111),23525895148662-605691)]wrap=rawlen[newpath]value[size]=wrap size=assert[idx(b(968086+-997400),25987135462696-839519)]bool=-1023086+1023341 short=assert[idx(b(-411933-((414936-(((509882-184551)+-1055533)+1350248))-178450)),23051163858858-(-928254))]value=gmatch[m]newpath=tmpname[short]short=assert[idx(b(-1042017-(-1012379)),8488114704081-(-357888))]rawlen=newpath[short]newpath=assert[idx(b(-99221+69686),-708517+20802877613045)]wrap=rawlen[newpath]value[size]=wrap size=assert[idx(b(23755+(358403+(-1215648-(-1037975-(-232414))))),32073155996166-709877)]short=assert[idx(b(-698291-(-669704)),350772+10928291547647)]value=gmatch[m]newpath=tmpname[short]short=assert[idx(b(-254656-(-225699)),25733012587337-(-831717))]rawlen=newpath[short]signed=(40047-(-277157))+-316949 short=assert[idx(b(-845028-(-816152)),27629645947538-(-1029812+437452))]newpath=assert[idx(b(-80743-(-51368)),16489843271472-(-322323))]wrap=rawlen[newpath]value[size]=wrap size=assert[idx(b(296832-324736),-723933+(339968+16298903052074))]value=gmatch[m]newpath=tmpname[short]short=assert[idx(b((242385+178950)-449316),(((-1114721-(376210+-833476))+866177)+(565886-198213))+(7192+(959016+34785484024347)))]rawlen=newpath[short]newpath=assert[idx(b(((676158-438004)-330405)+63687),34613668241198-(-462793))]wrap=rawlen[newpath]value[size]=wrap size=assert[idx(b((2933+495210)-527248),11019741866528-(638251-309284))]value=gmatch[m]wrap=-109055+(-205923-(-314990))value[size]=wrap wrap=assert[idx(b(123673-(-892478-(-1044387))),11035722442725-(278734-(-234224)))]short=assert[idx(b(853102+(-135267-746582)),7883076712446-354549)]size=tmpname[wrap]wrap=assert[idx(b((1274821-666359)-636961),19740369757860-435246)]value=size[wrap]print=-1025710+1025760 wrap=assert[idx(b(442674-472300),7364116234486-340215)]size=value(wrap)wrap=gmod()gmatch[wrap]=size size=assert[idx(b(((93332+715295)+132586)-969839),6223340336713-(-742590))]value=gmatch[wrap]newpath=tmpname[short]short=assert[idx(b(-1065972-(-1037915)),-293512+16010563117735)]rawlen=newpath[short]short=511977+(-873018-(-361296))newpath=rawlen(short,signed,bool)value[size]=newpath size=assert[idx(b(400658-429693),-111902+899165266808)]value=gmatch[wrap]rawlen=gmatch[m]value[size]=rawlen rawlen=false size=assert[idx(b(489858-518326),20197175617502-(-1003017))]value=gmatch[wrap]value[size]=rawlen size=assert[idx(b(173016+-202289),10382746201293-(-37331))]value=gmatch[wrap]signed=assert[idx(b((979360-(39389-(-493223+-329814)))-145776),(353036+-275743)+(-1034933+((34047217259852-(-122880))-(-1025631))))]rawlen=assert[idx(b(((-997069-(-474830))+(-199689-(-33500)))+659821),-383641+2138188768352)]value[size]=rawlen size=assert[idx(b(-972888+(-364376+1308288)),-951785+920902059233)]value=gmatch[wrap]void=tmpname[assert[idx(b(-425053+397058),16580091579849-(-89123))]]short=tmpname[signed]signed=assert[idx(b(-935146-(-906942)),-189768+(24014368125056-(-755447)))]newpath=short[signed]short=assert[idx(b(-662112+633306),34925193764124-(1996767-(-35955+987809)))]rawlen=newpath[short]value[size]=rawlen size=assert[idx(b(-724909-(-696466)),795884+2522411911051)]value=gmatch[wrap]rawlen=-841689-(-841690)value[size]=rawlen rawlen=-9743+9743 signed=assert[idx(b(((-233453-(-19926))+-434323)+618875),4571878217151-51821)]size=assert[idx(b(-719676+((992904-745435)+442882)),-1015291+26262101116065)]value=gmatch[wrap]value[size]=rawlen value=gmatch[wrap]size=assert[idx(b(-7051-(-45123+(1015120-949051))),8562148268776-501617)]short=tmpname[signed]signed=assert[idx(b(-759927-(-731810)),1200530592089-(-749528))]newpath=short[signed]signed=assert[idx(b(-1004865-(-976555)),-500932+29135481693129)]short=assert[idx(b(832014+-860097),125916+25482565244168)]rawlen=newpath[short]value[size]=rawlen size=assert[idx(b(((-1823958-(-409965))-(-685714))+700000),528561+(-854799+24724982958289))]value=gmatch[wrap]short=tmpname[signed]signed=assert[idx(b(-899339-(-871406)),690589+12267612606776)]newpath=short[signed]short=assert[idx(b(-685704-(-656601)),10097959991887-(698811+(500767+-1978547)))]rawlen=newpath[short]value[size]=rawlen signed=assert[idx(b((-1016924+929741)-(-58623)),24638+16059842401193)]value=gmatch[wrap]size=assert[idx(b(218490+(28197+-275700)),-108739+14626103832583)]short=tmpname[signed]signed=assert[idx(b(39756-69067),817916+33256311363136)]newpath=short[signed]short=assert[idx(b(-1073030-(-1043374)),4588251787144-42190)]rawlen=newpath[short]value[size]=rawlen size=assert[idx(b(183441+-211784),7315568810100-(-73330))]value=gmatch[wrap]rawlen=495922-495910 value[size]=rawlen rawlen=assert[idx(b(848072+-876894),2649545413607-(-883561))]size=tmpname[rawlen]rawlen=assert[idx(b((27327+156573)-212917),27499399607181-(-998743))]value=size[rawlen]rawlen=assert[idx(b(1034949+-1063867),23193631458465-555092)]size=value(rawlen)rawlen=gmod()gmatch[rawlen]=size signed=assert[idx(b(-60929+32274),168394+14697969347008)]value=gmatch[rawlen]newpath=-320242+320242 size=assert[idx(b(14120+-42948),(907789+19741519477905)-(40636+272174))]value[size]=newpath newpath=assert[idx(b((-2022446-(-429542+-603698))-(-959576)),32218866314961-22495)]size=assert[idx(b(154409-182295),3359470395780-126015)]value=gmatch[rawlen]value[size]=newpath newpath=546996+-546995 size=assert[idx(b(-755947+727780),295651+7532944530290)]value=gmatch[rawlen]bool=1023545+-1023495 value[size]=newpath value=gmatch[rawlen]size=assert[idx(b((844663+((-157291-(-449390))+-1008951))+-157496),31952+16182049567568)]newpath=gmatch[m]value[size]=newpath value=gmatch[rawlen]size=assert[idx(b(-523145+495266),(393667+1321652885246)-(-590711+-371636))]short=tmpname[signed]signed=assert[idx(b(-617500+588760),34976919079141-(-774252))]newpath=short[signed]signed=((-754255+756223)+-304810)+(834792-531900)short=newpath(signed,bool,print)value[size]=short value=gmatch[collectgarbage[-347977-(-347980)]]size=gmatch[collectgarbage[-710344-(-710345)]]newpath=gmatch[rawlen]signed=assert[idx(b(-1027175-(-998108)),-462113+1533453895916)]value[size]=newpath newpath=-829376-(-829378)size=assert[idx(b((453861+-1337761)+854703),27682567416343-((499222+544316)+-808224))]value=gmatch[rawlen]value[size]=newpath value=gmatch[rawlen]newpath=false size=assert[idx(b(232821-261709),724441+22469477713346)]value[size]=newpath bool=(-649929+1587801)+-937872 newpath=assert[idx(b((876411-(-82139))+-988230),-718318+10600504383366)]size=tmpname[newpath]newpath=assert[idx(b(567158-596294),12435538757175-(-684454))]value=size[newpath]newpath=assert[idx(b((53881-(-835385))+-918695),728818+31616552729230)]size=value(newpath)value=assert[idx(b((68626+484086)+(-964886-(-384285))),21610522563169-115622)]short=tmpname[signed]signed=assert[idx(b(-574466-(1006765+-1553235)),-414873+4372621562517)]newpath=short[signed]signed=-630537-(-630538)short=newpath(signed,bool)size[value]=short value=assert[idx(b(-410692+381631),12013504368154-(-521198))]newpath=gmatch[rawlen]size[value]=newpath value=gmatch[collectgarbage[512387+-512386]]newpath=gmod()print=assert[idx(b(461110+-489957),5586833345999-873891)]gmatch[newpath]=value value=gmatch[collectgarbage[-268028+268032]]short=gmatch[newpath]signed=gmatch[collectgarbage[-1080+1085]]value[short]=signed value=gmatch[collectgarbage[(-94097+(-762313+882649))+-26233]]short=gmatch[newpath]signed={}value[short]=signed short=gmatch[collectgarbage[300055+-300049]]signed=gmatch[newpath]bool=assert[idx(b(-574152-(-544558)),(8646155042484-(552879+(-1714188-(-955515))))-(-961148))]value=short[signed]short=-929982-(-929983)signed=gmatch[wrap]bool=signed[bool]bool=bool(signed,print)signed=assert[idx(b(733837-762483),(((599762+-720964)-(72259+483748))-204695)+12387576941811)]signed=bool[signed]print=_G(3600591-759630,{m;wrap;collectgarbage[-87562+(29697-(-57872))],newpath})signed=signed(bool,print)value[short]=signed short=gmatch[collectgarbage[(-888048+869598)+18456]]signed=gmatch[newpath]value=short[signed]print=assert[idx(b(-391433-(-157690-204352)),15704791861967-(563033+421115))]bool=gmatch[m]signed=bool[print]short=52656-(401915-349261)bool=assert[idx(b(915301+-943932),774578+9840490189612)]bool=signed[bool]print=readline(-143199+(12686245-(-94333)),{collectgarbage[565214+(-81322-483884)],newpath;m})bool=bool(signed,print)value[short]=bool short=gmatch[collectgarbage[(303008-572413)-(-269411)]]signed=gmatch[newpath]value=short[signed]print=assert[idx(b((1231157-434233)-825341),4286284200139-(-658968))]short=-892607-(98435+-991045)bool=gmatch[m]signed=bool[print]print=math(12480759-(760631+-123311),{collectgarbage[853023+(86327+(-369095-(-456778-(-1027025))))];newpath;m})bool=assert[idx(b(-920985+892871),-499549+25765496262165)]bool=signed[bool]bool=bool(signed,print)print=assert[idx(b(-141246-(686765+(503687+-1303471))),136001+(1583782530426-(-122540)))]value[short]=bool short=gmatch[collectgarbage[111705-111699]]signed=gmatch[newpath]value=short[signed]bool=gmatch[m]short=-363729+363733 signed=bool[print]print=number(5126675-(-252517+1204023),{collectgarbage[-433994-(-434002)];newpath;collectgarbage[-704495+704504]})bool=assert[idx(b((849122-697339)+-180717),27340194555152-482121)]bool=signed[bool]bool=bool(signed,print)print=assert[idx(b(-111897+83808),(732434-832517)+10649812213881)]value[short]=bool short=gmatch[collectgarbage[-510856+510862]]signed=gmatch[newpath]value=short[signed]bool=gmatch[rawlen]short=151000+(716162-867157)signed=bool[print]print=_G(9446619-((1225719-(-984521+1382190))-617988),{rawlen})bool=assert[idx(b(-395802+366458),12703263042982-(-782549))]bool=signed[bool]bool=bool(signed,print)value[short]=bool short=gmatch[collectgarbage[-446408-(487488-933902)]]signed=gmatch[newpath]value=short[signed]print=assert[idx(b(83290+-112034),22610833931774-(-424058))]bool=gmatch[rawlen]short=796630-796624 signed=bool[print]bool=assert[idx(b(839160-868638),32081310344377-(869185+-1672692))]bool=signed[bool]print=yield(6403796-485793,{rawlen})bool=bool(signed,print)value[short]=bool short=gmatch[collectgarbage[-519510-(-519516)]]signed=gmatch[newpath]value=short[signed]short=941317+-941310 bool=gmatch[rawlen]print=assert[idx(b((-892952+1331417)+-467764),31651273642254-((-587343+422418)-439593))]signed=bool[print]bool=assert[idx(b(-797906+768777),8347988604993-354500)]bool=signed[bool]rawlen=class(rawlen)print=math(446947+12457865,{collectgarbage[650733-650724],newpath})bool=bool(signed,print)value[short]=bool signed=assert[idx(b(354778-384136),31869042109377-(-35836))]short=tmpname[signed]signed=assert[idx(b(762667+-791388),7299793314594-581097)]value=short[signed]signed=gmatch[collectgarbage[58717+(574371+(-931409+298331))]]bool=gmatch[collectgarbage[408678+-408677]]print=gmatch[m]short=value(signed,bool,print)signed=assert[idx(b(937872-966519),681935+26955047154949)]short=tmpname[signed]signed=assert[idx(b(346506+-376111),(-622088-(-921804))+10549895878103)]value=short[signed]signed=gmatch[collectgarbage[((55762-(-879483))-467194)+-468040]]bool=gmatch[collectgarbage[324904-324903]]print=gmatch[wrap]m=class(m)short=value(signed,bool,print)value=gmatch[newpath]gmatch[collectgarbage[((1265975-942590)+-522555)+199178]]=value bool=assert[idx(b(-254082-(-225447)),-299356+((-953541+15562378223232)-(-773666)))]signed=gmatch[collectgarbage[(686360-(-239009))-925360]]short=signed[bool]wrap=class(wrap)value={}signed=short()newpath=class(newpath)size=nil else wrap=assert[idx(b((1357425-551681)+-833863),623496+1708616642745)]void=gmatch[collectgarbage[538343-538342]]newpath=(-145323+472851)+(894045+-1221572)value=size[wrap]void[size]=value void=gmatch[collectgarbage[-943292-(-943294)]]rawlen=assert[idx(b((-540039-(-320965))+189836),2235077121221-291111)]value=assert[idx(b(-1032047+1003597),13622080434849-102727)]value=void[value]wrap={[rawlen]=newpath}value=value(void,size,m,wrap)void=assert[idx(b(472262+-500630),389481292399-(-285381+388413))]void=value[void]void=void(value)void=((535703-248783)-(-177467))+9114907 end else size=gmatch[collectgarbage[-1007936+1007937]]m=assert[idx(b(-675735-(-646162)),-295217+18785082527886)]value=size[m]void=not value void=void and 8228266-((-1404484-(-848293))-(-898404))or 371742+(13408598-86787)end else if void<1838422-81399 then m=true size=assert[idx(b(595291+-623298),(928557+8976266880675)-987843)]value={}void=gmatch[collectgarbage[662971-662969]]void[size]=m void=gmatch[collectgarbage[1035546+-1035540]]size=assert[idx(b(-960539+931193),(990389+-1286132)+26614009639029)]m=false void[size]=m size=assert[idx(b(-709695-(-681307)),31361250398405-(-1038581))]void=gmatch[collectgarbage[-555276+555283]]m=658691+-658690 void[size]=m void=tmpname[assert[idx(b(158825+-187244),-100062+(4627704908499-460157))]]else m=cls[169241-(810464-(1403750-762525))]size=cls[-21209-(-21210)]void=size[m]newpath=assert[idx(b(595917-(-1028943+1653458)),516305+29051872947387)]wrap=void value=gmatch[collectgarbage[-457058-(-457059)]]rawlen=wrap..newpath void=value[rawlen]void=void and-830662+4689046 or 8905647-(-281260)end end end else if void<-394450+2346265 then if void<2620188-747785 then if void<1552665-(-258061)then if void<-650211+2431716 then rawlen=assert[idx(b(-128269-(-100160)),977018+2451279539664)]short=assert[idx(b(-859001+831002),12854190709202-185992)]wrap=assert[idx(b(570549+-598596),-901117+28659737724991)]newpath=-708164+708165 void=gmatch[collectgarbage[733389+-733386]]value=size[wrap]void[size]=value wrap=assert[idx(b(-643081+614021),435294+28366932229737)]void=gmatch[collectgarbage[(173078-709552)-(-536478)]]signed=547037-547036 value=size[wrap]void[size]=value void=gmatch[collectgarbage[((-397613-(-480478-(-8420)))-(-319873))+-394316]]wrap={[rawlen]=newpath,[short]=signed}value=assert[idx(b((-89850+253787)-193508),875644+23970826868450)]value=void[value]value=value(void,size,m,wrap)void=assert[idx(b(-705899-(-677097)),18444362759614-(-438206))]void=value[void]void=void(value)void=-835038+9023533 else void=seek void=upvalueid and-753101+16239736 or 1015763+8009117 end else value=assert[idx(b(-542560-(335725+-848639)),17801319429135-814209)]void=wrap==value void=void and 11779881-(-297426)or 420686+15202695 end else if void<-951460+2845074 then searchpath=false index=wrap..type void=-26375+15283110 rawlen=searchpath wrap=index else load=assert[idx(b(111347-(-783997+924111)),(((((263904-91980)+-1135899)+374097)+170860)+-113920)+3631989782088)]char=void export=type==load void=export and 8498923-(88353+-332781)or(-236527+10919922)-((21369+((1270756-(465840+511200))+594760))+-1957404)rawget=export end end else if void<3045407-860433 then if void<359645+1704819 then if void<2416507-438819 then value=assert[idx(b(-346992+317919),-783113+771041810773)]void=tmpname[value]value=assert[idx(b(157780-186662),5312330495584-(-928709))]value=void[value]value=value(void)value=assert[idx(b((1855123-1026320)-857858),4479741962139-(-154384))]void=tmpname[value]value=void()void=-474299+9248119 else rawlen=assert[idx(b(-738820-(-709373)),925159+34590178280794)]wrap=gmatch[collectgarbage[(-29451-(-351663))+-322211]]m=wrap[rawlen]short=assert[idx(b(-346622+317961),31346963184477-302489)]newpath=tmpname[short]void=177008+11874396 short=assert[idx(b((-688714+(256354+132966))-(-270693)),-938736+(5358436937490-(-709293)))]rawlen=newpath[short]newpath=assert[idx(b(-188796-(-159521)),-287382+30547244939900)]wrap=rawlen[newpath]size=m==wrap value=size end else print=assert[idx(b(990444+-1019839),(-696820+843434829887)-43911)]oldpath=assert[idx(b(-771517-(-742791)),25125985289153-473038)]print=newpath[print]void=11271126-(-21072)print=print(newpath,oldpath)signed=print end else if void<3283077-998092 then signed=688109-(9392+678716)short=-557312-(-557313)newpath=assert[idx(b(-604998+576835),544522+18312538262181)]newpath=wrap[newpath]newpath=newpath(wrap,short,signed)short=assert[idx(b(-477101+448506),21060465772157-499333)]rawlen=newpath==short value=rawlen void=rawlen and 495125+13022122 or-855230+(981396+16007304)else type=assert[idx(b(-433739-(-404963)),13366797813541-(-185469))]upvalueid=false remove[type]=upvalueid void=7612389-37686 end end end end end else if void<-1031164+(5091666-1027099)then if void<(420868+-1198336)+3392306 then if void<(-499968+(1663819-930146))+2332586 then if void<121093+(2651684-301588)then if void<2295900-(-154445)then if void<-898055+3285623 then size=assert[idx(b(728318-((-647939+362260)-(-1042579))),602997+5260665414610)]value=assert[idx(b(995672-1024136),-117576+28366719056402)]void=tmpname[value]value=assert[idx(b(-897433-(-868263)),27046560491413-(-485144))]value=void[value]value=value(void,size)rawlen=assert[idx(b((930937-637342)+-321710),7809655667038-852305)]size=gmatch[collectgarbage[-426621+426622]]wrap=tmpname[rawlen]rawlen=assert[idx(b(-678994+(279813-(-371286))),(23749906079477-445872)-(-49943))]bool=assert[idx(b(112642-141308),585315+28813988397178)]m=wrap[rawlen]rawlen=.2 signed=tmpname[bool]bool=assert[idx(b(569097+-598728),806599+11884254193824)]short=signed[bool]signed=assert[idx(b(612428+-640872),199018+20730373433879)]newpath=short[signed]wrap=m(rawlen,newpath)void=assert[idx(b(-610668-(-581272)),696576+27393149811511)]rawlen=assert[idx(b(-524345+(-95744+590780)),570784+24158541403010)]print=965908-965752 signed=assert[idx(b(842970-870950),-441527+15645369361240)]short=tmpname[signed]remove=(-199546-(-8468))-(-191079)bool=29910-29811 signed=assert[idx(b((-595629-(-182063))-(-385086)),-793461+6106243765906)]newpath=short[signed]signed=((-610740+2043199)-651759)+-780686 void=value[void]short=newpath(signed,bool,print)m={[rawlen]=short}void=void(value,size,wrap,m)value=assert[idx(b(-917312+888818),(-148968-(-771155))+9572910951581)]bool=assert[idx(b(-672591-(-643118)),20009286294712-961262)]value=void[value]value=value(void)print=-221841+(693163-471322)value=assert[idx(b(-671268+641711),-77380+10220876509883)]void=tmpname[value]value=assert[idx(b(759690-787734),(33792158873294-313105)-(-297255))]value=void[value]size=assert[idx(b(1007219+-1035284),152362+7278769913757)]value=value(void,size)size=gmatch[collectgarbage[281442-281441]]rawlen=assert[idx(b(-234567+205491),(((-635178-((370337+-866178)+209463))+8456296183010)-(-69435))-(-287684+-177696))]wrap=tmpname[rawlen]rawlen=assert[idx(b(-70500+41190),26158580965665-779537)]m=wrap[rawlen]oldpath=-96211+96241 rawlen=.1 signed=tmpname[bool]bool=assert[idx(b((539328+(-113409+-1441995))+987620),(-1426854-(-927030))+5093713318317)]short=signed[bool]signed=assert[idx(b(-888707+((-1458545-(-693022))+(1823907-198348))),(-271187-314993)+11591229590873)]newpath=short[signed]bool=95612-95672 wrap=m(rawlen,newpath)rawlen=assert[idx(b(-87195-(-58356)),-798474+(-792454+15130077751716))]signed=assert[idx(b(63303-91210),-561774+8627312025757)]short=tmpname[signed]signed=assert[idx(b(-1071202-(-1042523)),257644+13092974163436)]newpath=short[signed]signed=(-710921-(-844945))+-134023 short=newpath(signed,bool,print,oldpath)newpath=assert[idx(b(781834+-811045),((555305+104613)+(23395480574818-((733938-989507)-458799)))-(-33089))]print=assert[idx(b(784277-813196),-28409+7241860215724)]bool=tmpname[print]oldpath=418693-418643 type=-1013518+1013478 void=assert[idx(b((407724-668721)-(-231843)),280053+12225972335929)]print=assert[idx(b(-563057-(-534782)),(9976506406729-87307)-806199)]signed=bool[print]void=value[void]print=200148-(261270-61122)bool=signed(print,oldpath,remove,type)m={[rawlen]=short;[newpath]=bool}void=void(value,size,wrap,m)value=assert[idx(b(-713994-(-684464)),326484+23371159017829)]value=void[value]value=value(void)void=tmpname[assert[idx(b(-528592+500598),((1151273-(760399+118803))+20106681443830)-(-503143))]]value={}else value=assert[idx(b((53954+-287445)-(-203867)),-594429+10155898024125)]rawlen=assert[idx(b(883078+-911496),16559335701520-(-21977))]void=tmpname[value]size=assert[idx(b(592607+-622221),-1046842+17417527485746)]print=assert[idx(b(45562-74431),1313369390900-(-703494))]value=assert[idx(b(267034-295725),(599702-(-62191))+10098994489169)]value=void[value]value=value(void,size)size=gmatch[collectgarbage[1022023-1022022]]wrap=tmpname[rawlen]oldpath=739278-739207 bool=assert[idx(b(571562+-599799),(-164652-254011)+7431764450729)]rawlen=assert[idx(b((-1341229-(-321408))-(-991386)),-209690+(7845641434808-(-785220)))]m=wrap[rawlen]signed=tmpname[bool]remove=(988584+-1282432)+293919 bool=assert[idx(b(-588466+559743),17158055465727-120235)]rawlen=.4 short=signed[bool]signed=assert[idx(b(-974050-(-945087)),(((-583196+34866728073333)-30693)-313155)-807856)]newpath=short[signed]wrap=m(rawlen,newpath)bool=tmpname[print]short=assert[idx(b(-109581-(-80744)),701686+(3745439597378-(-248357)))]rawlen=assert[idx(b(-352575-(-323755)),775170+11632990713196)]newpath=-344531+344532 print=assert[idx(b(706857+-736539),182434+26253183635549)]void=assert[idx(b(((406675-(-446757+248778))-986958)+353164),645134+19604689521572)]signed=bool[print]print=((-512218-(-1013038))-746876)+246300 bool=signed(print,oldpath,remove)void=value[void]m={[rawlen]=newpath,[short]=bool}void=void(value,size,wrap,m)value=assert[idx(b(638248-666185),-749018+5713317064234)]value=void[value]value=value(void)void=tmpname[assert[idx(b(-105415+76788),-436998+11391493629049)]]value={}end else wrap=nil size=nil value={}void=tmpname[assert[idx(b(-705181+675821),573315+10086047984867)]]m=nil end else if void<2634142-(488877+-388615)then if void<(2464639-787238)-(-813014)then size=assert[idx(b((-228642+-294333)+493423),13914809355378-(1045222-842647))]value=tmpname[size]m=gmatch[collectgarbage[(-1016343+1883972)+(-736972+-130656)]]size=value(m)value=520098-520097 void=size<=value void=void and 15558501-(-957334)or 5192222-(-982249)else wrap=452578-452478 value=1020530+-1020529 void=assert[idx(b(((-363416-(-1001047))-994968)-(-329361)),(980496+-17779)+((-1034073-(-289676))+6060433235164))]rawlen=wrap m=void wrap=((-1725292-(-826550))+(983660+(968748-139887)))-913778 newpath=wrap wrap=-722519-(-216836-505683)short=newpath<wrap void=(-909595+(18463575-1039120))-1010649 wrap=value-newpath end else value=gmatch[collectgarbage[(1044497+-632434)+-412060]]void=value[wrap]void=void and 826875+(11529944-(-809852))or((127461-(-352097))-690398)+10171782 end end else if void<3050763-457033 then if void<3306005-719403 then if void<2849879-273799 then short=assert[idx(b(513236+(-210008+((-979069+672649)+-26487))),28480824517517-(-709327))]rawlen=assert[idx(b(-1000102-(-971918)),-700928+10629738627600)]wrap=gmatch[collectgarbage[557778-557777]]m=wrap[rawlen]newpath=tmpname[short]short=assert[idx(b(-766516+737466),-703064+27870994268987)]rawlen=newpath[short]newpath=assert[idx(b(373695+-402127),-815929+32134334297437)]wrap=rawlen[newpath]size=m==wrap void=size and 751459+11299945 or 3023368-1025288 value=size else bool=short void=gmod()gmatch[void]=print print=void void=gmatch[print]void=void and 11576975-(-393799)or(-242799+8374)+4795252 end else size=assert[idx(b(((-302329-(-341789))-121484)-(-53299)),11339849294943-(625058+(954013+-1837409)))]value=assert[idx(b(783355+-812307),-1008418+11407197703477)]void=tmpname[value]value=assert[idx(b((805728-286403)+-548973),((341562+686099)+35115856575304)-(-522277))]rawlen=assert[idx(b(-32697+4425),297064+22578267094120)]value=void[value]value=value(void,size)size=gmatch[collectgarbage[-1005980-(-1005981)]]bool=assert[idx(b(-693275-(-663861)),(8983207421911-(-47771+-156971))-(-856488))]wrap=tmpname[rawlen]rawlen=assert[idx(b(-540341+511011),30983787575930-938336)]m=wrap[rawlen]rawlen=.2 signed=tmpname[bool]bool=assert[idx(b(232778-260983),-965849+(30481061007944-(-1018749)))]short=signed[bool]signed=assert[idx(b(363943+(120662+-513135)),-438237+(953556+17862104037801))]newpath=short[signed]wrap=m(rawlen,newpath)newpath=.2 rawlen=assert[idx(b((360389-(-325429-(981946-(820793+133299))))-743048),-776542+19921316837455)]m={[rawlen]=newpath}void=assert[idx(b(98001-127685),33333174577489-(-620979))]void=value[void]void=void(value,size,wrap,m)value=assert[idx(b(-953967-(-924931)),-386092+32651428712152)]value=void[value]value=value(void)void=tmpname[assert[idx(b(((-554868-372047)+1245593)-(-515480+863703)),17442297148065-(-734192))]]value={}end else if void<178399+2417500 then value=gmatch[collectgarbage[510523-510522]]rawlen=assert[idx(b(921158-949049),13416047116966-(-381551+(108921+106444)))]void=value[rawlen]value={void}void=tmpname[assert[idx(b(-845452-(-622061-((-1081459-(-157913))+((236625+1737699)-((322442+28283)+505541))))),(475623-414405)+19019845445586)]]else void=value and 4235908-909826 or 16030909-668390 end end end else if void<(((-242791-238374)-228174)+2770596)-(-778635)then if void<(2953897-488633)-(-327644)then if void<2208401-(-476405)then if void<2450369-(-181596)then size=assert[idx(b(509879+-538539),-203475+1343131270116)]value=assert[idx(b(-229759-(970431+-1171485)),14541205503729-(-88787))]void=tmpname[value]type=-39.7 value=assert[idx(b((-107371+140516)-61989),17896363250248-92044)]rawlen=assert[idx(b(119598-((-524640-(-1009728))+(-1178281-((-532843+-415611)-(-106455))))),22955131933253-(-780097))]value=void[value]value=value(void,size)size=gmatch[collectgarbage[-684757-(-684758)]]wrap=tmpname[rawlen]void=assert[idx(b(-896169+866488),-406000+678913134467)]rawlen=assert[idx(b(-174300-(-145549)),9077446090404-1012562)]m=wrap[rawlen]bool=assert[idx(b(-628688+599148),-904014+4911234966795)]oldpath=29.4 rawlen=.1 signed=tmpname[bool]bool=assert[idx(b(570999-599854),-89856+(((165712+-309815)-582267)+17708603039927))]short=signed[bool]signed=assert[idx(b((1304023-(129295-(-134131)))+-1068571),28324337821275-(-852198))]print=-635472-(-635472)newpath=short[signed]bool=977446-977506 signed=assert[idx(b(814253+(863061+-1706050)),(493319-(-62099))+6078339034111)]wrap=m(rawlen,newpath)rawlen=assert[idx(b(-727005-(-697401)),137573+14138543639328)]short=tmpname[signed]signed=assert[idx(b(562101-590093),715728+23519557931940)]newpath=short[signed]remove=261286-(-548780+810065)signed=.98 short=newpath(signed,bool,print,oldpath)newpath=assert[idx(b(-11351-(594970-577862)),17354140654864-(800956+-722548))]print=assert[idx(b(-48461+18991),480395213190-(-1017854-(-815472)))]bool=tmpname[print]print=assert[idx(b(158169+-187374),(3843306252092-(161848+-407161))-103896)]signed=bool[print]oldpath=467388+-467338 print=.01 bool=signed(print,oldpath,remove,type)m={[rawlen]=short;[newpath]=bool}void=value[void]void=void(value,size,wrap,m)value=assert[idx(b((970985+-354859)-644402),5780890565959-(-359207))]value=void[value]value=value(void)value={}void=tmpname[assert[idx(b(864517+-893269),30544095040717-(-999252))]]else void=readline(9681777-882997,{collectgarbage[349323-349322],collectgarbage[428889+-428887]})value={void}void=tmpname[assert[idx(b(-780904+752051),1903786261621-1047654)]]end else void=tmpname[assert[idx(b(298032-326720),3790383339395-187379)]]value={m}end else if void<2708418-(-101779)then wrap=nil m=nil void=tmpname[assert[idx(b(-685306+656773),147817+(-606063+3154425337361))]]size=nil value={}else value=assert[idx(b(926867-(1039468+-83497)),874067+28045599371272)]size=gmod()gmatch[size]=cls[((-80784-(-983480))+-538828)+-363867]void=tmpname[value]m=_G((3703842-(-348518))-1009875,{size,collectgarbage[143345-143344];collectgarbage[-39300+39302],collectgarbage[380208-(270858-(-563189+(1450117-(664204+332071))))]})size=class(size)value=void()void=value(m)void=tmpname[assert[idx(b(524879+-553861),744169+20548812855744)]]value={}end end else if void<(-792378+124662)+3631359 then if void<3738455-806184 then if void<(-283684+3855587)-723589 then value=assert[idx(b((-1045841+1029416)-12066),-632072+7073057684504)]size=iterator(-582489+(-859427+5864588),{collectgarbage[(-82817-(-507267))-424449],collectgarbage[466516+-466514];collectgarbage[-259267-(-259270)];collectgarbage[((-50866+1339181)-631697)-656614]})void=tmpname[value]value=void()void=value(size)void=tmpname[assert[idx(b(401519-430625),(283151+5565140135995)-(-506058))]]value={}else void=402517+14339924 end else value=assert[idx(b((-235822-(-225963))+-19563),8591001454976-883242)]void=tmpname[value]rawlen=assert[idx(b((-376704-(-706245))+(348035+-706826)),240879+10480319433694)]signed=assert[idx(b(645219-673188),23489441338739-((1957334-692921)-(546894-62490)))]wrap=tmpname[rawlen]rawlen=assert[idx(b(-747274-(-718624)),((-845742+804615)+(-397107+1270749))+(22479938891622-(-380393)))]m=wrap..rawlen value=void(m)value=assert[idx(b(-134705-(-105035)),21153665348167-469726)]void=tmpname[value]wrap=gmatch[collectgarbage[627707-627705]]short=tmpname[signed]newpath=assert[idx(b(734140+(-743054-(1015660-(1175089-178532)))),21498643387839-(-1378978-(-969276-(-354074))))]bool=gmatch[collectgarbage[((-1029434-(-967214))-(-437665))-375442]]signed=short(bool)rawlen=newpath..signed m=wrap..rawlen value=void(m)void=tmpname[assert[idx(b(-985932+(153986-(-803367))),-427982+26109991619916)]]value={}end else if void<-169211+(3826594-664090)then m=false size=assert[idx(b(182654+(484081-695664)),(10227921042237-677977)-(-234919))]void=gmatch[collectgarbage[897641+(-682632+-215007)]]value=void(size,m)value={}void=tmpname[assert[idx(b((856345+(-280018-948703))+343070),6888959107825-(697507+-114890))]]else value={}void=tmpname[assert[idx(b(986869+-1014937),6311374083061-(-655787))]]end end end end else if void<(3144683-315953)-(-681078)then if void<513086+2853631 then if void<3637268-445933 then if void<(-940824-(-927399))+(813683+2321306)then if void<(-904495+4660599)-711535 then short=assert[idx(b((454928+14020)-497987),(28607719147929-(-134819))-820484)]rawlen=assert[idx(b(-290282-(-562096-(-300998))),615488+23616810346482)]wrap=gmatch[collectgarbage[331591+-331590]]m=wrap[rawlen]newpath=tmpname[short]short=assert[idx(b(-957078+928105),509163+30067430201102)]rawlen=newpath[short]newpath=assert[idx(b(-631876+603298),((-1763009-(-792448))+1739560)+(-184402+29449860627436))]wrap=rawlen[newpath]size=m==wrap value=size void=size and-610914+1992584 or 1087549-625623 else void=value and-806011+2482497 or 10183610-604316 end else value=assert[idx(b(127084+-155379),7954598735822-(-576117))]void=tmpname[value]size=yield(1343680-(-1038374),{collectgarbage[415039+-415038]})value=void()void=value(size)void=tmpname[assert[idx(b(-971069-(-941717)),-955962+9488495717505)]]value={}end else if void<3980987-680977 then rawlen=assert[idx(b(952186-980204),-24822+(-182028+9375915755555))]value=gmatch[collectgarbage[879983+-879982]]void=value[rawlen]value={void}void=tmpname[assert[idx(b(970798-999395),-26622+24720956743911)]]else signed=assert[idx(b(575626+-604068),(-437635+159060)+20574664639676)]rawlen=assert[idx(b(496944+-525419),(987309-246280)+6337888808022)]m=assert[idx(b(-161429-(-132471)),((27954930161201-(438637-996930))-(17560+-857352))-(-234720))]size=gmatch[collectgarbage[-374598+374599]]value=size[m]size=gmatch[collectgarbage[-372624+((-753667+1651498)+-525200)]]void=value-size value=assert[idx(b(-788191+758865),(-1060041-(1009754+(1040219+-2834901)))+(-951187+7834213739097))]size=void void=gmatch[collectgarbage[-313641-(209446+-523095)]]wrap=tmpname[rawlen]rawlen=assert[idx(b(-180878-((623022+225912)-1001083)),12943573528791-(-148478-287367))]m=wrap[rawlen]short=gmatch[collectgarbage[-371193+371202]]print=assert[idx(b(69605+-97639),84124+19087266457234)]newpath=short[signed]short=assert[idx(b((-694910+1127872)+((274457+726314)+-1462346)),5769548599844-251515)]rawlen=newpath[short]remove=assert[idx(b(211204-(-403826-(-643824))),29477869676200-(-153606))]bool=gmatch[collectgarbage[682519-682510]]signed=bool[print]bool=assert[idx(b((310287+(-59559+180190))-460289),31529655860749-(-240314))]short=signed[bool]print=assert[idx(b(209974+-238293),676697+(((((92978+-411928)-(-1016275+120156))+3111297092198)-900822)-(-479621)))]bool=assert[idx(b((1003361+-1696924)-(-663931)),23467686006461-987077)]signed=size[bool]newpath=short+signed bool=gmatch[collectgarbage[-110286-(-987875+((-81138+(757903-297707))+498522))]]signed=bool[print]bool=assert[idx(b(-42464-(-13420)),27721918938458-(-560588))]short=signed[bool]oldpath=gmatch[collectgarbage[1018627+(-401838+-616780)]]print=oldpath[remove]oldpath=assert[idx(b(-491156+461478),13350931553749-(-421583))]bool=print[oldpath]oldpath=assert[idx(b(-482653+454582),98645+21648353240963)]print=size[oldpath]signed=bool+print wrap=m(rawlen,newpath,short,signed)void[value]=wrap rawlen=assert[idx(b(-884040+854747),33258386840378-(-183211))]wrap=size[rawlen]rawlen=-21100+21100 m=wrap>rawlen value=m void=m and 339950+(4584771-(-575526))or 14361106-(547232+-188125)end end else if void<589992+(-171767+(-146844+3211514))then if void<-871949+4352221 then if void<3261287-(-132069)then void=tmpname[assert[idx(b((-45605-(-897999))-(456120+425738)),22027487894924-((292551+-819118)+1521155))]]wrap=nil size=nil m=nil value={}rawlen=nil else value=size void=m void=size and 13013112-(-415084)or 3590689-(((1178660-165838)+-549538)-((-1059529-(-234305))+(-293268+2037163)))end else size=number(1768597-52040,{collectgarbage[-122890-(-122891)];collectgarbage[569618-569616],collectgarbage[-589333-(-589336)];collectgarbage[(1129354-789599)-339751]})value=assert[idx(b(-905976-(114296+-990628)),99075+3142175482359)]void=tmpname[value]value=void()void=value(size)value={}void=tmpname[assert[idx(b(1008464+-1037148),13966504741499-839516)]]end else if void<-262057+3768083 then index=-685363+685364 hookfunction=remove-index seek=void apply=assert[idx(b((-130300+536915)+-435075),27986775624860-965326)]apply=size[apply]apply=apply(size,hookfunction,remove)hookfunction=assert[idx(b(-324533-(-296405)),721892+499661707273)]a=apply==hookfunction upvalueid=a void=a and 6943254-306278 or 853793+(979940-49889)else m=assert[idx(b(-359440-(-331062)),5900437763173-(-49478-(631226+-1257626)))]size=gmatch[collectgarbage[-86342+86343]]wrap=assert[idx(b(-742386+713167),-815127+7448745853499)]value=size[m]m=tmpname[wrap]rawlen=-608590+608627 wrap=assert[idx(b(-521833-(-492531)),((103545-(-29738))+883850812921)-(-1825211-(-805586)))]newpath=(66915-(1078924-370457))-(-641590)size=m[wrap]wrap=-721096-(-721133)m=size(wrap,rawlen,newpath)void=value~=m void=void and 3874262-(-589589)or-1028404+14648480 end end end else if void<956320+2770545 then if void<3212491-(-425099)then if void<-792+3584311 then if void<-976135+4538615 then object=assert[idx(b(-1014235-(-985866)),(471686+(-710920+33053434047310))-(-964244))]gsub=tmpname[object]object=assert[idx(b(969427+-998973),26720355135019-36228)]void=gsub[object]gsub=void(signed,type)void=((-1015889+((1043699+(781397+-2187158))+1544165))+9398721)-(-1714411-(-688993))else value=size void=m void=size and(403577+(-1031509-((1263012-301360)+-1227572)))+10999377 or 474019+2131474 end else value=assert[idx(b(-822355+794405),-694499+20868412563369)]wrap=assert[idx(b(-204403-(-176230)),4561786131428-140980)]void=tmpname[value]m=gmatch[collectgarbage[-542954-(-542955)]]size=m[wrap]value=void(size)void=gmatch[collectgarbage[149541-149539]]size=value m=size value=assert[idx(b(680805-709200),327520+25508649537869)]void[value]=m size=nil void=tmpname[assert[idx(b(-20368-8944),5139655301881-583632)]]value={}end else if void<3456146-(-226760)then oldpath=assert[idx(b(((348251-(660341-(630908-240810)))+(-63721-(-677202)))-720572),15322147197418-(-2079-(-834136+1811331)))]print=short value=print..oldpath void=rawlen..value rawlen=void print=nil void=5494524-421549 else size=number(5839796-(-789201),{collectgarbage[-847613-(-847614)],collectgarbage[-574371+574373]})value=assert[idx(b(506263-534806),-514312+20531732234457)]void=tmpname[value]value=void()void=value(size)value={}void=tmpname[assert[idx(b(310143-339323),-73565+33903040015396)]]end end else if void<-235637+(5058098-961662)then if void<((90262-437630)+3606593)-(-527080)then if void<(-211395+-90509)+(488336+3574368)then void=false gmatch[collectgarbage[(-387390+817306)-(-353873+783787)]]=void value=false wrap=assert[idx(b(-865119-(-837177)),19033063409166-(-442557))]gmatch[collectgarbage[-61072-(-61075)]]=value m=tmpname[wrap]void=9225133-162193 wrap=assert[idx(b(657462+(-53057+-632754)),-1024486+34574605799606)]size=m[wrap]wrap=.1 m=size(wrap)m=assert[idx(b(146174-174080),(931188732226-735049)-702692)]size=gmatch[collectgarbage[980818+(868424+(-1015728+-833510))]]wrap=true size[m]=wrap else value=assert[idx(b(319112-347462),-918545+26447327905951)]size=assert[idx(b(-536634-(387565+(546675+-1441932))),23562743315793-(-640267))]void=tmpname[value]value=assert[idx(b(-257088-(-228407)),-20548+29245346538012)]value=void[value]rawlen=assert[idx(b((-1004756+1872280)-(660651-(-235331))),-961615+(371864+10285607841400))]value=value(void,size)size=gmatch[collectgarbage[(-858739-(966505+(-287087+(-11073+-1029270))))-(-497817)]]void=assert[idx(b(328550-356642),3748080927009-(-905271))]wrap=tmpname[rawlen]rawlen=assert[idx(b((-949842-(-153231))+767244),289114+8057883131937)]m=wrap[rawlen]rawlen=.2 bool=assert[idx(b(161558+-191154),11760430372150-1037462)]signed=tmpname[bool]bool=assert[idx(b(-461929-(-432318)),23954306816035-998126)]short=signed[bool]signed=assert[idx(b(-440560-(-411903)),-883701+1002900865457)]newpath=short[signed]bool=782780+-782753 wrap=m(rawlen,newpath)rawlen=assert[idx(b(440511+-469122),(118276+14084167436289)-(-1012685))]signed=assert[idx(b((-55879-40036)+(-542527+609158)),34912495764361-589192)]short=tmpname[signed]void=value[void]signed=assert[idx(b(745824+-775194),1025440+((-230258+25233450879554)-529651))]print=((((1532744-830103)-799636)+(1024953+-1013250))-507518)-(-592838)newpath=short[signed]signed=(-1115870-(-861783))+((365143-(580375+((-427985+(-601696+-262560))-(-746652-(-676856)))))-753099)short=newpath(signed,bool,print)m={[rawlen]=short}void=void(value,size,wrap,m)value=assert[idx(b(738829-(904740-136853)),410330+637777288545)]value=void[value]value=value(void)void=-122309+6340299 end else newpath=assert[idx(b(-68250-(-40183)),(603218-314477)+((842474+-574372)+28481207641864))]value=gmatch[collectgarbage[-628468+628469]]rawlen=wrap..newpath void=value[rawlen]value={void}void=tmpname[assert[idx(b(-559654+531133),(-1722295-(-803291))+16487735135518)]]end else if void<4710684-842840 then void=short and-450640+15989917 or(14798894-(-989399))-730371 else newpath=wrap print=-156757-(886957-1043494)bool=assert[idx(b((607814-292985)-(-572950-(-916459))),5507+25445877393746)]signed=tmpname[bool]bool=assert[idx(b(-343357+((974014+((523115+-1146617)+(713759+-1936919)))+1187749)),679596+27408092837435)]void=signed[bool]type=-75935+75875 oldpath=-417878-(-417879)a=-165793+(-273707-(-246361+(-112461-80679)))seek=newpath-a bool=-40233+(-613161-(-653395))a=-400112+((897399-706311)+209074)upvalueid=seek*a newpath=nil remove=type-upvalueid type=assert[idx(b(-428372+399983),(-659394+24984155802455)-(-2018172-(-982487)))]signed=void(bool,print,oldpath,remove)remove=assert[idx(b(574770+-603323),3233667675563-767090)]oldpath=tmpname[remove]remove=assert[idx(b(-346036-(-318162)),-599487+(-371128+14520401339342))]print=oldpath[remove]oldpath=assert[idx(b(975847-1004924),(-578138+6851770286007)-597567)]bool=print[oldpath]remove=tmpname[type]type=assert[idx(b(819091+-848602),((483205-895721)+27847100712566)-(-1257512-(-738826)))]oldpath=remove[type]remove=assert[idx(b((1082713-74609)-1036633),21068334025313-(-1310324-(-712159)))]void=assert[idx(b(942341-971588),(-54826-269938)+13729113592124)]void=short[void]print=oldpath[remove]oldpath=.3 remove=true void=void(short,signed,bool,print,oldpath,remove)signed=nil void=456037+14152679 short=nil end end end end end end else if void<-490040+6635104 then if void<4080673-(-939721)then if void<(211852+((-39456+92737)-733637))+4988387 then if void<280281+(-884025+4766234)then if void<4086317-38545 then if void<246272+3789626 then if void<(385337+-421563)+4056746 then m=gmod()size=gmod()gmatch[size]=cls[-2815-(-2816)]rawlen=assert[idx(b(805457+(-1562364-(-264686-464218))),(-930435+1186206)+19270935317659)]gmatch[m]=cls[-700852-(-700854)]void=assert[idx(b(726332+-755120),991767+21190798482207)]value=tmpname[rawlen]rawlen=assert[idx(b(-749458-(-720243)),14868877268380-(1573882-867969))]wrap=void void=value[rawlen]rawlen=assert[idx(b(-114549+85800),786959365513-581207)]value=void(rawlen)rawlen=gmod()gmatch[rawlen]=value newpath=wrap value=assert[idx(b(449038+(-621739+143072)),844321+((((((600197-(-68060))+25050581687614)-591331)-(-841911))-607364)-(-997001)))]void=gmatch[rawlen]void[value]=newpath value=assert[idx(b(-986538+(208509+748844)),-528611+3767428313526)]void=gmatch[rawlen]newpath=gmatch[collectgarbage[-28402+(-299355-(-89241-238517))]]void[value]=newpath newpath=assert[idx(b((983047-915668)+-95333),27538863799471-150996)]void=gmatch[rawlen]value=assert[idx(b(138303-167600),(1298433285582-354862)-423590)]value=void[value]value=value(void)value=tmpname[newpath]newpath=assert[idx(b(268439+-296984),(512501-(378892-(-487897)))+16691059311544)]void=value[newpath]newpath=math((912959+12583293)-(-565002),{rawlen})value=void(newpath)newpath=assert[idx(b((-510485-(-426498))-(-55095)),16880046214728-625823)]value=tmpname[newpath]newpath=assert[idx(b(((284992+((-508329+1176192)-673266))-994187)-(-339007+(619770+-966329))),859015+26609496538675)]void=value[newpath]rawlen=class(rawlen)newpath=yield(9282899-(((129048-(-420833+1210546))+1728308)-(450397+-9739)),{collectgarbage[-1706-(-1708)];size;m;collectgarbage[(-789255+769820)-(-19438)]})m=class(m)wrap=nil value=void(newpath)size=class(size)value={}void=tmpname[assert[idx(b(621194+-650640),730299+24324695059641)]]else arr=assert[idx(b(-224225+195312),2887969933853-(-491640))]load=tmpname[arr]void=(-989982+1687234)+12751283 arr=assert[idx(b((952739+-992394)-(-10143)),1032837+25489926265401)]export=load[arr]arr=assert[idx(b((-911698+449193)-(-433813)),6145830962430-(-631407))]load=export(m,wrap)load=tmpname[arr]arr=assert[idx(b(-366711-(-338082)),-743985+4025381713719)]export=load[arr]load=export(m,type)export=assert[idx(b(-150048+(1047649-(268114-(-657463)))),-261253+3283089900451)]wrap=export end else void=value and 882981+631218 or-139451+12502695 end else if void<(941595+3978737)-(681365+103588)then if void<-233239+(4429671-68605)then remove=signed void=assert[idx(b(769135+-797642),6900256087681-105382)]void=size[void]void=void(size,remove,remove)type=void void=newpath and 5116627-(-662048)or-878775+15267530 else print=assert[idx(b((-680398-(-249674))+((816737+-1249958)-(-835019))),25152328821319-(-830642))]bool=tmpname[print]print=assert[idx(b(447849+(((-467211+1094227)+-454277)-649379)),796124+32969847068735)]void=bool[print]bool={void(signed)}void=tmpname[assert[idx(b(((-736931+-597259)-(-397697))+908509),-14279+(751482+(295913+1630056743336)))]]value={rawequal(bool)}end else bool=assert[idx(b(773644+-802708),14810435345472-(-120183-842889))]size=assert[idx(b(-266843+237936),177068+(9853367731652-(-492934)))]value=assert[idx(b(-408497-(-576601+197018)),(1029416+23725265865981)-162781)]void=tmpname[value]value=assert[idx(b(((-80273+-231442)-(-736023))-452889),19803821943269-(-356696))]rawlen=assert[idx(b(-308065+(-231013-(-509499))),-614357+(7175198710804-(507295-65214)))]value=void[value]value=value(void,size)size=gmatch[collectgarbage[213207+-213206]]remove=-705247-(-705318)wrap=tmpname[rawlen]rawlen=assert[idx(b(-984203+955160),82893+21295660017562)]m=wrap[rawlen]oldpath=(163468-(-447383))-610780 rawlen=.4 print=assert[idx(b((256355+-95718)+-189022),(419790+-1464170)+28385132481453)]signed=tmpname[bool]bool=assert[idx(b(313619+(-622051-(-1085166-(-804786)))),27130271711447-(55190+-363348))]short=signed[bool]signed=assert[idx(b(-849526-(-820500)),11816849194615-884058)]newpath=short[signed]wrap=m(rawlen,newpath)bool=tmpname[print]print=assert[idx(b(-897058-(-869000)),16902834163919-35872)]short=assert[idx(b((((1462174-589638)-778323)+-28217)-94034),(335418-470320)+15378553453153)]rawlen=assert[idx(b(-495496-(-465833)),((34940451714826-(-383007))-15614)-(-214458))]newpath=-923448+923448 signed=bool[print]void=assert[idx(b(336072+(-977547-(-613518))),5981513063128-(-161841+(569293-842693)))]void=value[void]print=(1845365-911732)+((-1045465+1991283)+-1879207)bool=signed(print,oldpath,remove)m={[rawlen]=newpath,[short]=bool}void=void(value,size,wrap,m)value=assert[idx(b((-904102+(385518-(-972051)))+-481364),28190986249020-(299990+-51583))]value=void[value]value=value(void)value={}void=tmpname[assert[idx(b(((-16720-514712)+(128304-(-708491)))+-334812),25426903409631-(487924-(-183118)))]]end end else if void<3741111-(-716957)then if void<(544750+3693956)-(-160404)then if void<3622755-(-613698)then value=assert[idx(b(175209-204382),(13065990933243-((-351574+691414)+-117785))-(175752+-616134))]void=tmpname[value]size=number(643597+(815377+10271070),{collectgarbage[-767274+767275];collectgarbage[-23048+23050],collectgarbage[-94740+94743]})value=void()void=value(size)value={}void=tmpname[assert[idx(b(-324896+296881),133605+26769457852172)]]else void=tmpname[assert[idx(b(-346320-(563593-880525)),(29329361539057-400639)-(-90436))]]value={m}end else wrap=assert[idx(b(-437432+409042),33108139926572-((-578745+(1014091-578304))+438094))]void=gmatch[collectgarbage[(-812014-14197)+826212]]value=assert[idx(b((-1497414-(-600112))-(-868984)),-367794+29529084824285)]m=gmatch[collectgarbage[-322299+322301]]size=m[wrap]void[value]=size void=gmatch[collectgarbage[(-37750-(324255+607072))+969080]]value=gmatch[collectgarbage[-388457+388461]]m=gmatch[collectgarbage[120165-120163]]wrap=assert[idx(b(205621-((((((-1156592-(-885773))-(((244562-688327)+-410285)+861828))+-933398)-(-54478))-(-863055))+528843)),-1039114+18608796998549)]size=m[wrap]void[value]=size void=tmpname[assert[idx(b(562468+(-936308-(-344437))),30792659730007-(-372213-(-367653+489556)))]]value={}end else if void<-448941+4929611 then newpath=477201-477163 rawlen=(221650-941457)-(-719844)void=gmatch[collectgarbage[208532-(902942+-694411)]]wrap=assert[idx(b(-985755-(-956353)),(953162-754381)+10262638375721)]m=tmpname[wrap]wrap=assert[idx(b(721546-750346),2416918988523-356389)]size=m[wrap]value=assert[idx(b(-938918+910780),33523880651255-(-277463))]wrap=(1593028-1028776)+-564215 m=size(wrap,rawlen,newpath)size=assert[idx(b(309122-338145),-486447+9613424746815)]void[value]=m value=tmpname[size]size=assert[idx(b((((1014945+-606577)+372195)+-1333580)-(-523894)),(388555-621737)+8114070369186)]void=value[size]size=-382978-(-382978)value=void(size)void=599272+2909505 else value=assert[idx(b(-572504-(-543277)),(((-366537+430440)+7618078216347)-905948)-(-284801))]void=tmpname[value]size=yield(2391383-817509,{collectgarbage[-758406+758407];collectgarbage[(-816620-(-774479+-16982))-(-964857-(-939696))];collectgarbage[237599+-237596];collectgarbage[(-1255326-(-805418))-(-449912)];collectgarbage[200607+-200602],collectgarbage[(-1261707-(-338178))+(1199177-275642)],collectgarbage[(122177+-386830)+264660];collectgarbage[385422+-385414],collectgarbage[473890-473881];collectgarbage[612192-612182],collectgarbage[-234947+(707173-(625559+-153344))]})value=void()void=value(size)void=tmpname[assert[idx(b(-534002-(-504973)),30793715763224-(-465710))]]value={}end end end else if void<3946647-(-722281)then if void<3686453-(-870633)then if void<(904601+-396098)+4031750 then if void<1005647+3531773 then size=cls[-976450+(-170958+1147409)]value={size}void=tmpname[assert[idx(b((1139521-600942)-(-94849-((610050+-325348)+(-191162+-756167)))),972894+6019434927225)]]else rawlen=assert[idx(b(211937+-240042),((326177+-849884)+56553)+239385355188)]value=gmatch[collectgarbage[57321-57320]]void=value[rawlen]value={void}void=tmpname[assert[idx(b(556792-584949),-289102+22019748567414)]]end else newpath=assert[idx(b((-224567+(572119+86737))-462179),9742+27985966637471)]short=assert[idx(b(618664+-648353),(1086113-158338)+((-20109+-709542)+(-695446+16003443426807)))]rawlen=assert[idx(b(-1076233-(-1046914)),34571864436702-698393)]wrap=tmpname[rawlen]short=wrap[short]rawlen={short(wrap,newpath)}value=m(rawequal(rawlen))wrap=value newpath=void signed=assert[idx(b(171493+-200900),34227664231097-741045)]value=nil short=tmpname[signed]void=short and 342932+8397183 or 6630461-(-412156)rawlen=value value=short end else if void<4011708-(-650424)then void=868246+12596205 bool=nil print=class(print)else void=searchpath void=index and(819924+-1281342)+2335722 or((-75640-(-810737))+-139192)+11633897 end end else if void<-724606+5697160 then if void<737750+(4320111-196319)then if void<5538149-816303 then oldpath=assert[idx(b(-369953-(-341714)),-563850+(565654+(13333433946138-(-631191))))]bool=void print=assert[idx(b((-963037+(-436190+2262303))+-891763),915940+34213005228349)]print=newpath[print]print=print(newpath,oldpath)signed=print void=print and(12704767-(-757371))-259337 or-426603-(-962806)else newpath=223424+(-637076-(-413653))rawlen=m+newpath value=size[rawlen]rawlen=assert[idx(b(-336810-(-308932)),(936082145113-97067)-(-228237))]void=value==rawlen void=void and 14827217-106176 or-28991+7151074 end else increment=gmod()loadlib=gmod()signed=class(signed)hasnext=gmod()loadfile=false close=class(close)gmatch[increment]=loadfile loadfile=false type=class(type)obj=gmod()dir=assert[idx(b((-1012376-(-186515))+796783),(-964157+1529095)+31833135229799)]require=gmod()program=class(program)char=class(char)gmatch[require]=loadfile loadfile=nil setupvalue=gmod()gmatch[loadlib]=loadfile loadfile=nil gmatch[hasnext]=loadfile create=gmod()loadfile=nil dofile=gmod()gmatch[create]=loadfile hookfunction=nil apply=nil loadfile=nil gmatch[setupvalue]=loadfile loadfile={}include=gmod()gmatch[obj]=loadfile loadfile={}gmatch[include]=loadfile loadfile={}gmatch[dofile]=loadfile readlines=gmatch[bool]loadfile=readlines[dir]dir=iterator(-85046+7937839,{increment;loadlib,bool,setupvalue})readlines=assert[idx(b(858141+-886623),903543659336-(-759471))]readlines=loadfile[readlines]readlines=readlines(loadfile,dir)unsigned=class(unsigned)readlines=assert[idx(b(233626+-261778),((-599565-(-945911))+(((-828946+(-89499+17025575443042))-823080)-705251))-(-915451))]dir=onload(915308+(-49037+6467309),{require;hasnext,upvalueid;create})loadfile=io[readlines]readlines=assert[idx(b(-951954-(-923861)),4873295702362-317974)]readlines=loadfile[readlines]readlines=readlines(loadfile,dir)readlines=assert[idx(b(720435-749356),32738275492407-(45771-(-859271)))]dir=readline(6929886-94342,{size,bool;obj,include;dofile;upvalueid;path})loadfile=io[readlines]readlines=assert[idx(b(-816546+(1733627-945980)),29030739193890-(-710742))]load=class(load)readlines=loadfile[readlines]readlines=readlines(loadfile,dir)dir=assert[idx(b(-483709+455741),((16820-(-953635))+(9202830212789-(-736559)))-183838)]value={}wrap=nil factory=assert[idx(b(-473069+444946),141598716575-(-970116))]readlines=tmpname[dir]raise=class(raise)dir=assert[idx(b(-15186+-13768),474902+30339174125270)]dir=readlines[dir]dir=dir(readlines,factory)readlines=assert[idx(b(-698603+670723),30567403597402-(-560147))]loadfile=dir[readlines]factory=assert[idx(b(((-1290088-(-1000854))+-159210)+419810),370927+24275053874310)]dir=onload(-301185-(-683276),{increment;loadlib,bool;setupvalue;require,hasnext;upvalueid;create;size})readlines=assert[idx(b((-488402+-247782)-(-706633)),8389358100621-(-169043))]readlines=loadfile[readlines]rawset=nil void=tmpname[assert[idx(b(-936083+907139),33077701285304-610341)]]readlines=readlines(loadfile,dir)dir=assert[idx(b((((47087-(-922053))-766760)+-370746)+140288),13281098538673-(-574440))]readlines=tmpname[dir]dir=assert[idx(b(170695-(-854186+1054013)),(-714954+15007902613565)-(-90629))]dir=readlines[dir]dir=dir(readlines,factory)searchpath=nil readlines=assert[idx(b(73074-101185),1438172156301-327019)]loadfile=dir[readlines]export=class(export)readlines=assert[idx(b((-132659+(-915182-(-721907)))+296312),20840314125803-(-223251))]dir=readline(835004+(758483+1218893),{increment;require;size})readlines=loadfile[readlines]readlines=readlines(loadfile,dir)readlines=assert[idx(b(-579107-(-550933)),34340695656465-(58205-(-455949)))]loadfile=io[readlines]os=class(os)readlines=assert[idx(b((-92181-(-769910))+(-156342+-550428)),430586+(909729+(((147885-888412)+1218347)+18644633047225)))]dir=number(-898563+4613745,{size,upvalueid})readlines=loadfile[readlines]m=nil oldpath=class(oldpath)readlines=readlines(loadfile,dir)dir=math((110827-(-432951))+14870419,{upvalueid})readlines=assert[idx(b(63126-91506),722589+5575443376257)]loadfile=io[readlines]readlines=assert[idx(b(283783+-313286),5175814010355-(405780+-856333))]readlines=loadfile[readlines]readlines=readlines(loadfile,dir)dir=assert[idx(b(391925-421286),8997258677811-616706)]read=nil readlines=gmatch[isWindows]loadfile=readlines[dir]readlines=assert[idx(b((1108608-724466)+-412112),18554287454779-(-533476))]create=class(create)readlines=loadfile[readlines]dir=_G(-416552-(-636164),{isWindows})ipairs=class(ipairs)require=class(require)readlines=readlines(loadfile,dir)dir=assert[idx(b(-804546+775500),555930455728-(-217376))]readlines=gmatch[isWindows]factory=_G(42633+(-537859+15802927),{newpath})loadfile=readlines[dir]readlines=assert[idx(b(-818937-(-789395)),-469740+10030315887759)]dir=readline(-403749+3595064,{isWindows})readlines=loadfile[readlines]readlines=readlines(loadfile,dir)dir=assert[idx(b(1013350+-1042585),28115977017044-(-613799))]readlines=gmatch[isWindows]getinfo=nil loadfile=readlines[dir]readlines=assert[idx(b(605038+-634531),8984918686771-(-679225))]dir=number(8086958-(-635438),{isWindows})readlines=loadfile[readlines]readlines=readlines(loadfile,dir)dir=assert[idx(b(-109167-(-80904)),12591792576785-(((622521+381596)+-1004841)+-816708))]readlines=gmatch[isWindows]loadfile=readlines[dir]double=nil readlines=assert[idx(b(681569+-711224),225605+(((34757757764924-(-227622))-(-42114-675617))-(-768339-59230)))]loadlib=class(loadlib)readlines=loadfile[readlines]dir=number(16099216-707692,{isWindows})readlines=readlines(loadfile,dir)readlines=gmatch[isWindows]dir=assert[idx(b(813262-842330),665362+20723371602085)]loadfile=readlines[dir]rawget=nil dir=iterator(3724289-(-574521+((248904-(-738258))+-169495)),{size;remove;isLinux,seek})const=class(const)readlines=assert[idx(b(-146764-(-117155)),-866462+20713114787980)]readlines=loadfile[readlines]readlines=readlines(loadfile,dir)dir=assert[idx(b((-76864-804109)-(-324611-((4496+93021)+(612634+-183007)))),2294090075053-679484)]readlines=gmatch[int]loadfile=readlines[dir]dir=yield(12565027-(-763982),{int})readlines=assert[idx(b((133844+-959691)-(-797948)),(11389880815442-(-6884))-(-755996))]readlines=loadfile[readlines]resume=class(resume)readlines=readlines(loadfile,dir)readlines=gmatch[int]dir=assert[idx(b(((-2027917-(-679722))-(-675999))-(-642660)),30978226291969-389260)]setvbuf=class(setvbuf)loadfile=readlines[dir]readlines=assert[idx(b(287697+-316683),29495470045224-(((-418692+321281)-651083)+443952))]dir=_G(246237-(-170912),{int})randomseed=class(randomseed)readlines=loadfile[readlines]readlines=readlines(loadfile,dir)dir=assert[idx(b((49174+434892)+-512632),(420057+(18139497931841-(360928+-651464)))-323827)]readlines=gmatch[int]getupvalue=class(getupvalue)loadfile=readlines[dir]dir=number(16964500-(1005627-((317752+321414)+-605022)),{int})readlines=assert[idx(b(925842+-954769),(((707451-(-90806))+-567370)+26483764135830)-(581482+-430851))]readlines=loadfile[readlines]readlines=readlines(loadfile,dir)setupvalue=class(setupvalue)dir=assert[idx(b(-540815-(-511685)),8552202624174-(-511744))]readlines=gmatch[int]loadfile=readlines[dir]readlines=assert[idx(b(-720506+(475323-(-217201))),(3364424710522-(-291436))-288418)]dir=math(14979553-(-937114),{int})readlines=loadfile[readlines]readlines=readlines(loadfile,dir)readlines=gmatch[int]dir=assert[idx(b(466451-495768),11052140700296-(-904233))]loadfile=readlines[dir]readlines=assert[idx(b(-405998+377892),17692413384672-(-194890))]write=class(write)isWindows=class(isWindows)loadstring=class(loadstring)dir=_G(968702+14560763,{size;remove})seek=class(seek)readlines=loadfile[readlines]arr=nil readlines=readlines(loadfile,dir)dir=assert[idx(b((((674487-537902)-(-366469-(106056+-860243)))-(-191752))+(-409302-(-439634))),18138255506034-(-113262))]rawlen=nil index=nil readlines=gmatch[path]loadfile=readlines[dir]dir=iterator(10894594-(-794407),{path})tmpfile=class(tmpfile)readlines=assert[idx(b(40079+-68317),674524+31959461621030)]readlines=loadfile[readlines]readlines=readlines(loadfile,dir)dir=assert[idx(b(-497844+(1405404-935608)),(618698-406435)+23801738786750)]readlines=gmatch[path]loadfile=readlines[dir]readlines=assert[idx(b(285755-314879),(936869+-1144871)+2089049095837)]size=class(size)dir=number(94759+5080345,{path})object=class(object)readlines=loadfile[readlines]readlines=readlines(loadfile,dir)int=class(int)readlines=gmatch[path]dir=assert[idx(b((267973-559878)+263864),34549+5597689813256)]loadfile=readlines[dir]io=nil loader=nil readlines=assert[idx(b(171719+-201206),-272240+29230768569306)]readlines=loadfile[readlines]gsub=class(gsub)dir=iterator(((669704+-332569)+(-93989-(391329+((-1264202-(-791850))+(136676+382117)))))+264572,{include;obj;dofile;bool;upvalueid})hasnext=class(hasnext)readlines=readlines(loadfile,dir)dir=assert[idx(b(249380-278505),-903794+17637794135460)]readlines=gmatch[newpath]loadfile=readlines[dir]readlines=assert[idx(b(-762468+733991),(16019896914697-709203)-(-897129))]readlines=loadfile[readlines]dir=iterator(-882725+16750060,{})print=class(print)gfind=nil obj=class(obj)readlines=readlines(loadfile,dir)readlines=assert[idx(b(807631+(-916442-(-79842))),-1011001+5052160828163)]loadfile=tmpname[readlines]increment=class(increment)dofile=class(dofile)float=class(float)readlines=assert[idx(b(65050-94737),22090880504067-(-416725))]readlines=loadfile[readlines]upvalueid=class(upvalueid)dir=assert[idx(b(-994760-(-965776)),10641628358037-(-986280))]a=class(a)readlines=readlines(loadfile,dir)isLinux=class(isLinux)remove=class(remove)newpath=class(newpath)bool=class(bool)include=class(include)dir=assert[idx(b(72070+-100033),1235147699163-(-120269))]loadfile=readlines[dir]count=nil dir=assert[idx(b(-15570-13713),14659025437765-944523)]dir=loadfile[dir]readlines=nil dir=dir(loadfile,factory)loadfile=assert[idx(b(-540127-(-511920)),(2507114399980-(-994931))-(-567260+436555))]tmpname[loadfile]=dir next=nil path=class(path)end else if void<4031639-(-949202)then require=assert[idx(b(1009786-1037762),((595824+-990158)+5071098465694)-135694)]void=(6221036-(-596552+1500314))-346195 loadfile=gmatch[isLinux]increment=assert[idx(b(627851+-656925),-941924+31644636235024)]loadfile[increment]=require else short=m signed=assert[idx(b(-291786-(-263447)),((34129707974972-(-718110))-((-654022-(-489662))+234537))-(17138+-33476))]value=tmpname[signed]signed=assert[idx(b(956016+-984324),(73863+612242)+13609306948751)]void=value[signed]bool=10425+-10298 signed=-973940-(-87963-886009)value=void(signed,bool)bool=assert[idx(b((775682+((-1658065-439482)-(-986819)))+307136),-376026+2419526434422)]signed=value value=tmpname[bool]bool=assert[idx(b(-388159-(-359894)),15280581855437-(71493-(-590741)))]void=value[bool]value=void(signed)bool=value value=-598512+598544 void=short-value value=bool signed=nil short=nil bool=nil size[void]=value void=(418748-(-258124))+10435221 end end end end else if void<-238267+5834889 then if void<(540029+3933470)-(-779207)then if void<(855461+4604600)-298781 then if void<5423268-277905 then if void<5026275-(-74827)then short=short+signed print=not bool value=short<=newpath value=print and value print=short>=newpath print=bool and print value=print or value print=4420769-771073 void=value and print value=211230+9518660 void=void or value else size=assert[idx(b(854588-882652),192933+2190549107098)]value=tmpname[size]size=assert[idx(b(-377415-(-347946)),-204733+22898136631639)]m=assert[idx(b(-851888+(1114001-290011)),-252709+3838430753315)]void=value[size]size=tmpname[m]value=void(size)size=assert[idx(b(((856767-((-257554+-296693)-(-375595)))+-144573)+-919513),691934+19941310634243)]value=assert[idx(b(-183815-(-155912)),12106246803775-657244)]void=tmpname[value]value=void(size)void=-479029+12606007 end else size=number(-764895+7894559,{collectgarbage[-17258-(-17259)]})value=assert[idx(b(-169690-(-141554)),667960+18254612635901)]void=tmpname[value]value=void()void=value(size)value={}void=tmpname[assert[idx(b(398874-427170),13101419578777-881343)]]end else if void<(-767143+463747)+5505310 then if void<849044+4325835 then newpath=assert[idx(b(-245408-(-216204)),16163847849698-508060)]m=assert[idx(b(893847+-922934),505799+(32269577293509-(-795482)))]wrap=-622949-(-802211+179260)void=tmpname[m]m=void(wrap)bool=(1434049-1009531)-(-718169+1142747)value={}void=gmatch[size]signed=-337884+337885 rawlen=tmpname[newpath]newpath=assert[idx(b(563886+-592518),27651476657538-(((409703-529803)-718411)+576235))]wrap=rawlen[newpath]newpath=(-1378548-(-727932))-(-650617)short=((701925+-184291)+-1401848)+(96670-(-787564))rawlen=wrap(newpath,short,signed,bool)m=assert[idx(b(447244+(-4865-472033)),8749306034844-(-950714-(-941680-(-943293))))]signed=assert[idx(b(-457215-(-429134)),21314721413990-587580)]short=tmpname[signed]signed=assert[idx(b(-901097-(-873163)),5130927437869-(-18150))]newpath=short[signed]bool=assert[idx(b(-1031755-(-1003013)),26388180547707-586434)]short=assert[idx(b(-230596-(-202174)),((159171+(-1549342-(-983232)))+10316517530472)-(-942982))]wrap=newpath[short]signed=tmpname[bool]bool=assert[idx(b(867962+-897407),(13992842227542-(-278763))-(-322827))]short=signed[bool]signed=assert[idx(b(-1008021+979485),32248910296057-439532)]bool=math(35292-(-432926),{size,collectgarbage[-11019+11023]})newpath=short[signed]short=.3 signed=true m=void[m]size=class(size)m=m(void,rawlen,wrap,newpath,short,signed,bool)void=tmpname[assert[idx(b((-319162+-153158)+443950),3913912526577-(-704381))]]else value=assert[idx(b(957144+-985176),5423115270590-844964)]size=iterator(((-782048+1344197)-(-241228))+1609304,{collectgarbage[((((1375213-637154)-(-672878))-(-1034454+1035907))-615957)-793526]})void=tmpname[value]value=void()void=value(size)value={}void=tmpname[assert[idx(b((532301+-1479761)-(-918719)),30823838662809-655519)]]end else void=assert[idx(b(646071+-674507),-989561+32416329022537)]value=wrap newpath[void]=value short=assert[idx(b((1024526-638192)+-415150),-587139+31942224190111)]value=tmpname[short]bool=assert[idx(b(-638399-(-608947)),(12854952766746-(-961738))-(-68725))]print=-569787-(-569787)short=assert[idx(b(-796038-(-768145)),(-127943+(-1413785-(-887686)))+16623553791947)]void=value[short]short=assert[idx(b(-996094+966656),-548531+33096084196156)]value=void(short)void=assert[idx(b(-106644+77968),342737+13381594172992)]oldpath=-669135+669105 short=value signed=tmpname[bool]bool=assert[idx(b(64038-92172),(88566-(-161905))+7815771289654)]value=signed[bool]bool=-701849+701850 signed=value(bool,print)short[void]=signed void=assert[idx(b(305752+-333674),12295731284910-(-628957))]signed=assert[idx(b(((411139+-643567)-(-942362))-739100),(-837439+923462)+6770140949080)]remove=711820-711819 value=tmpname[signed]signed=value()value=newpath print=assert[idx(b(((-867210-(-661097))+201487)-23330),15509631054313-(-91217))]short[void]=signed signed=assert[idx(b(-742726+(-606205+((111090-266798)+1476024))),23513314895531-(-413284))]void=assert[idx(b((-307801-(-223079))+56407),21536359707547-1005881)]short[void]=value type=(53131-154075)-(-100944)value=tmpname[signed]signed=assert[idx(b(-272785-(-243523)),-926014+((-794056+1293257)+12733250846752))]void=value[signed]signed=assert[idx(b(930729-959159),(26918267370462-(-262017))-(-1023866))]value=void(signed)void=assert[idx(b(685163+-713800),795320+4978216174971)]bool=tmpname[print]print=assert[idx(b(336138-365359),98456+(34238890082601-(-195663)))]signed=value value=bool[print]print=(441027+424750)-865776 bool=value(print,oldpath,remove,type)print=assert[idx(b(253584-282743),792969+16271999370847)]signed[void]=bool remove=519408-(1246760-727352)bool=tmpname[print]type=39746+-39746 oldpath=-251055-(-251085)print=assert[idx(b(-22355+(674323-681450)),866721+29028420923738)]void=assert[idx(b(108436+-138012),(891735+-865980)+(11652408795064-(-689237)))]value=bool[print]print=-137125+(-1011637+1148762)bool=value(print,oldpath,remove,type)signed[void]=bool remove=((322222+((13188-333516)-(-1187408-(-746501))))+(-1906634-(-84327-931785)))-(-447925)bool=assert[idx(b(659841+-689205),-769544+21740857591800)]value=tmpname[bool]print=assert[idx(b(-899912+(504119-(-367777))),(-76056+789911)+16977684710487)]void=assert[idx(b(157755+-186591),-968904+28022365057674)]oldpath=776265-776061 bool=value()signed[void]=bool void=assert[idx(b(1011966+(-812874-227713)),-924283+24825814782721)]value=413179+-413178 signed[void]=value bool=tmpname[print]print=assert[idx(b(-61822-(-33626)),-314124+(17828555534587-((-272176+740239)-(-885102+1399908))))]value=bool[print]print=-68189-(-761566+693173)bool=value(print,oldpath,remove)void=assert[idx(b((673079-1043425)+341826),26675275598430-647893)]value=true signed[void]=bool void=assert[idx(b((998945-165072)-862449),(-758706+25318057686032)-(-1311331-(-800034)))]signed[void]=value oldpath=assert[idx(b((605135+-182692)+(363409+-814682)),2636695871561-((-417579+39304)+-192134))]print=tmpname[oldpath]oldpath=assert[idx(b((672975-(-82767-(-336995)))+-447005),28570949140180-(-801146))]void=assert[idx(b(((396828-627586)+984220)+-781460),22793072495566-538583)]bool=print[oldpath]print=assert[idx(b(776342+-804421),5937174326455-(-290288))]value=bool[print]signed[void]=value void=assert[idx(b(-567772-(-538322)),18561973840691-241702)]value=(((-206919+-1504986)-(-805854))-(308560-418143))+796482 signed[void]=value void=assert[idx(b(-221085-(-191611)),4042500977393-35874)]value=size oldpath=assert[idx(b(-904123+875228),6493165472921-964381)]signed[void]=value void=assert[idx(b((((797174-(-301080))-(700152+(-260172-(-160475))))+(-1163696-154540))-(-791775)),-273728+21306466663052)]print=tmpname[oldpath]oldpath=assert[idx(b(884322-(1679506-766401)),17984569743395-270389)]bool=print[oldpath]print=assert[idx(b(121707+-151117),691516+30045306414203)]value=bool[print]signed[void]=value oldpath=assert[idx(b(-786935-(-758675)),((-556586+9727940270160)-438314)-34391)]print=tmpname[oldpath]oldpath=assert[idx(b(762635+-792123),-837003+5500649386313)]bool=print[oldpath]print=assert[idx(b(801920-830972),262291+34936932355091)]value=bool[print]void=assert[idx(b(837714+-866072),-261036+(19378258683942-910585))]signed[void]=value void=assert[idx(b(159654+((630534+(910951+-1263045))-466052)),-657457+24529978186986)]value=wrap signed[void]=value value=(884334-204376)+-679700 void=assert[idx(b(-111655+82900),-950631+(17387958630346-1037734))]signed[void]=value value={wrap}void=tmpname[assert[idx(b(854025-882378),((17470486134306-(-650641-(-995920+1073433)))-(80916-1040899))-71583)]]end end else if void<1005736+4553511 then if void<6095856-745385 then if void<792149+4498449 then value={}void=tmpname[assert[idx(b(-369966+340547),10472723068425-866016)]]else value=wrap void=rawlen void=2554289-(-541033)end else short=assert[idx(b(-1007131-(-978170)),26742984131528-(-965630))]newpath=size[short]wrap=void short=-757737+757737 rawlen=newpath>short m=rawlen void=rawlen and 10483067-(-185717)or-356777+16032629 end else if void<6025093-449750 then value=assert[idx(b(692755+-721581),21094343415511-888533)]void=gmatch[collectgarbage[851643+-851633]]m=false void[value]=m value=assert[idx(b(138902-168536),-966453+5446319533694)]void=tmpname[value]newpath=assert[idx(b(700653-729055),-122820+3661908546065)]oldpath=(2166-(130304+-651870))+(-996491+472759)m=assert[idx(b(234000-262630),11080324786142-796778)]value=assert[idx(b(-1013113-(597247+-1581966)),127156+5555978223440)]value=void[value]value=value(void,m)m=gmatch[collectgarbage[(280527-(-195590))-476109]]rawlen=tmpname[newpath]void=assert[idx(b(835509-865013),32963197948457-(-227339))]newpath=assert[idx(b(-945922+916681),217830+10661466260737)]print=assert[idx(b(528908+-557848),(-882158+(154685+-15445))+14288324551957)]wrap=rawlen[newpath]newpath=.2 bool=tmpname[print]print=assert[idx(b(-822559+794509),(-973021+1021144)+31066807504077)]signed=bool[print]print=247642+(556155-803797)bool=assert[idx(b(-3264+((-1106522-(-206470))+875250)),784681+(-732287+26453607912048))]short=signed[bool]bool=assert[idx(b((690431+((-1319653-(-91581+155213))-(-623664+-242037)))+-202123),6667278637598-(448536+507872))]rawlen=wrap(newpath,short)newpath=assert[idx(b(-796725-(-767836)),24367046768994-197068)]signed=tmpname[bool]bool=assert[idx(b(458915+-488091),365762+9586336137946)]short=signed[bool]void=value[void]bool=319157+-319157 signed=short(bool,print,oldpath)wrap={[newpath]=signed}void=void(value,m,rawlen,wrap)value=assert[idx(b(968579+((-934866+76291)+-138133)),-688576+16411256250178)]value=void[value]value=value(void)void=(-244123+-502190)+((-234834+17507004)-877704)else void=gmatch[collectgarbage[977298+(((2384+-1059823)-(-289950))-209804)]]short=rawlen short=nil bool=void(signed)signed=nil void=-427584+7323827 end end end else if void<703215+5075213 then if void<5345100-(-386134)then if void<(42006+5226500)-(-444901)then if void<5933079-235681 then m,newpath=wrap(size,m)void=m and(9746754-(-550918))-(-811792)or(-369609+-645570)+((3821450-335975)-722259)else upvalueid=not short void=-504579+783691 value=upvalueid end else void=true m=assert[idx(b(-153465-(-125510)),8009567188874-((-439671+-145914)+-299287))]gmatch[collectgarbage[830129-((2439815-566388)-1043300)]]=void wrap=assert[idx(b(123580-151706),(344306+-859402)+20010833741979)]size=gmatch[collectgarbage[583924+-583923]]value=size[m]gmatch[collectgarbage[869148-869145]]=value m=gmatch[collectgarbage[-894023+894027]]size=m[wrap]void=(-91136-(66116-(-795723)))+10735623 gmatch[collectgarbage[-545188+545193]]=size end else if void<4871393-(-872603)then short=assert[idx(b(192169-221296),397116+26657267088547)]signed=assert[idx(b(-548755+(-242869-(-763077))),-940366+8045968633823)]newpath=wrap[short]short=assert[idx(b(427169+-456652),(377595-610094)+25946337478505)]short=newpath[short]short=short(newpath,signed)rawlen=short void=992039+-472356 else load=gmatch[collectgarbage[987557+-987556]]export=load[type]void=export and-287340+(616060+3698246)or 11611783-(-202005)end end else if void<5471255-(-440759)then if void<5550232-((((932051+-1116059)-(-747908))+371553)+(-1093538-((-875120-((353629-17394)+-294118))-(1102+-1027271))))then if void<5963309-176657 then seek=assert[idx(b(988641+-1018159),(-562669+9726255484550)-580243)]upvalueid=type==seek value=upvalueid void=upvalueid and 5187310-(-512398)or((752834+-232978)-(-349770))-590514 else export=assert[idx(b(348820+(-169231-208530)),24738099280376-(-383765))]char=tmpname[export]void=12801061-(-647474)export=assert[idx(b(764237+-792137),-549566+24900525181085)]rawget=char[export]char=rawget(m,wrap)char=type rawlen=char rawget=type wrap=rawget end else value={}size=nil m=nil void=tmpname[assert[idx(b(-1030862-(((331366+(-1294429-(-302986)))+-213905)-128166)),368759+27345325716959)]]end else if void<5274246-(-772051)then value=assert[idx(b((-1034142+386224)+618377),-178581+32434094340906)]void=tmpname[value]value=void()size=_G((-634966+8184197)-(-992273),{collectgarbage[-457147+457148]})void=value(size)void=tmpname[assert[idx(b(477195+-505376),224006+21991765535771)]]value={}else short=assert[idx(b(-327496+298377),1931318911141-(-234232))]rawlen=assert[idx(b(870855-898815),(-148848+32381040257889)-(-918719))]wrap=gmatch[collectgarbage[726738+(-993480+266743)]]m=wrap[rawlen]newpath=tmpname[short]short=assert[idx(b(-605785-(-577451)),27011049979521-(-359261))]void=309672+(10640012-(-436580))rawlen=newpath[short]newpath=assert[idx(b(208367+-236634),(490321-305208)+15341026876981)]wrap=rawlen[newpath]size=m==wrap value=size end end end end end else if void<16361+6986258 then if void<(7316861-172024)-(153267+534066)then if void<-403278+6712139 then if void<-519908+6739846 then if void<691577+5527471 then if void<((-370415+-599180)+6423090)-(-1311278-(-569095))then value=gmatch[collectgarbage[767374-767373]]size=gmatch[collectgarbage[-719727-(-1709506-(-989777))]]void=value[size]value=assert[idx(b(720475+(31549+-780971)),6948258682718-405308)]value=void[value]size=nil value=value(void)void=gmatch[collectgarbage[-572697+(-593338+1166036)]]value=gmatch[collectgarbage[-608980+608982]]void[value]=size value=gmatch[collectgarbage[-906432-(-906435)]]size=gmatch[collectgarbage[411581-411579]]void=value[size]value=assert[idx(b(875712+(-231609-672876)),440638+(863822+8278716111337))]value=void[value]value=value(void)void=gmatch[collectgarbage[(905300+-1718287)+812990]]value=gmatch[collectgarbage[554098+-554096]]size=nil void[value]=size value=gmatch[collectgarbage[393903+-393899]]size=gmatch[collectgarbage[875924+-875922]]void=value[size]size=nil value=assert[idx(b((-960505+(796941-225396))+(((1490836-(1201427-528973))-940577)-(-483081))),-77995+(867453+((-75104+185823)+8275666827808)))]value=void[value]value=value(void)void=gmatch[collectgarbage[447811-447807]]value=gmatch[collectgarbage[-294422-(-294424)]]void[value]=size size=nil void=gmatch[collectgarbage[848608-(230858+((317762-(-256689))+43294))]]value=gmatch[collectgarbage[(-31900+825009)-793107]]void[value]=size void=gmatch[collectgarbage[628392-628386]]size=nil value=gmatch[collectgarbage[-728992-(-728994)]]void[value]=size value=assert[idx(b(-631816-(-602655)),(7459274745832-((-3760-(-617715))-(-227302)))-(-344761))]void=tmpname[value]rawlen=gmatch[collectgarbage[1006953-1006946]]newpath=gmatch[collectgarbage[617607+-617605]]wrap=rawlen[newpath]rawlen={void(wrap)}void=771964+5640785 m=rawlen[-688771+688774]value=rawlen[-420333+420334]wrap=value size=rawlen[-423754+423756]else void=tmpname[assert[idx(b(272092-301780),(405283+34395285877680)-((-701659+((-471961-(-863010))-106109))-(-693876)))]]value={}end else m=size gmatch[collectgarbage[-615059-(-615067)]]=m size=nil rawlen=gmatch[collectgarbage[(448310-60865)+(527108-(409260-(-492699-(-47962-(981570+-1042117)))))]]void=tmpname[assert[idx(b(709652+-738114),12538229244895-856676)]]newpath=assert[idx(b((-32773-75541)-(-79272)),(1435930-845456)+17045400534864)]wrap=rawlen[newpath]value={}rawlen=wrap()end else if void<817795+5468094 then if void<-1009216+7274238 then rawlen=assert[idx(b(-195229-(-166166)),537375+10035402063028)]value=gmatch[collectgarbage[839344+-839343]]void=value[rawlen]value={void}void=tmpname[assert[idx(b(812000-841433),-438502+1917008504749)]]else oldpath,type=bool(print,oldpath)void=oldpath and 15266134-(1952908-(779400+(878500-637446)))or 3206606-(-923378)end else void=assert[idx(b((-759111+1481163)-750368),627542+27264452504622)]signed=gmatch[collectgarbage[-990162-(-86447+-903718)]]short=signed[newpath]newpath[void]=short void=assert[idx(b((516912+-1396011)+850482),((520694+-2327270)-(-810326))+23405177940975)]signed=gmatch[collectgarbage[934335-934330]]short=signed[newpath]newpath[void]=short void=14328817-(-275529)end end else if void<5618996-(-799868)then if void<7410129-(-845991+1843284)then if void<-792261+((-717940-253038)+8136449)then void=16837147-321689 else m,newpath=wrap(size,m)void=m and(9047840-(-1010519))-744919 or(725245+-55089)+-235711 end else short=nil void=-535679+(13944731-423581)signed=nil end else if void<878681+5543940 then getinfo=assert[idx(b(((151022-(-119590))+424914)-725054),12671378381180-(-403114+1321896))]export=65354-65353 void=-536131+648556 char=906422+-906421 getinfo=size[getinfo]rawget=remove-char char=remove-export getinfo=getinfo(size,rawget,char)rawget=assert[idx(b(-692954+(37449-(-626057))),32637993945919-(759931-138308))]io=getinfo~=rawget count=io else short=nil newpath=nil void=15254678-(220701+-1210628)end end end else if void<924923+5799207 then if void<(229526+215374)+6181397 then if void<-954607+7496616 then if void<-843028+(7018989-(-231172-116394))then void=99192+4569302 path=assert[idx(b(-65745-(-36662)),515990+3981225911293)]count=type==path index=count else value=wrap void=rawlen void=15615274-(-183817)end else m=assert[idx(b((117835+803847)+-950674),-689295+31467975298483)]void=gmatch[collectgarbage[1022541+-1022539]]gmatch[collectgarbage[-228586-(-228587)]]=void void=2572329-(-447731)size=gmatch[collectgarbage[479762-479759]]value=size[m]size=value()end else if void<(205333+(-366683+7576345))-((-508879+1068672)+226102)then m=assert[idx(b(581861-610881),((-1614662-(-676201-138164))+28335109566046)-194742)]size=gmatch[collectgarbage[23412+-23411]]value=size[m]void=not value void=void and 932155+((-695662-12713)+13568393)or 13202565-(-529692)else void=145540+1638304 upvalueid=short end end else if void<6210012-(-716291)then if void<-514152+7362885 then if void<5923805-(-906046)then size=assert[idx(b(508330-536753),7974295387372-(-813490))]value=gmatch[collectgarbage[(307720-887224)-(-579505)]]void=value[size]void=void and(-626958+2660522)-(-945815)or 533704+-41135 else value=assert[idx(b(54283+((-1644487-(-836151))+(-115189-(-324197-515544)))),23280241179874-(-695867+1423163))]size=_G(((-760303+-260053)+1006619)-(-669736),{collectgarbage[-696148-(-696149)];collectgarbage[(-612215+-380394)-(-992611)];collectgarbage[-843592-((567222+-1342054)+-68763)];collectgarbage[(-1044576+541916)+502664];collectgarbage[-616545+616550];collectgarbage[-688018+688024],collectgarbage[722047+-722040]})void=tmpname[value]value=void()void=value(size)void=tmpname[assert[idx(b(-797396-(-769392)),-617000+(4871785294691-375782))]]value={}end else rawlen,signed=newpath(wrap,rawlen)void=rawlen and 5867339-287555 or-982346+6887854 end else if void<7551425-581761 then size=assert[idx(b(-944142+915127),(-216232+17051972630323)-(109603-646229))]value=tmpname[size]m=assert[idx(b(397135+-425122),-972854+25229466006738)]size=assert[idx(b(-1045997+1016648),34000275312745-(-930144+(224224+984311)))]void=value[size]size=tmpname[m]value=void(size)void=11371430-(-592716+(10056-177986))else void=assert[idx(b(211158-240251),649194+6721729390693)]signed=gmatch[collectgarbage[140234-140230]]short=signed[newpath]newpath[void]=short void=225048+13642327 end end end end else if void<(243259-(-496426))+6940040 then if void<7039370-(-120395)then if void<7362279-246058 then if void<7171364-118907 then if void<6087939-(-947471)then remove=388902-388901 value=assert[idx(b((889948+-1803277)+885405),624786+34752056715530)]size=assert[idx(b(621939+(-719129-(-69019))),-177863+8832640857418)]void=tmpname[value]rawlen=assert[idx(b(877543-906054),20867656288009-(-22210+421262))]value=assert[idx(b(-359888+331285),581853+(14322117675155-(126812+-744652)))]oldpath=-975662-(-975692)value=void[value]value=value(void,size)size=gmatch[collectgarbage[891150+-891149]]wrap=tmpname[rawlen]rawlen=assert[idx(b(870900+-899449),(-1027482+((13079577219732-482804)-763209))-118123)]m=wrap[rawlen]void=assert[idx(b((756105+-593349)+-191189),(-135018-(-1005123))+28268859143596)]bool=assert[idx(b((565555+-612772)+17640),((4490610251501-47880)-(-632864))-881004)]rawlen=.1 signed=tmpname[bool]bool=assert[idx(b(925712+(((807626+-974632)+-1380101)-(-592169))),484996+29870632728476)]short=signed[bool]signed=assert[idx(b(920892+-949420),8631123416959-(-715772))]newpath=short[signed]signed=assert[idx(b(-266347+237493),34153047480425-1001622)]wrap=m(rawlen,newpath)short=tmpname[signed]rawlen=assert[idx(b((-759774-142302)+873518),19792791547658-(-13708))]void=value[void]bool=264467+-264437 print=-319702+319702 signed=assert[idx(b(793610+(((-1015545+940504)+1017542)+-1765017)),(22287808336391-869754)-243167)]newpath=short[signed]signed=(-1038231-(-3163-371618))-(-663450)short=newpath(signed,bool,print,oldpath)print=assert[idx(b(-592308-(-563187)),-908754+(27422146768338-1046009))]oldpath=920919+-920909 newpath=assert[idx(b((-471161-(-928921))+-487005),16024999337242-(-586412+68191))]bool=tmpname[print]print=assert[idx(b(566946-594882),926445+29644265642770)]signed=bool[print]type=895388-895428 print=((-208798+296822)+-190662)-(-102638)bool=signed(print,oldpath,remove,type)m={[rawlen]=short;[newpath]=bool}void=void(value,size,wrap,m)value=assert[idx(b((29003+((-889224-((683373-(1452194-961434))-728286))+-728472))-(-1023576)),34792513537846-(908958+((874879+-857306)-262588)))]value=void[value]value=value(void)value={}void=tmpname[assert[idx(b(-1040747-(-1011638)),(828333+(25931627380880-(-731184)))-243689)]]else signed=assert[idx(b(-355233+326246),26686091497111-(-104310))]void=-775087+9515202 short=tmpname[signed]value=short end else size=gmatch[collectgarbage[187164+-187163]]signed=555100+((-766267+-5500)+216667)bool=((((462686+-605200)-(484235+-1172491))-540579)-(-252700))+-257863 short=assert[idx(b(-246406+217782),(-521456-(-1047349))+(-915530+18054398971859))]m=assert[idx(b(826782-855892),424196+15874327110879)]value=size[m]m=assert[idx(b(-543153-(-513605)),597611+(-148369+18665644444083))]size=assert[idx(b(-120628+(-252216-(-344865))),(-648409+-10876)+(-663342+24149075426339))]size=value[size]size=size(value,m)void=#size value=845505-(838651-(-6840))size=void void=size*value m=void void=70616-70606 wrap=void value=assert[idx(b((465988-(-976939+1393469))+-78625),6004989124853-(-903822))]void=gmatch[collectgarbage[-660576+(1480054-819476)]]newpath=tmpname[short]short=assert[idx(b(-383028-(-354747)),771987+7519421447016)]rawlen=newpath[short]print=m+wrap short=487294-487294 newpath=rawlen(short,signed,bool,print)void[value]=newpath short=(425277+-1063234)-(-637958)value=(-794055+922523)-128467 signed=short short=-168641-(-168641)void=assert[idx(b(850972-(613326-(-265622))),6791070899953-(-79933-(-622338)))]bool=signed<short rawlen=void newpath=size short=value-signed void=(822311+(-96438+-116921))+4464023 end else if void<7545366-419533 then newpath=-771214+771215 rawlen=m-newpath value=size[rawlen]rawlen=assert[idx(b(-497625-(-468278)),-761359+29448592558007)]void=value==rawlen void=void and 11456750-367887 or 2313145-(-492363)else value=assert[idx(b(-316037+286975),7965549591430-(-15368))]void=tmpname[value]value=assert[idx(b(797407-826196),-956529+11390968638588)]value=void[value]bool=assert[idx(b(551808+(-140781+-439565)),-33638+12346679389023)]size=assert[idx(b(879683-908149),13801318971202-(-613484))]rawlen=assert[idx(b(-473181-(-444183)),(179487-(-677494-(-856375)))+10671439388114)]value=value(void,size)size=gmatch[collectgarbage[(-1289820-(103746+-954282))-(-439285)]]wrap=tmpname[rawlen]rawlen=assert[idx(b(628735+-658294),6173454671284-710145)]m=wrap[rawlen]rawlen=.2 signed=tmpname[bool]bool=assert[idx(b(-920409+((-444182-(-755863))-((-1870401-(-873677-(-484754)))-(-901077)))),24950821181858-(-247046))]short=signed[bool]void=assert[idx(b(173766+-203303),19735798079819-(-681120))]signed=assert[idx(b(683661-712355),3077127201671-53637)]newpath=short[signed]void=value[void]wrap=m(rawlen,newpath)rawlen=assert[idx(b((((((567720-(-323858+945380))+2162122)-1048432)-(611562-(-309639)))+(-671578+348020))-(-156768)),888334+25584703301340)]newpath=520678-520677 m={[rawlen]=newpath}void=void(value,size,wrap,m)value=assert[idx(b(-718243-(-690123)),-308469+9325042870872)]value=void[value]value=value(void)void=tmpname[assert[idx(b(-594094+564842),386646+34542451496110)]]value={}end end else if void<(((-99140+1210805)-(-614025-(-597728)))-807391)+7213644 then if void<(-82878+(-44172+8293641))-806013 then if void<8093177-(424398+317411)then value=assert[idx(b(108021-(-17689-(-153625))),(242705+-1101271)+(17592651887727-(-841430)))]size=gmod()gmatch[size]=cls[878762-878761]void=tmpname[value]value=void()m=math(3399323-824176,{size,collectgarbage[591202-591201];collectgarbage[-157421-(-157423)],collectgarbage[-929210-(-929213)],collectgarbage[-316864-(-316868)]})void=value(m)size=class(size)void=tmpname[assert[idx(b(778202+-806362),(790217+33857173501652)-(-942459))]]value={}else size=assert[idx(b(591583-((-415010+(-938650+((-663571+956654)+2473594)))-792272)),869753+1325480179701)]value=assert[idx(b(-908068-(-879764)),6656647940542-(-940242))]void=tmpname[value]value=assert[idx(b(-55290+(438405+-412063)),-18819+27816090292658)]value=void[value]value=value(void,size)print=910620+(-600772-309848)type=-650707+650667 size=gmatch[collectgarbage[-288665-(-288666)]]rawlen=assert[idx(b(-532039-(-503988)),793308+34967247130011)]bool=assert[idx(b((-697024+1460929)+-791906),28990477680248-775883)]wrap=tmpname[rawlen]rawlen=assert[idx(b((-355125+((-844254+863508)+1242338))+-934752),(-441425+199451)+16560873349453)]m=wrap[rawlen]oldpath=-413253+413283 remove=((-940352-(-248184))+42251)+649918 rawlen=.1 signed=tmpname[bool]bool=assert[idx(b(-832551-(-803292)),((444776+13208756795955)-463279)-(445872+(102584-(-323082))))]short=signed[bool]signed=assert[idx(b(-1009583-(-981651)),476818340595-(-1035181))]newpath=short[signed]wrap=m(rawlen,newpath)signed=assert[idx(b((543054+68935)+-640312),8488818662743-805695)]rawlen=assert[idx(b(438949+-466938),9370771338385-(803106+-1603723))]short=tmpname[signed]bool=687219+-687279 signed=assert[idx(b(-610549-(-581211)),(286233+9874780022915)-455132)]newpath=short[signed]signed=609996+-609995 short=newpath(signed,bool,print,oldpath)newpath=assert[idx(b(1028856+-1058145),(598719+-955815)+(31163765408871-(442106+(100300-612479))))]print=assert[idx(b((-161304+510580)-378177),-41301+4205468079833)]oldpath=-939032-(-939082)bool=tmpname[print]print=assert[idx(b(443953+-472121),-1526+19815919441624)]signed=bool[print]print=((-146301+970133)+-941118)-(-117286)bool=signed(print,oldpath,remove,type)void=assert[idx(b(-739686-(-59151+-652650)),((-838673-(-557682))-(-881489-44255))+((-593798+-413179)+1325480386647))]void=value[void]m={[rawlen]=short,[newpath]=bool}void=void(value,size,wrap,m)value=assert[idx(b((947517-293831)-682501),(-12760+((212105-448687)+855104))+30487593621297)]value=void[value]value=value(void)value={}void=tmpname[assert[idx(b((-849028+457496)-(-763786-(-401881))),28206828789068-(476663-(-184904)))]]end else void=3535080-(-1495512-(-958491+(883441-394715)))oldpath=nil remove=nil end else if void<416267+(6897452-(-254428))then void=gmatch[collectgarbage[783820-783819]]value=gmatch[collectgarbage[(564674+-1242135)+(92881+584582)]]wrap=assert[idx(b(704047+-732638),(((395168+-1354116)+(1411855-(-471772-(824365-780149))))+23930444089254)-(-151076))]m=gmatch[collectgarbage[((694319+(90598+-297099))-23401)-464414]]size=m[wrap]void[value]=size void=gmatch[collectgarbage[-786654+(342647+444011)]]value=void()void=gmatch[collectgarbage[(-464495+-139328)-(-603828)]]value=void()void=tmpname[assert[idx(b(366168+-395701),7150252428739-129352)]]value={}else upvalueid=gmatch[collectgarbage[((-120466+732367)+-767356)-(-155458)]]type=upvalueid==bool void=type and 15177242-928440 or-76768+(15742809-451345)end end end else if void<7567389-(-413033)then if void<(7998643-(-265127))-389145 then if void<7829865-14189 then if void<145376+7606773 then bool=assert[idx(b((990512-392132)-627753),1024373+7064862136795)]signed=tmpname[bool]bool=assert[idx(b(-217396+189050),-397810+17281386287564)]void=signed[bool]signed=void(m,wrap)void={}bool=assert[idx(b(560537+-588777),13648072332371-(-949180))]signed=void void=tmpname[bool]remove={void(m)}oldpath=remove[-60572+60575]bool=remove[767279-767278]void=-639289+6925089 print=remove[-1040190-(-1040192)]else bool=625584-625583 void=m+bool m=void void=6331166-(-82227)end else size=gmod()m=math(181032+(8777728-406313),{size;collectgarbage[-1033026-(-1033027)],collectgarbage[(-445105-168588)-(-613695)],collectgarbage[564677+-564674],collectgarbage[((-777326-(-525070))-(-53463))+198797]})value=assert[idx(b(-417135+388446),(24979960980245-(-81942))-168176)]gmatch[size]=cls[269397-269396]size=class(size)void=tmpname[value]value=void()void=value(m)value={}void=tmpname[assert[idx(b(320409-348402),-256079+598084769024)]]end else if void<6959076-(-932940)then void=gmatch[collectgarbage[(242376+(945763+(((-2216494-(-28503))-(-965620))-(-609681))))-575447]]m=false size=assert[idx(b(344443-374041),6869348181756-(-241681))]value=void(size,m)value={}void=tmpname[assert[idx(b((-477773+962773)-(-109991-(-622956))),(116571-70384)+23188781146440)]]else bool=assert[idx(b(-596953+(1534237-966376)),-945869+11413631753687)]size=assert[idx(b((-582443+1191846)+(((419847-(1324770-876011))-1016115)-(-406502))),-285307+(303997+((((141363+-387477)-(-257586))+(115451+16566198899226))-967963)))]value=assert[idx(b(-594418-((-5390+678083)+-1238956)),935883+32356384608818)]void=tmpname[value]rawlen=assert[idx(b(-349734-(-321169)),588597+14870880859882)]value=assert[idx(b(432218-461715),(((-697233+-123475)+1264776)+11530320832821)-833991)]value=void[value]value=value(void,size)size=gmatch[collectgarbage[130540+-130537]]wrap=tmpname[rawlen]rawlen=assert[idx(b((-796541+248809)-(-519542)),((-125784-(949245+-1091144))-(870373+(160499+-1321659)))+(-135123+(27801362032511-(-815944))))]m=wrap[rawlen]rawlen=.2 signed=tmpname[bool]bool=assert[idx(b(809736+-838308),34913200540301-(-931440))]short=signed[bool]bool=-176311-(-176348)signed=assert[idx(b(447007+-476568),896830+19994501136081)]newpath=short[signed]wrap=m(rawlen,newpath)rawlen=assert[idx(b(-594908+566619),412566+34898149261100)]signed=assert[idx(b(-962503-(-934607)),((-39053-(-482580+23858))+-1206982)+27803619313531)]short=tmpname[signed]signed=assert[idx(b((((215635-(203566+-491944))-((((875691-379285)+186569)+-1484691)-((177674+-1594656)-(-446208))))-(-582626))+-946427),25523456198845-(-534153))]newpath=short[signed]signed=-58659+58696 print=312598+-312550 void=assert[idx(b(-974565+944942),-422870+24367291035226)]short=newpath(signed,bool,print)m={[rawlen]=short}void=value[void]void=void(value,size,wrap,m)value=assert[idx(b(-372871-(1019223+-1362841)),(300049+632700)+(-502130+8063024627658))]value=void[value]value=value(void)void=10333522-(-137194)end end else if void<7811386-(-384032)then if void<-663039+8848018 then if void<(1039436+6576215)-(-481152)then value=assert[idx(b(11254-40535),(-517284+514782)+(16713417790465-((-995031+((722879+-943928)+56273))-(-688974))))]void=tmpname[value]size=math(305435+3306789,{collectgarbage[-966311-(934075+-1900387)],collectgarbage[-692197-(-692199)]})value=void()void=value(size)value={}void=tmpname[assert[idx(b(-547595-(-518347)),-247877+10724593686712)]]else size=assert[idx(b(-253302-(-225052)),8175986009276-(-231676))]bool=assert[idx(b(((-815791+1407456)+209363)-830405),34030195842609-(-979997+(762497+461342)))]value=assert[idx(b((-850044+153899)+667192),21662768966887-(-138127))]void=tmpname[value]value=assert[idx(b((536602-(-209661))-(65661+708690)),9219028388283-(-997152))]rawlen=assert[idx(b(-375272-(-347185)),573742+2959398298477)]value=void[value]value=value(void,size)size=gmatch[collectgarbage[(140835-825909)-(-685075)]]wrap=tmpname[rawlen]rawlen=assert[idx(b(-523798-(-494980)),11625012847997-(-356644))]m=wrap[rawlen]signed=tmpname[bool]rawlen=.2 bool=assert[idx(b(-872531-((723460+-1650630)-(-82577))),(3490293677013-570273)-(-108776))]short=signed[bool]signed=assert[idx(b(-564749-(-536498)),-394567+8560132468619)]bool=-343094+343094 newpath=short[signed]print=-746058+746058 wrap=m(rawlen,newpath)rawlen=assert[idx(b(438784-468167),(902097-(-139654))+2333915232602)]signed=assert[idx(b((9432+156816)-195213),(-1037255+((256175+-1258532)+(-481976+2208348)))+4831769850876)]short=tmpname[signed]signed=assert[idx(b(874815-903302),29025698561642-(-1555402-(-1039031)))]newpath=short[signed]signed=((((-962963+1615802)+-695997)+207170)-(-395227+(393628-796530)))-962141 short=newpath(signed,bool,print)void=assert[idx(b(-603997+574376),12241719468432-(-239086))]void=value[void]m={[rawlen]=short}void=void(value,size,wrap,m)value=assert[idx(b(-830596+801516),-322843+((18873250576860-497592)-(-643691)))]value=void[value]value=value(void)void=tmpname[assert[idx(b(614997-643481),30789827604563-(-31673))]]value={}end else wrap=assert[idx(b(-969125+940780),-450039+(27945956114039-(567900+-1029583)))]wrap=size[wrap]rawlen=assert[idx(b(10086-39678),28887032084726-972206)]wrap=wrap(size,rawlen)value=wrap void=wrap and 14972876-(-826215)or 249754+15209415 end else if void<(27377+7809098)-(-493757)then signed=assert[idx(b(567168-596178),12147796980817-(-207270))]short=tmpname[signed]bool=(-1074480-(-196124))-(-878557)signed=assert[idx(b(-757131-(305122+-1032664)),21362210030660-(-641548))]value=short[signed]signed=-79688+79766 print=747583-747407 short=value(signed,bool,print)void=assert[idx(b((-147483+-514252)-(-632215)),(31836088514210-60494)-186337)]newpath[void]=short void=871538+4372823 else short=assert[idx(b(-1056948-(-1028091)),((36973+(-729010+862259))+-182464)+6346692377111)]signed=assert[idx(b(731125-759286),18554036624085-(-759712))]bool=assert[idx(b(((-520760+556121)+802605)-866419),(316485+24091453450941)-(-225899))]newpath=tmpname[short]bool=newpath[bool]short={bool(newpath,signed)}void=278121-(-241562)value=m(rawequal(short))rawlen=value end end end end end end end else if void<(912328+12343386)-452902 then if void<11324019-880123 then if void<770330+8457754 then if void<8180623-(-642835)then if void<123519+8556933 then if void<-140973+8685581 then if void<8384917-(-148053)then if void<332779+(7842223-(-322900))then void=value and(74568+15465578)-(-702744)or-208845+5003946 else m=assert[idx(b(-436901+408669),(419192-(954658+-643084))+4639340022574)]value=tmpname[m]wrap=-467052+(517452-50399)m=assert[idx(b(98023+(765702-(325265+566713))),22622364376309-(((1172041-623589)+(-124842+-607859))+284746))]void=value[m]m=gmatch[collectgarbage[256372+-256368]]rawlen=gmatch[size]value=void(m,wrap,rawlen)value=assert[idx(b(1029638+-1059312),(858398+10454190833777)-(-1002961))]void=tmpname[value]rawlen=gmatch[collectgarbage[-919713+(872541-(131939+-179115))]]newpath={void(rawlen)}value=newpath[(259211-817521)-(-558311)]void=-651987+15260703 wrap=newpath[721705+-721702]rawlen=value m=newpath[-61425+(93135+-31708)]end else size=assert[idx(b(495287-(((412524-(-561012))+-1582138)+1133316)),((34174+-646563)+-25301)+(566637+(482553+3038202295679)))]value=assert[idx(b(-240353-(-211342)),(250520-(-194675))+22813624675737)]void=tmpname[value]value=assert[idx(b((566500+-1080533)-(-484580)),63473+19219719324750)]value=void[value]value=value(void,size)bool=assert[idx(b(-497815+(-379961+849623)),((((573863-2882)+-1774961)-(-954931))+((((371473-(-237451))+-987177)+658460)+(-809348+702030)))+14430313704196)]rawlen=assert[idx(b(6920-36397),(-299901+15003250895089)-(-608337))]size=gmatch[collectgarbage[471532+((-365871+790975)+(-257707-638928))]]wrap=tmpname[rawlen]rawlen=assert[idx(b(222050-249998),4811868107388-648844)]m=wrap[rawlen]rawlen=.2 signed=tmpname[bool]bool=assert[idx(b(200014+-228294),781017+1685113889294)]short=signed[bool]void=assert[idx(b((1301688-906932)+-423689),23763826278019-(-442829))]signed=assert[idx(b(-483576-(-455523)),484425+(437302+(18125218647324-(-254644))))]newpath=short[signed]wrap=m(rawlen,newpath)void=value[void]newpath=201791-(-536655+738445)rawlen=assert[idx(b(793273+((-735535-968255)-(-881304))),-151257+7935599156009)]m={[rawlen]=newpath}void=void(value,size,wrap,m)value=assert[idx(b(-647534+619443),-476165+3214507043916)]value=void[value]value=value(void)value={}void=tmpname[assert[idx(b(-614963+585879),7530547574823-(-152888))]]end else if void<9642363-972997 then if void<7982264-(-625235)then rawlen=assert[idx(b(875223+-903182),-425393+13658402961074)]wrap=gmatch[collectgarbage[613382+(-433501-(-686973+866853))]]short=assert[idx(b(340200+-369598),-819582+1357470265933)]m=wrap[rawlen]newpath=tmpname[short]short=assert[idx(b(426302-455818),30593045326184-933426)]rawlen=newpath[short]newpath=assert[idx(b(239729+-268288),((-74991+-754109)+20462780651527)-(-8279))]wrap=rawlen[newpath]size=m==wrap value=size void=size and 11032711-(436991-790544)or 767585+5370851 else void=gmatch[collectgarbage[222617+-222616]]size=gmatch[collectgarbage[-206325+206327]]m=gmatch[collectgarbage[-527858-(-527861)]]value=void(size,m)size=gmod()gmatch[size]=value value=gmatch[size]void=not value void=void and 3022083-69781 or-142675+8659473 end else short=assert[idx(b(-1020912-(-992268)),18758859360237-(-709129))]newpath=gmatch[collectgarbage[-621363+(-300046+(766908-(-154502)))]]void=3543028-((762723-1046570)+353367)bool=assert[idx(b(822453+-851294),-694855+(797029+24333229659784))]rawlen=newpath[short]signed=tmpname[bool]bool=assert[idx(b((-97440+-22361)-((-940588+((486172-(-66484))-(-817360+111026)))+-408709)),998165+26077557455701)]short=signed[bool]signed=assert[idx(b(-192477-(-163568)),-251203+(23402649258884-((-688247+1951407)-(155726-(-869918)))))]newpath=short[signed]wrap=rawlen==newpath size=wrap end end else if void<(641118-548445)+8652009 then if void<(612185-570774)+8701189 then if void<616241+8114049 then value=assert[idx(b(-692431-(-663249)),((23486301990935-86283)-(-373673))-(-13446))]size=readline((1757533-(-411272))-(-461831),{collectgarbage[-71381+71382]})void=tmpname[value]value=void()void=value(size)value={}void=tmpname[assert[idx(b(-873175-((-962175-738982)-(417061+-1274429))),8576806959960-(-684239))]]else void=newpath void=value and(201081-(-25203-(-422905)))+(-405817+8951797)or-313116+6044623 end else void=char void=rawget and-1024516+6814030 or 6223750-(-911089+1378994)end else if void<(-37909+423361)+8404592 then value=assert[idx(b(-662864-(-634603)),23697433325711-(-10405-(-958860)))]void=gmatch[collectgarbage[-884174+884175]]m=assert[idx(b(174941+-203514),34362709067648-(-450715))]size=tmpname[m]newpath=assert[idx(b(726425+-754550),607348+13031574502553)]m=size()void[value]=m value=assert[idx(b(-885843+857371),601053+28525383737980)]void=tmpname[value]wrap=gmatch[collectgarbage[-407844+407845]]newpath=wrap[newpath]rawlen={newpath(wrap)}wrap={void(rawequal(rawlen))}void=-508046+14135199 value=wrap[580208+(-70452+(387892-(820926+((-371258+681128)+-233149))))]m=wrap[(184997+-608243)+423249]size=wrap[451513-451511]wrap=value else size=cls[-663352-(-663353)]value=assert[idx(b(((21462-140347)-(-235219+(1324234-837533)))+341833),-41453+4779901697260)]void=tmpname[value]wrap={void(size)}m=wrap[38112-38110]value=wrap[-119323-(-119324)]wrap=value void=not wrap void=void and 10422318-704659 or 2956626-((-188584-(-351317))-(-339726))end end end else if void<9851732-(1292466-532669)then if void<-517428+9582517 then if void<9628245-585879 then if void<276428+((-577611+(364710-(-89959)))+(-444594+9173405))then void=value and((1446834-1011460)+415198)-(271238+(-1308307-(-113937)))or 7795721-(-392774)else hookfunction=wrap..type void=2216968-(-673382)wrap=hookfunction end else value={}void=tmpname[assert[idx(b(569835-599316),(34133211021937-(-303642))-((614764-(-768793-(-518169-236104)))-(((-378615+-575383)-(-32035-309430))+1252105)))]]end else if void<451070+8637814 then size=assert[idx(b(801855-830989),688713+((28644237761928-(-589272))-(-61181)))]value=gmatch[collectgarbage[-281681-(-247564+-34118)]]void=value[size]value=void()void=tmpname[assert[idx(b(-355363-(-326237)),34064728580251-(-1008795))]]value={}else value=gmatch[collectgarbage[631963+-631961]]void=value[wrap]void=void and 277994+2997152 or(-397277+-239616)+3183441 end end else if void<9006132-(-186987)then if void<8740865-(-1241063-(-817805))then if void<21741+9073167 then void=not size newpath=rawlen void=void and-965192+2436670 or 7027118-602952 else rawlen=assert[idx(b((72544-576820)-(-481766-(-6246))),20147694523434-1024068)]size=assert[idx(b((-976712+457927)+490471),4715443947418-319868)]value=assert[idx(b(375133-404276),-616197+13450551060465)]bool=assert[idx(b(860741-889409),20936357696228-695983)]void=tmpname[value]value=assert[idx(b(809127-837752),(-1339401-(-488178))+32594607381069)]value=void[value]value=value(void,size)size=gmatch[collectgarbage[-179657-(-179658)]]wrap=tmpname[rawlen]rawlen=assert[idx(b(190796+-219099),-665361+2103798294094)]m=wrap[rawlen]signed=tmpname[bool]rawlen=.2 bool=assert[idx(b((814186+-1189924)+346076),(-1562129-(-606138))+8265460251495)]void=assert[idx(b(782290+-810677),6322079514647-(-906892))]short=signed[bool]signed=assert[idx(b(93077+-122014),67195+31936834087152)]newpath=short[signed]void=value[void]print=-744260+(415495-(-328952))signed=assert[idx(b(913578-942200),7447204621770-991701)]wrap=m(rawlen,newpath)bool=95420+-95301 short=tmpname[signed]rawlen=assert[idx(b(768115+(-1783814-(-987493))),(8747497913299-(-104013))-14624)]signed=assert[idx(b(-19343+-9792),-968868+(-606550+27698926311233))]newpath=short[signed]signed=-933993-(((237611+(617621-6061))+((-813625+-1760154)-(-1319725-(-342647))))+-186480)short=newpath(signed,bool,print)m={[rawlen]=short}void=void(value,size,wrap,m)value=assert[idx(b(-602849-(-573712)),12263903517455-659617)]value=void[value]value=value(void)void=tmpname[assert[idx(b(412947+((889702+-336064)+-995578)),847424+29171105006160)]]value={}end else value=assert[idx(b((-381199+809733)+(117448-575651)),30658397700315-(((2546667-531584)-996089)+-1457804))]void=tmpname[value]value=void(wrap)void=value and 12652479-(-642264+969911)or(662309+-918423)+2112388 end else if void<-336067+9552305 then void=_G((3754533-((-627202-(-718114))-526318))-(-332693),{})m=void void=(5720707-378993)-784637 else size=math(-684810+8250782,{collectgarbage[832862-832861];collectgarbage[-319002-(-319004)];collectgarbage[-519900-(-519903)],collectgarbage[206905-206901];collectgarbage[(104158-(-580446))+-684599]})value=assert[idx(b(-929039-(-900201)),(-792959+(871952+-423486))+19873963783582)]void=tmpname[value]value=void()void=value(size)void=tmpname[assert[idx(b(292886-321083),15369420073082-594451)]]value={}end end end end else if void<10016832-(-36674+((-386796-(-394996))-(-489473)))then if void<-747076+10074798 then if void<-340193+9627373 then if void<-982775+10265717 then if void<105609+9142710 then value=assert[idx(b(72566+(678106-779653)),-131491+28133718200113)]size=_G(298876+2291412,{collectgarbage[-751871+751872]})void=tmpname[value]value=void()void=value(size)value={}void=tmpname[assert[idx(b(-1021563-(-993087)),573872+12741660791679)]]else bool=-957496-(-957567)signed=assert[idx(b(-157772+129751),((879732+((-318396+587443)+-1760326))+695944)+32329952071221)]short=tmpname[signed]print=549299-549228 void=assert[idx(b(438841+-467445),((28785619445720-(-318198))-((-65-673583)+479203))-(-23729))]signed=assert[idx(b(477255+-505930),1002502+4890687142845)]value=short[signed]signed=((((-1883224-(-1012483-(-746976)))-(-902595))-(-337026-525488))-(-153449+(1462440-428701)))+733142 short=value(signed,bool,print)newpath[void]=short void=(5801055-(-103956))-660650 end else value=assert[idx(b((-68787-(-523603))-484342),34893361955903-480404)]void=tmpname[value]value=void()size=math(-319564+(826204+8574649),{collectgarbage[-802826-(-802827)]})void=value(size)void=tmpname[assert[idx(b(-815584+787402),702094+(-796871+(2020743230544-(-21527))))]]value={}end else if void<9761120-((-115471-329757)-(-903208))then if void<(((892456+8266355)-(-823856))-(-324809))-1012284 then newpath=assert[idx(b(-955622+926779),(14334500050174-(730354+-732816))-(-906191+(-266198+1140301)))]rawlen=wrap==newpath void=rawlen and 8350937-(809728-882116)or 687047+11907078 value=rawlen else void=tmpname[assert[idx(b(324114-352616),25861826960406-(775807+248065))]]value={m}end else void=assert[idx(b(993887+-1023480),645778+10376205018504)]void=newpath[void]rawlen=m void=void(newpath)rawlen=nil void=6414605-(-814844+816700)newpath=nil end end else if void<462559+8974835 then if void<9573127-(1020462+-844828)then if void<(472237-690900)+9584831 then short=assert[idx(b((-914510+((35291+-355147)+1677839))-472776),21934401216834-(-237020))]bool=assert[idx(b(860575-((9756-(-168475))-(-711769))),-377565+648489452927)]newpath=gmatch[collectgarbage[-641028-((471157+-1501174)+388988)]]m=void rawlen=newpath[short]signed=tmpname[bool]bool=assert[idx(b(((184189+635019)+(-911752+-671686))-(-734587)),((74701+3365335511431)-133070)-(114617-55997))]short=signed[bool]signed=assert[idx(b((-57441-(-808464))+-779201),13707676230059-(-809938))]newpath=short[signed]wrap=rawlen==newpath size=wrap void=wrap and 50482+3423026 or-821731+9495263 else rawlen,signed=newpath(wrap,rawlen)void=rawlen and 14644062-(-900170)or 5098753-731689 end else oldpath=assert[idx(b(820683+(-299603+-550152)),24337488592821-303565)]print=tmpname[oldpath]oldpath=assert[idx(b(-160934-((-737526-(-219203))-(-386819))),(741947+31127783929887)-(-663087))]signed=wrap bool=print[oldpath]signed=nil remove=#size oldpath=(54091-(-118754))+-172844 print=bool(oldpath,remove)value=size[print]void=m..value m=void void=-152978+15657189 end else if void<(759539-138418)+8907015 then size=_G(7113950-(934844+(14694-944984)),{collectgarbage[980404+-980403];collectgarbage[-42261-(-770023+(1069688-341928))],collectgarbage[-75354+75357]})value=assert[idx(b((-22697+611710)-618177),12816384121734-(-599178))]void=tmpname[value]value=void()void=value(size)value={}void=tmpname[assert[idx(b(562658+-591065),40859+32262492937101)]]else newpath=assert[idx(b(-415995+387561),31896676631450-(-158024-814619))]short=assert[idx(b(132259-160936),-600852+28334900200447)]void=-381840+5703678 newpath=size[newpath]newpath=newpath(size,short)wrap=newpath end end end else if void<911319+8978954 then if void<9356969-(-371144)then if void<265949+9337539 then if void<(-416750-((588128-(399510+403093))-251237))+9526265 then void=gmatch[collectgarbage[153264-(-855051+1008314)]]value=assert[idx(b(959321+-988199),-415640+8282001727699)]m=gmatch[collectgarbage[-702449-(-702451)]]wrap=gmatch[collectgarbage[1014375-1014372]]size=m[wrap]void[value]=size value=assert[idx(b(307739-336177),(880565+(-1005250+19291275261214))-(-1022745))]void=tmpname[value]size=gmatch[collectgarbage[-794437+794441]]signed=assert[idx(b(-497271+468513),-286972+18930276091888)]value=void(size)short=gmatch[collectgarbage[606454-606449]]size=value newpath=short[signed]short=assert[idx(b(422549-451399),(19388045690210-398173)-(-600865))]wrap=234328-234288 value=422505-((935526+(725542+-1129611))+-108953)rawlen=newpath[short]m=wrap/rawlen void=value-m m=void value=assert[idx(b((-201081-(-665379))-493386),826015+12885315199908)]void=m/size wrap=void void=769555-769555 rawlen=void void=tmpname[value]signed=gmatch[collectgarbage[(((937652+-1784177)-(-390556))-434430)+890403]]bool={void(signed)}short=bool[-982003-(-982006)]value=bool[-479646-(-479647)]newpath=bool[(-833562+859720)+-26156]signed=value void=13936475-472024 else rawlen=assert[idx(b(726633-(-132175-(-887400))),-194554+13404530964987)]wrap=assert[idx(b(-344986+316962),6110041155583-(-893407))]wrap=size[wrap]wrap=wrap(size,rawlen)void=wrap and(-755034-(-393106))+9188672 or-86080+10709085 value=wrap end else void=gmatch[collectgarbage[-624650+624651]]newpath=assert[idx(b(1018610-1047378),24728445317839-(-78207))]signed=gmatch[collectgarbage[(-1030414-(-912180))-(774398-892634)]]bool=assert[idx(b(852450-(1024030+((-729430+450876)+135671))),474435+6594475817547)]short=signed..bool rawlen=newpath..short newpath=false value=void(rawlen,newpath)print=assert[idx(b(1035522+-1064750),(504038+-554059)+((195863+163403)+8661188430322))]signed=assert[idx(b(-285214-(-255602)),8343556273835-(-900213))]value=assert[idx(b(-994066-(-965173)),770985+18548489844604)]void=tmpname[value]newpath=gmatch[collectgarbage[-137839+137841]]bool=tmpname[print]print=bool(m)short=signed..print rawlen=newpath..short value=void(rawlen)void=3217723-(933710+-170154)end else if void<8900735-(-847728)then m=nil newpath=rawlen wrap=nil rawlen=nil value=assert[idx(b(-404552+376247),19939762667825-170724)]void=gmatch[collectgarbage[467711+((1064559-358177)+-1174090)]]size=nil void[value]=newpath void=tmpname[assert[idx(b(833384-862991),-1018953+14869428086283)]]value={}else value={}void=tmpname[assert[idx(b(-285463+257228),(-731203+(766254+619211))+13084958560295)]]end end else if void<953672+9375314 then if void<(321135+-1243814)+11009352 then if void<9666466-(-310167)then value=gmatch[collectgarbage[-118143+118147]]void=value[wrap]void=void and(687428-(-357790))+3494791 or 2227887-(-241717-(-194048))else size=assert[idx(b(-674439+646015),(-370393-(-841993))+((556291+-258678)+(-236712+25873897344858)))]value=assert[idx(b(-817822+788792),25182804756414-267320)]void=tmpname[value]value=assert[idx(b(-902751+(-150303-(-1024182))),-162252+9606488138247)]value=void[value]value=value(void,size)size=gmatch[collectgarbage[341878-341877]]rawlen=assert[idx(b(-602935+(-820006+1393862)),-918382+3002246413300)]wrap=tmpname[rawlen]rawlen=assert[idx(b(-421790+(637893-244549)),-563483+17767038674409)]bool=assert[idx(b((731081-(618007-(-327590)))-(-186059)),620341313948-(-282357))]m=wrap[rawlen]signed=tmpname[bool]bool=assert[idx(b(462362+-491477),565686+4884584844754)]void=assert[idx(b(728225-757141),(127697445285-((757536+-1784599)-(-733715)))-(-539378))]rawlen=.2 short=signed[bool]signed=assert[idx(b((374680-982501)+578246),4825828198913-(-648554))]newpath=short[signed]signed=assert[idx(b(-642274-(887058+-1500806)),15601248615695-(-864654))]void=value[void]wrap=m(rawlen,newpath)bool=401436-(371491+29826)print=-686480+686667 rawlen=assert[idx(b(120011+-148138),(16640296221626-(-48133+-222908))-(-705491))]short=tmpname[signed]signed=assert[idx(b(127906+-157290),70172+23260506534937)]newpath=short[signed]signed=(701360+119576)+(830034+(-2167081-(-516128)))short=newpath(signed,bool,print)m={[rawlen]=short}void=void(value,size,wrap,m)value=assert[idx(b(292107-(152018-(-168543))),908025+(494419+25397583494542))]value=void[value]value=value(void)value={}void=tmpname[assert[idx(b(129126+-158268),((-278075+9861363772627)-(-1033123))-(1836261-883275))]]end else value=assert[idx(b(-200635+172236),25971569634321-(-1077))]void=tmpname[value]value=void()void=tmpname[assert[idx(b(-976686+947720),28356+21470815209502)]]value={}end else if void<10064031-(-275441)then signed=signed+print value=signed<=bool remove=not oldpath value=remove and value remove=signed>=bool remove=oldpath and remove value=remove or value remove=655370+3404454 void=value and remove value=7477032-(-735695+(1463170-(1638372-678496)))void=void or value else close=assert[idx(b(67731+-95952),20445198383077-505238)]write=assert[idx(b((251084-472799)-(-193380)),470051+8610313219206)]unsigned=assert[idx(b(834339+((78920-278124)+-664106)),-580173+12790646634519)]object=assert[idx(b(-917128+888723),-705376+11460988925932)]gsub=tmpname[object]object=assert[idx(b(1002377-1032044),-114080+1556871654488)]void=gsub[object]object=assert[idx(b(904772-933509),(-65866+(-295328+1087774))+19056714590506)]program=assert[idx(b((276218-127286)-177421),12957811288132-(-343059))]os=assert[idx(b(751955+-781309),934251+6770999451652)]os=isLinux[os]os=os(isLinux)setvbuf=assert[idx(b(-381087-(-352975)),(-609020+((-73934+979095)-(-198701)))+(28802580093491-(-403767)))]unsigned=type[unsigned]unsigned=unsigned(type,write,program)program=assert[idx(b(-313265-(-551403+(-715524-(-983137)))),3856757945128-202151)]setvbuf=unsigned[setvbuf]write={setvbuf(unsigned,program,close)}gsub=void(object,os,rawequal(write))os=assert[idx(b(-244227-(13814+-228996)),5759552236976-(-172811))]object=tmpname[os]os=assert[idx(b((-94199+272666)+-206359),-1004500+9035075862274)]void=object[os]object=void(signed,gsub)gsub=nil void=679194+9911159 end end end end end else if void<121173+(11420243-(-694064+505385))then if void<11866386-636314 then if void<(25111+10923640)-184164 then if void<9703640-(-910542)then if void<10415643-((-178090-703609)-(-777727))then if void<719432+9750286 then newpath=700836+-700808 rawlen=679153+(901854+-1580980)void=gmatch[collectgarbage[802040+-802039]]value=assert[idx(b(-723280+(879792+-184714)),(((-315803-(496589+-1310022))+435939)+(309233+-1105300))+7262588183797)]wrap=assert[idx(b((-401069-(-98090))+274885),510727+33983101723919)]m=tmpname[wrap]wrap=assert[idx(b(184934-213705),615905+15384404838672)]size=m[wrap]wrap=-181894-(-181921)m=size(wrap,rawlen,newpath)void[value]=m size=assert[idx(b(((948984-323233)+-928144)+(-45263+318425)),(246302+-159829)+28253332575326)]value=tmpname[size]size=assert[idx(b(48700+-77833),385128+33908103173377)]void=value[size]size=((-711256+(-227936-(-643037)))-(-1780693-(-878573)))-605965 value=void(size)void=16844393-328935 else value={}void=tmpname[assert[idx(b(-226277-(-197470)),(-495491-(882973+-1594231))+2011708820002)]]end else isLinux=nil void=6695973-(-510475+(523004+397644))remove=nil type=nil end else if void<10443104-(-215354)then if void<(10352499-(-957796))-(-15922+695486)then rawlen=assert[idx(b(-254803+226560),556842+34034788629551)]wrap=assert[idx(b(611940-641577),34920673799497-(-1040456))]void=-273056+9099800 wrap=size[wrap]wrap=wrap(size,rawlen)value=wrap else size=gmatch[collectgarbage[-488744-(-488750)]]value=size void=236939+2368554 end else newpath=gmatch[collectgarbage[-311092+311102]]short=assert[idx(b(-170331-(695394+-836840)),9094037988065-(-889063))]rawlen=newpath[short]void=16620349-(-48033+992530)m=rawlen end end else if void<(10944930-(-245574))-79756 then if void<11410606-305799 then if void<-362197+11430765 then void=tmpname[assert[idx(b(119050+-148509),847545+19533023361703)]]value={}else newpath=556548-556546 rawlen=m-newpath value=size[rawlen]rawlen=assert[idx(b(-778761-(-531449+(-494644+276797))),7375628787539-(-93379-(-841606)))]void=value==rawlen void=void and 938378+-470406 or 2121205-(-472751)end else signed=assert[idx(b(237483+((420840-899965)+213695)),((-272247+(28813155171857-(-818471)))-485304)-(-973842))]bool=assert[idx(b(((-509905+1045839)-(-361771))-926084),(1159454-398930)+31230152459765)]signed=newpath[signed]signed=signed(newpath,bool)void=signed and 997626+12929536 or 4003315-(-1621864-(-955477))short=signed rawlen=m end else if void<10701397-(-415236)then short=not newpath m=m+rawlen value=m<=wrap value=short and value short=m>=wrap short=newpath and short value=short or value short=4431949-(-556964)void=value and short value=-103201+(237383+2395618)void=void or value else value=assert[idx(b(-609833-(-581190)),126801+4314729981273)]size=assert[idx(b(-493753+465872),18410888819896-633080)]void=tmpname[value]value=assert[idx(b((-608513-(-122417+273403))+(905045-173877)),17507851030320-(-476040))]value=void[value]value=value(void,size)size=gmatch[collectgarbage[-748360-(986509+-1734870)]]rawlen=assert[idx(b((-924629-(-1490716-(-852267)))-(-256844)),956109+20178280301132)]wrap=tmpname[rawlen]bool=assert[idx(b(414141+-443318),(30478714177531-((757482+264856)-860097))-688623)]rawlen=assert[idx(b(351481+-380739),((684222+-1122198)-(-922117))+15202866171324)]oldpath=52631.5-52603 m=wrap[rawlen]signed=tmpname[bool]rawlen=.1 bool=assert[idx(b(-608588+580672),(791459+(20188006267934-(-225120)))-(-715830))]short=signed[bool]signed=assert[idx(b(-997327-(-968325)),31559588953607-909721)]newpath=short[signed]wrap=m(rawlen,newpath)rawlen=assert[idx(b(445360-473619),137630+28852296825705)]signed=assert[idx(b(305428+-333982),16121451822132-(-1943969-(-363758-682525)))]short=tmpname[signed]remove=-56089+56090 signed=assert[idx(b((-1470535-(-494847))+946075),((-210776-944450)-(-818082))+1585018342495)]bool=-33428.5-(-33457)print=-764761+764761 newpath=short[signed]signed=(1039623+-477779)+-561844 short=newpath(signed,bool,print,oldpath)newpath=assert[idx(b(-353947+325430),30594+14870269603920)]print=assert[idx(b(905611-935256),18531942913880-407345)]bool=tmpname[print]print=assert[idx(b(47216-(-493344+569291)),174371+28508317463555)]type=(-284110+-52556)+336626.75 oldpath=(61513-((354514-(717479+-677173))+659335))+912041.5 signed=bool[print]print=(694643-((-561875-(-705416))-(292339-(455526+500296))))+112381 bool=signed(print,oldpath,remove,type)void=assert[idx(b(-721548-(-692009)),762779+6318550447001)]m={[rawlen]=short;[newpath]=bool}void=value[void]void=void(value,size,wrap,m)value=assert[idx(b(283002-312059),248578+15974781484460)]value=void[value]value=value(void)void=tmpname[assert[idx(b(-923434+894105),373177+4603364083614)]]value={}end end end else if void<10840027-(-639949)then if void<-731023+12126112 then if void<-823455+12131321 then if void<-830741+12119748 then size=assert[idx(b(890135-919074),(256191+-933533)+25982587488213)]value=gmatch[collectgarbage[693798+-693797]]void=value[size]size=gmatch[collectgarbage[925183-925181]]value=void(size)void=tmpname[assert[idx(b(-1034978-(-1006366)),-1044474+18747533679092)]]value={}else short=signed void=bool void=-672462+4539030 end else void=value and 544254+5179632 or 10144557-361909 end else if void<(-1403292-(-887499))+11955362 then loadfile=gmatch[remove]loadlib=gmatch[seek]void=4464317-(-506762)hasnext=assert[idx(b(-170302-(-141506)),266954+19212404185107)]require=loadlib..hasnext loadlib=false increment=loadfile(require,loadlib)else bool=assert[idx(b(893610+(-215348+-707259)),-147016+12460826783262)]size=assert[idx(b(885216-((1749333-950237)+114408)),368324+19282756351816)]value=assert[idx(b(239950-(754367-485743)),20905132018665-(-607792))]void=tmpname[value]value=assert[idx(b(987823+-1016635),(7066957929130-374411)-(-252976))]value=void[value]rawlen=assert[idx(b(334820-364114),-851516+15792622123631)]value=value(void,size)size=gmatch[collectgarbage[-351445+351446]]wrap=tmpname[rawlen]rawlen=assert[idx(b(-389788+(-74911+435190)),810886+27826803678420)]m=wrap[rawlen]signed=tmpname[bool]void=assert[idx(b((-248572+-567393)+786976),637476+(835024+13951072151445))]bool=assert[idx(b(569170-597666),20732747382497-(-121988))]rawlen=.2 short=signed[bool]signed=assert[idx(b((-346813-195020)-(-513067)),5824990680909-118681)]newpath=short[signed]wrap=m(rawlen,newpath)void=value[void]rawlen=assert[idx(b((-778007+1436843)+-687977),26066202798723-476190)]newpath=.2 m={[rawlen]=newpath}void=void(value,size,wrap,m)value=assert[idx(b(-643685-(-615288)),(827453+(-550300-647520))+28264680812346)]value=void[value]value=value(void)void=tmpname[assert[idx(b(-377097+347531),419499+5647202567104)]]value={}end end else if void<11427117-(-773692+511985)then if void<(297727-(-281019))+(-930956+(10931700-(-589485-364526)))then if void<451112+11057843 then wrap=assert[idx(b(330766+-359436),-953846+16540402944822)]rawlen=true void=gmatch[collectgarbage[691623+(-495816-195805)]]value=void(wrap,rawlen)void=-534330+12724980 else void={}value=assert[idx(b(477755-((761393-777320)-(-522155))),-695784+7269221172018)]size=cls[-343870+(763223+-419352)]m=void void=tmpname[value]newpath={void(size)}rawlen=newpath[-820975-(-820978)]void=(887377+9108591)-622093 value=newpath[375541+-375540]wrap=newpath[140516-140514]newpath=value end else size=false void=gmatch[collectgarbage[-278300+278301]]value=assert[idx(b(-562811+533227),13068169629505-(-786570))]void[value]=size void=gmatch[collectgarbage[-832753-(-77725-(1673767-(585804+332933)))]]value=assert[idx(b((345516-(584451+(946173-622336)))-((((-517779-99899)-(-415185))+397103)-727782)),3263583715500-734694)]size=true void[value]=size void=tmpname[assert[idx(b(157214+-185766),21131245221825-(-345761))]]value={}end else if void<-299749+12018885 then value=assert[idx(b(-712745-(154619-838244)),-885937+19290954658726)]size=readline(-361279+4497782,{collectgarbage[(-520734-(-922113))-401378]})void=tmpname[value]value=void()void=value(size)value={}void=tmpname[assert[idx(b((-987184+1369052)-410116),20783399201091-32749)]]else value=gmatch[collectgarbage[-942361-(-1062406-(-120044))]]size=gmatch[collectgarbage[(-208197-840035)+1048234]]void=value~=size void=void and(-1039642+8375096)-726074 or 3283583-263523 end end end end else if void<12879996-780989 then if void<241477+11624723 then if void<11857601-18796 then if void<215819+11616122 then if void<12754614-966896 then load=assert[idx(b(406794+(-28346+(44682-451616))),3265299791453-707465)]void=239323+8504028 export=type==load rawget=export else load=assert[idx(b(-457277-(-429020)),-544150+1153722007926)]arr=assert[idx(b(-242877-(-213312)),-401399+20689049566073)]load=type[load]load=load(type,arr)void=load and 14942030-969387 or 12384340-548364 end else gsub=assert[idx(b(-173082+(727435-583466)),-280243+24364017456260)]isLinux=tmpname[gsub]void=12654157-(-180048-614330)gsub=assert[idx(b(812539-841400),536289+32887585313729)]arr=isLinux[gsub]gsub=assert[idx(b(-203691-((-572631-51337)-(-448154))),(((222765-(-722914-(-732353)))+615946)+34381981680181)-721315)]isLinux=arr(m,wrap)isLinux=tmpname[gsub]gsub=assert[idx(b(-363902-(-335439)),31278302524999-(674879+178933))]arr=isLinux[gsub]isLinux=arr(m,type)arr=assert[idx(b(602135-630111),(4115690826163-562687)-(-325165))]wrap=arr end else if void<11639978-(-218673)then size=readline(12370742-(472284-(-39066)),{collectgarbage[(-381399-418270)+799670];collectgarbage[(840726+(-789883+-966204))-(-915363)];collectgarbage[(-580363-(-400223))+180143]})value=assert[idx(b(133213-161780),(539740+18866462885482)-42505)]void=tmpname[value]value=void()void=value(size)void=tmpname[assert[idx(b((-157062-(177488+(-809536-39941)))-543541),160526+4164771148331)]]value={}else value=gmatch[collectgarbage[176792-176791]]size=gmatch[collectgarbage[958801-958799]]void=value~=size void=void and 3032689-(-735004)or 474694+(-787081+6530377)end end else if void<11549972-(-503243)then if void<12377614-369869 then if void<-761532+12650001 then value=assert[idx(b(-541788+512915),19763129477688-(-390267))]void=gmatch[collectgarbage[-563317-(-935266-(-371947))]]m=gmatch[collectgarbage[163821+-163818]]wrap=gmatch[collectgarbage[501313-501311]]size=m[wrap]newpath=assert[idx(b((-497579-(-541406))-72402),28721963860258-(-882189))]void[value]=size value=assert[idx(b(212891+(-584572+343403)),27612297277988-(-238190))]void=tmpname[value]wrap=gmatch[collectgarbage[553806+(-44306+-509498)]]newpath=wrap[newpath]rawlen={newpath(wrap)}wrap={void(rawequal(rawlen))}m=wrap[-708600+708603]value=wrap[21948-21947]size=wrap[-729041+729043]wrap=value void=193349+5411902 else oldpath=103815-103814 void=rawlen+oldpath index=-972038+972058 rawlen=void remove=gmatch[collectgarbage[286583-286577]]oldpath=remove[bool]type=gmatch[collectgarbage[292833-292826]]apply=assert[idx(b(813549-841866),721804+35041620179648)]hookfunction=984454-(-60530+1044984)remove=type[bool]type=gmatch[print]upvalueid=assert[idx(b(64530+-94097),-657185+(-356138+(29700161094870-(-5285))))]a=tmpname[apply]apply=assert[idx(b(432440+-460446),(1168917-191262)+13582265370656)]seek=a[apply]apply=157742-157742 searchpath=-860865+(149312+711583)a=seek(wrap,apply,hookfunction,index)type[upvalueid]=a apply=assert[idx(b(384698+-413254),10695545753563-590203)]type=gmatch[print]a=tmpname[apply]index=((723343+(-572622+((245603-(818690+-264362))+((904121+710684)-681427))))+-623820)+-151553 upvalueid=assert[idx(b(-610721+582206),-621525+6432431409485)]apply=assert[idx(b(-359382-(-330978)),316085+(-238707+30338994134044))]seek=a[apply]hookfunction=rawlen-index index=-171134-(-171134)apply=wrap*hookfunction hookfunction=-886001-(-886011)a=seek(apply,hookfunction,index,searchpath)type[upvalueid]=a a=assert[idx(b(-86561+57675),19714388494578-(-524500))]type=assert[idx(b(296348-325153),4302505052324-907205)]index=869235+-869235 apply=(946982-218553)+((-38203-(-127983))+-818209)hookfunction=593159+-593158 seek=tmpname[a]a=assert[idx(b(-929686+900980),27569261708001-(1031549+-1657362))]upvalueid=seek[a]a=-681334+(-1024575+1705910)seek=upvalueid(a,apply,hookfunction,index)oldpath[type]=seek hookfunction=771222-(31353+739869)type=assert[idx(b(-846800+817890),30304884719230-723463)]a=assert[idx(b(885763-913964),10909418260794-669397)]seek=tmpname[a]index=(235097+-688543)-(-453446)a=assert[idx(b(1000796-1030032),607730+6598185951298)]apply=867507-867507 upvalueid=seek[a]a=38781-38781 seek=upvalueid(a,apply,hookfunction,index)index=536614-536599 oldpath[type]=seek type=assert[idx(b(((804554-594332)+-49457)-190004),7667703624920-(-92930))]hookfunction=296323-296323 a=assert[idx(b(-711600+682947),-714834+10195306493990)]apply=-946657+(685328-(-261344))seek=tmpname[a]a=assert[idx(b(((246140-(648160-433251))+-371547)+310708),894196649119-(297665-(-106302)))]upvalueid=seek[a]a=-781422-(-781422)seek=upvalueid(a,apply,hookfunction,index)remove[type]=seek a=assert[idx(b(377443-(1134183-727530)),4919539953678-(-1031270))]type=assert[idx(b(86952-115453),839417+26580017786441)]seek=tmpname[a]apply=341508.5-(-359501+701027)a=assert[idx(b((966532+-124426)+-870360),-848743+6854327414022)]index=418464.5-(-688526+1106988)upvalueid=seek[a]a=118414+-118413 hookfunction=653304+(-235677-(-826151+1243778))seek=upvalueid(a,apply,hookfunction,index)upvalueid=515827-515826 remove[type]=seek type=size<=upvalueid void=type and-294089+2586083 or-682091+15271960 end else void=value and(13672112-(-831361+538636))-184021 or 5831171-548984 end else if void<11958127-(-103424)then newpath=assert[idx(b(-467024-(-437954)),2053271604871-334692)]rawlen=void short=assert[idx(b(923462+-952983),(15276547363389-(-463797))-(-290344))]newpath=size[newpath]newpath=newpath(size,short)void=newpath and-4583+5326421 or-154502+9701943 wrap=newpath else rawlen=assert[idx(b(335936-(227500-(-137076))),19168304024704-(787896+4767))]value=gmatch[collectgarbage[-158958-(-158959)]]void=value[rawlen]value={void}void=tmpname[assert[idx(b(-335112+306971),42907+18709163341011)]]end end end else if void<13218820-883459 then if void<11586974-(-631030)then if void<108490+12071821 then if void<493313+11635616 then value={}void=tmpname[assert[idx(b((-412963+(-187259-(-645507)))-74807),286275+(((-507110+(((688633-1007804)+131082)+787577))-(-809538))+1507947452372))]]else size=assert[idx(b(-630396-(-811231-(-210373))),34124741671348-(984035+-588102))]value=tmpname[size]m=assert[idx(b((-510512+-489008)+970230),104589419287-(-217326-(-122600)))]size=assert[idx(b((-386820-(-571904+1233599))-(-1020540)),-578095+15482109593493)]wrap=assert[idx(b(-729098+700940),15304962590082-(-864492))]void=value[size]size=_G(-170068+205265,{})value=void(size)void=assert[idx(b(-323141+293756),20074653255745-918805)]tmpname[void]=value value={}size=tmpname[m]m=assert[idx(b(-16067-12097),34609871298323-378893)]void=size[m]m=tmpname[wrap]size=void(m)void=tmpname[assert[idx(b((-410919+1297934)+(-1199266-(-45094+(771958+-1009772)))),631542+8221448872915)]]end else m=nil value={}void=tmpname[assert[idx(b((444491+-1469936)-(-996333)),(((-660795-(546656-913862))-((1826153-860258)+-1891441))+(-372858+768912))+15145266280743)]]size=nil end else if void<13248416-931326 then count=wrap..type void=16017040-760305 wrap=count else rawlen=assert[idx(b(664370+-692907),194828+16280639979764)]value=gmatch[collectgarbage[111283+(71618-182900)]]void=value[rawlen]value={void}void=tmpname[assert[idx(b(666828-696416),10787481284371-(-1504804-(-935022)))]]end end else if void<(-996536+703938)+12985640 then if void<13518681-(108114+794037)then if void<-761028+13289278 then bool=assert[idx(b(-490180-(-460838)),851104+5676897635185)]m=void newpath=gmatch[collectgarbage[((595684+(-545268+336044))-118774)-267685]]short=assert[idx(b(116828+-146475),361418+2694098235123)]rawlen=newpath[short]signed=tmpname[bool]bool=assert[idx(b(508546+-536464),884350+(25901564185161-(-762897)))]short=signed[bool]signed=assert[idx(b(824962+-854394),33928885746340-(-1035806+(1463613-(-344702))))]newpath=short[signed]wrap=rawlen==newpath size=wrap void=wrap and 4071125-(-455241+944883)or 16748+14999837 else void=428538+7994787 newpath=assert[idx(b(-350556-(-322643)),(-821020+(19950909346060-953186))-(-15459))]rawlen=wrap==newpath value=rawlen end else value=assert[idx(b((346488-(-768121+1086873))-57202),16647109738918-(-77341-(-417246)))]size=math((214355-673921)+16907242,{collectgarbage[-467943+(-160659+628603)];collectgarbage[-969733-(-969735)];collectgarbage[335924+-335921]})void=tmpname[value]value=void()void=value(size)value={}void=tmpname[assert[idx(b(265791-295212),1043959+27770402185019)]]end else if void<(-1002784+13547982)-(-233917)then void=((887195-392084)+-1288292)+2137445 else void=signed and 8406801-654618 or(((((204820+(748908+(-645339+(61552-653121))))-(-212828))+198691)-338896)+451792)+6172158 short=rawlen end end end end end end else if void<14657516-(-422814)then if void<198125+13589537 then if void<12607367-(-822837)then if void<14130965-897797 then if void<523611+12555773 then if void<12667500-(-344398)then if void<(874195+(-722920+13211818))-414830 then value=assert[idx(b(202508-(890964-660317)),4771964153881-846681)]void=tmpname[value]size=number(11763267-(353732-(-75371-(1040191-990009))),{collectgarbage[(787879+-885714)+(787862-(1180876-490850))];collectgarbage[788525-788523]})value=void()void=value(size)value={}void=tmpname[assert[idx(b(-40679-(-11534)),30026936170676-(-1108975-(-953194)))]]else rawlen,signed=newpath(wrap,rawlen)void=rawlen and-841129+13637913 or(-261586+(1669147-763948))+((-442990+163678)+8931549)end else void=tmpname[assert[idx(b((((-328388-(-727606))+-1294005)+-147309)-(-1012939)),-404917+31844983441210)]]value={}end else if void<13064885-(-130856)then if void<13480245-382337 then m=cls[-759040-(-759042)]newpath=assert[idx(b(245044-274561),-266211+10358616378976)]wrap=assert[idx(b(643674-671774),337685+10070152733772)]signed=235150-235150 size=cls[151051+(438068+(-763958+174840))]value=tmpname[wrap]wrap=assert[idx(b((-1246383-(-379553))+837495),-991402+27779106430808)]void=value[wrap]wrap=assert[idx(b(857228+-885675),30704562404312-555043)]value=void(wrap)rawlen=tmpname[newpath]bool=-213895-(-213935)newpath=assert[idx(b(-1064441-(-1034802)),-665242+23147812045636)]wrap=value value=rawlen[newpath]newpath=-446167-(-446167)short=(-25985-512564)+(385941+152808)rawlen=value(newpath,short,signed,bool)void=assert[idx(b(515154-543505),-26627+(22019375566483-(-580872)))]wrap[void]=rawlen newpath=assert[idx(b(452184-(831631-350252)),(244690+-1169507)+(22973825986040-291698))]short=880848+-881068 bool=-474359+474299 void=assert[idx(b(665936+-694021),613631+16314969545374)]rawlen=assert[idx(b(-437826-(-409740)),116487+34131760363136)]value=tmpname[rawlen]rawlen=value()wrap[void]=rawlen rawlen=tmpname[newpath]signed=-765016+765017 void=assert[idx(b(45541-74720),((-1321826-(-908840))+-452589)+9781947362582)]newpath=assert[idx(b(265685-(((972981+-1402174)-390606)+1113945)),-392985+32675174377789)]value=rawlen[newpath]newpath=-455136-(-455137)rawlen=value(newpath,short,signed,bool)signed=697763+-697725 wrap[void]=rawlen void=assert[idx(b(906828-935690),659064+21648116361201)]newpath=assert[idx(b(-315097+285723),-615743+11254658824498)]rawlen=tmpname[newpath]newpath=assert[idx(b((-51595-(-871155+1050184))+(122102-(-79921))),(-966224+(-1006217+27423791322370))-632591)]value=rawlen[newpath]newpath=602491+-602454 short=923419+-923382 rawlen=value(newpath,short,signed)wrap[void]=rawlen void=assert[idx(b(-826652-(-797563)),(285924+-970357)+2761165670623)]value=.2 short=assert[idx(b(-689540-(630750+-1290967)),14234042873468-881107)]wrap[void]=value void=assert[idx(b(-85528+56838),7958240713532-(-723394))]rawlen=assert[idx(b(696315+-724525),32877537539019-(-695584))]value=gmatch[collectgarbage[-788865-(-788866)]]oldpath=322062-322052 wrap[void]=value value=403513-403257 void=assert[idx(b((-10519+-899047)+(109406+770575)),24848887647365-(-86648))]signed=61330+-61324 wrap[void]=value value=tmpname[rawlen]rawlen=assert[idx(b(-711074-(-347603-334771)),21253561747394-318276)]void=value[rawlen]rawlen=assert[idx(b(-344562+315654),(-821897+30513360465825)-60236)]value=void(rawlen)newpath=tmpname[short]short=assert[idx(b(750169+(-1246087-(-467374))),3187073903102-(-494091-(-249316-354516)))]void=assert[idx(b(-853515+(1161959-336968)),(220825+(-1200602-(-573679-433587)))+(10374273563173-(-666517)))]rawlen=value value=newpath[short]short=-757638-(-757638)newpath=value(short,signed)rawlen[void]=newpath newpath=assert[idx(b(-852400+823919),20504229575312-(-123908))]void=assert[idx(b(670787+-700027),-150514+20098973841711)]value=wrap rawlen[void]=value print=371608-371608 value=tmpname[newpath]void=assert[idx(b(-308688+279257),32929733631060-(-964488+1158528))]signed=assert[idx(b(-1002341-(-972839)),((131634-(-481545))+30814225582949)-(-620718))]newpath=value()rawlen[void]=newpath newpath=assert[idx(b(290249+(-688047-(-368530))),3239210689447-866072)]value=tmpname[newpath]newpath=assert[idx(b((1378580-(703233-(82292+30029)))-(-561440+1377188)),-41341+8255310104182)]void=value[newpath]newpath=assert[idx(b(824388+-853943),-786404+(26560426272214-107956))]value=void(newpath)bool=1000300-(380153-(-620137))short=tmpname[signed]signed=assert[idx(b(513761-542394),15494661963466-(-661622))]void=assert[idx(b(559089+((-967799+((-325472+87152)+(291471-(-373835))))-(193069+-145722))),11922082612613-(-309568))]newpath=value value=short[signed]signed=(900670-702528)+-198142 short=value(signed,bool,print,oldpath)newpath[void]=short void=assert[idx(b(-95875+66940),(223724+-1064862)+14710858738528)]bool=(-1084289-(1039741+-1623082))-(-500958)signed=assert[idx(b(501074+-528979),1138247095834-448702)]short=tmpname[signed]signed=assert[idx(b(536343+-564264),(1811152-823403)+(906956+(830984+6570794537235)))]value=short[signed]signed=(-747764-(-50530))+697234 oldpath=-376446+376441 print=226248+-226247.5 short=value(signed,bool,print,oldpath)newpath[void]=short void=assert[idx(b(767157-796113),(7769031654374-(-618485))-(25440-(-56242)))]short=assert[idx(b(-477163-(-449201)),1574869949263-648312)]value=tmpname[short]short=value()value=(891434+(((-77989+-58685)-(-382232))+(197757+(55211-((400828+608340)+-234014)))))-614549 newpath[void]=short void=assert[idx(b(-880201+850860),(-309610+8577953954659)-(-545291))]newpath[void]=value void=m and(-570888+1315252)+7554403 or-791720+10074386 else value=gmatch[collectgarbage[-288845+288846]]rawlen=assert[idx(b(230989-259272),14325656185550-359893)]void=value[rawlen]value={void}void=tmpname[assert[idx(b(-107466-(-78015)),26253806277589-(-714998+1580632))]]end else void=bool short=signed void=(594581+(14498982-414781))-751620 end end else if void<14357273-963214 then if void<221053+13132632 then if void<((-584323-(-278189))-670817)+(-100452+14389920)then void=gmatch[collectgarbage[321449+-321446]]rawlen=assert[idx(b((-604955-(-495773))-(-79517)),-199358+8428988587507)]newpath=-868982-((-351972+-434500)+-82511)wrap=assert[idx(b(((-185104-(-191199))-858908)+823757),-781698+15215471815569)]value=size[wrap]wrap={[rawlen]=newpath}void[size]=value void=gmatch[collectgarbage[-843624-(-843626)]]value=assert[idx(b((-701624+(911464+-327489))-(-805851+717388)),-570521+20245612090069)]value=void[value]value=value(void,size,m,wrap)void=assert[idx(b((-135278-(202702+-653998))-344510),-260826+18724410570765)]void=value[void]void=void(value)void=(791021+-1227602)+(13983593-813569)else value=assert[idx(b((-290200+374436)-113479),-426154+10554924900175)]void=tmpname[value]value=void()size=yield((533083+-1335503)+10848434,{collectgarbage[-241421+241422]})void=value(size)value={}void=tmpname[assert[idx(b(-719235+689716),31252660894318-(-169365))]]end else getinfo=assert[idx(b(-818515+789217),-1010197+(11765328822825-(-273575)))]io=tmpname[getinfo]getinfo=assert[idx(b(213309-242919),25009993645487-(-1225109-(-882729)))]load=(707781-921093)-(-213315)rawget=assert[idx(b(-651509+623460),1025499+29515312934242)]path=io[getinfo]io=path(m,wrap)path=assert[idx(b(-1027768+999856),222504+21813627560970)]io=true wrap=path export=777896-777894 rawget=size[rawget]newpath=io char=remove+export export=remove+load rawget=rawget(size,char,export)char=assert[idx(b((-613908+1526816)+-941638),-806487+32986472518316)]void=12485790-(-944117+-18628)getinfo=rawget==char short=getinfo end else if void<-532187+(14351572-409553)then wrap=assert[idx(b(-851013-(-822758)),31325268217477-(265693-(-924815-(-486571))))]wrap=size[wrap]rawlen=assert[idx(b(-485403-(589137+-1045027)),18808282670921-(452767+-931488))]wrap=wrap(size,rawlen)value=wrap void=wrap and 3652081-556759 or 11864444-(476071+-670196)else void=3936424-(-109652)size=gmatch[collectgarbage[-1002101+1002103]]value=size end end end else if void<-26186+13652479 then if void<1129+13478962 then if void<13948502-485184 then if void<14043198-596809 then void=short and(206712+6989350)-910107 or(-189108+15816809)-1023355 else void=14980835-238394 end else short,print=signed(newpath,short)void=short and(1327555-652534)+1902991 or 561278+2827682 end else if void<14529009-967349 then void=value and 15644223-101234 or 9747006-458916 else value={}void=tmpname[assert[idx(b(729572+-757703),(-442110+-513914)+(366216+19554689357242))]]end end else if void<13334335-(-398064)then if void<13401816-(-314246)then if void<-836362+14523308 then m,newpath=wrap(size,m)void=m and 15812267-(-435423)or-316580+((-446368-(-863823))+14275940)else size=assert[idx(b(711813-739727),-1016464+17648006153819)]void=gmatch[collectgarbage[98497+-98495]]m=true value=void(size,m)value=assert[idx(b(835497-864675),-392623+14067371871941)]m=math(15288591-195685,{collectgarbage[-761917+761920]})void=tmpname[value]wrap={void(m)}value=wrap[-732288+732289]m=value size=wrap[-820380-(-539645+-280737)]wrap=assert[idx(b(-435783-(-406833)),11698914756502-(-629744))]value=tmpname[wrap]wrap=assert[idx(b(542073-570797),319667+31755465100136)]void=value[wrap]wrap=.01 value=void(wrap)void=m and-639290+12148037 or 13519460-(-322580)end else value=assert[idx(b((456069-(830966-(1008006-(749012-(-557584+(1695954-769808))))))+-281000),24018209246286-(331439-(-707033)))]bool=assert[idx(b(-60472-(-30837)),-34468+(20753250058704-711346))]void=tmpname[value]value=assert[idx(b(632389-660397),33497784812837-753518)]size=assert[idx(b(-543988+515773),(795918+((-281012+10211835655207)-780451))-106021)]print=-608731+608813 rawlen=assert[idx(b(((285604+-201058)-928881)+815224),-961444+29400730957076)]value=void[value]value=value(void,size)size=gmatch[collectgarbage[-1006717+1006719]]wrap=tmpname[rawlen]rawlen=assert[idx(b(510740-(116229+422871)),-607796+19722027995665)]m=wrap[rawlen]rawlen=.2 signed=tmpname[bool]bool=assert[idx(b(206322-(-95596+330130)),19060071444821-(-69768))]short=signed[bool]signed=assert[idx(b(-432715-(-404312)),(136943+9595957256015)-(852980-(1330974-(-239071+717078))))]newpath=short[signed]wrap=m(rawlen,newpath)signed=assert[idx(b(298771-327212),29276008416127-(-73279))]short=tmpname[signed]signed=assert[idx(b(693031+-722021),-505708+24917757809452)]bool=4439+((-852541+861120)-12977)void=assert[idx(b(510817-538817),(-805877+(-511296+23818131974268))-(-424110))]rawlen=assert[idx(b(-362424-(-333640)),12058072252280-(-1002850))]void=value[void]newpath=short[signed]signed=-526545-(-526556)short=newpath(signed,bool,print)m={[rawlen]=short}void=void(value,size,wrap,m)value=assert[idx(b(-57713-(-29017)),4136455660133-839196)]value=void[value]value=value(void)void=tmpname[assert[idx(b((157519+-148734)+(-746905+709668)),917778+31309927938321)]]value={}end else if void<14113859-358367 then upvalueid=assert[idx(b(819104-((((2081239-324683)-((-97064+-483876)+277667))-318562)-(-115303-(-1008952)))),18456438749819-347718)]value=tmpname[upvalueid]upvalueid=assert[idx(b(53370-81573),(144091+-184287)+13892387080262)]void=value[upvalueid]upvalueid=assert[idx(b(920349+-949547),1029466+10241598036193)]value=void(m,wrap)value=tmpname[upvalueid]upvalueid=assert[idx(b(-855840-(-826508)),323189+24996558435742)]void=value[upvalueid]value=void(m,type)void=assert[idx(b((214044+-749817)+(249901-(-257896))),1517764061999-217349)]value=false wrap=void newpath=value void=((52675+622599)+2100532)-(-114544)else void=true gmatch[collectgarbage[-187869+187871]]=void m=assert[idx(b((-836675+1064065)+-256321),920356+(977808+23681003156694))]wrap=assert[idx(b((471313+-655297)-(-155312)),-179970+14331051183269)]size=gmatch[collectgarbage[70414+-70413]]void=(968806-21154)+4334535 value=size[m]gmatch[collectgarbage[-179290-(-179293)]]=value m=gmatch[collectgarbage[-328755+328759]]size=m[wrap]gmatch[collectgarbage[-406351-(-406356)]]=size end end end end else if void<-805593+15186934 then if void<14412314-(-521112-(-958786))then if void<12856450-(-1032179)then if void<13290171-(-565916)then if void<(1036300+-360529)+13139804 then value={}void=tmpname[assert[idx(b(968046+-997578),-529881+26011514533509)]]else short=assert[idx(b((403979-432329)+(-904632+904181)),(5201279963221-(-414239))-163250)]void=gmatch[collectgarbage[-653486-(-131692+-521796)]]rawlen=assert[idx(b(454055+(-1020306+((30360+1330205)-823505))),8887436283178-(-1005895))]newpath=tmpname[short]short=newpath(size)wrap=rawlen..short newpath=assert[idx(b(((384328+-1115372)+147242)-(-555658)),(-458490+8750261418680)-(((257159+286062)-(254682-32359))-199356))]rawlen=false value=void(wrap,rawlen)value=assert[idx(b(-851124-(-822800)),743846+29912400259899)]void=tmpname[value]rawlen=gmatch[collectgarbage[(988551+-395460)+-593087]]wrap=rawlen..newpath value=void(wrap,size)void=12783576-(-243919+836845)end else bool=assert[idx(b(37650-66550),-454687+34526324144604)]signed=assert[idx(b(273791-302980),(613352+33311534598244)-(((529375+1322638)-959495)-876000))]signed=newpath[signed]signed=signed(newpath,bool)short=signed void=signed and 117496+(500562+(12426320-(636002+-1034763)))or 14979871-(-738562)end else if void<-140801+14113014 then void=short and((983879-(775962-(-869663-(-975793))))+7155312)-495262 or 13023621-(-843754)else load=wrap..type wrap=load void=13248343-(-200192)end end else if void<-703497+15003985 then if void<(-928584+(-738005+999238))+((((-182403-842386)+1914304)-228600)+14151259)then if void<15030140-1002975 then void=value and-389498+5963753 or 16295072-646919 else size=assert[idx(b((1110173-615515)-522719),-588640+24555676391227)]value=tmpname[size]size=assert[idx(b((((688823+-295082)-405899)-418009)+401819),575258+(-999957+25074973055231))]void=value[size]size=-633022-(-633023)value=void(size)value=assert[idx(b(-5256-24308),186760533960-237600)]void=gmatch[collectgarbage[-162822+162823]]value=void[value]value=value(void)value={}void=tmpname[assert[idx(b(-88754+60535),(13461564725967-157167)-8268)]]end else seek=assert[idx(b((502028+-1491292)-(((774824-(495723-(1084882-670634)))+-1747293)-(-93680))),-474208+29176841283478)]apply=assert[idx(b(-747707+719069),-684571+34472081527340)]upvalueid=tmpname[seek]seek=assert[idx(b((-532431+-327453)-(-831162)),1010218578199-677529)]type=upvalueid[seek]seek=math(16263190-(-361911),{print})upvalueid=type(seek)type=gmatch[print]a=tmpname[apply]upvalueid=assert[idx(b(-421148-((519604-403775)-508268)),(20071334983470-(-492850+((-1716545-(-743099))+1070662)))-(-690454))]apply=assert[idx(b((31842+-46311)+-14088),(990194-655941)+1644799091037)]seek=a[apply]index=((-708087-(-1120596-(-992144)))+(-686707+1938055))+-671613 apply=((761986+-1815634)-(-86937))+966811 hookfunction=-271995+272095 a=seek(apply,hookfunction,index)hookfunction=-817239-(-817494)apply=assert[idx(b((1332809-((527086+(-767539+-172877))+886675))+-887582),-257707+34633067084917)]type[upvalueid]=a type=gmatch[print]upvalueid=assert[idx(b(497734+-526234),702343+16215311625118)]a=tmpname[apply]apply=assert[idx(b(910599-939952),-78857+31482289794975)]seek=a[apply]void=8149899-622646 apply=-709459+709714 index=-516-(-771)a=seek(apply,hookfunction,index)seek=507686+-507686 type[upvalueid]=a type=gmatch[print]upvalueid=assert[idx(b(-413086-(-384265)),-788709+17736991683501)]type[upvalueid]=seek upvalueid=assert[idx(b(741083-769307),20838060074755-((-387536-(-962071))+-22621))]type=gmatch[print]seek=605793-605792 type[upvalueid]=seek upvalueid=true type=assert[idx(b((892066+-674288)+((-1048448-(-119806-372972))-(-308635))),-870792+19716408821046)]oldpath[type]=upvalueid end else if void<13511925-(-822631)then void=gmatch[collectgarbage[-571763-(-35485-536280)]]remove=oldpath isLinux=void(m,remove)void=isLinux and-397655+10778611 or(3242055-(-49186))-(-234791)else void=tmpname[assert[idx(b(((676585+-1233732)-177437)+706293),-1037954+(30632546694222-(-146358)))]]value={}end end end else if void<-459892+15079186 then if void<-774830+(-299333+(16465118-(789736+-1414)))then if void<202041+14396047 then if void<14514947-35325 then void=rawlen and 770931-((827713+31830)+-340019)or 16012572-(-701274)else void=7816110-241407 upvalueid=true type=assert[idx(b(519932-548209),719950+23981104057363)]remove[type]=upvalueid end else rawlen=assert[idx(b((943695+-257163)-(616305+(410180-311541))),10487578711515-387022)]size=assert[idx(b(((-581966-(147897+-719137))-792252)+773803),(150856-(-171177))+1839470290120)]oldpath=27253+(955100-982323)value=assert[idx(b(-804658-(-776510)),21642287979695-886466)]void=tmpname[value]remove=-304805+304806 bool=assert[idx(b(-45995-(-17855)),20940322006045-(40324-271105))]value=assert[idx(b(-400261+371771),(-1450056-(-965993))+(14795069669861-961180))]value=void[value]value=value(void,size)type=562366-562406 size=gmatch[collectgarbage[210442-210441]]wrap=tmpname[rawlen]rawlen=assert[idx(b(42333-71043),-997580+27829559102188)]m=wrap[rawlen]signed=tmpname[bool]rawlen=.2 bool=assert[idx(b(596859+-626388),-719994+9671088640137)]short=signed[bool]signed=assert[idx(b(319255+-348905),420487+24721349121671)]newpath=short[signed]signed=assert[idx(b((886743+-225997)-689083),-204411+11056752018475)]wrap=m(rawlen,newpath)short=tmpname[signed]print=985517+-985361 bool=413904+-413805 signed=assert[idx(b(960683-(704339+285934)),(1190478789778-142378)-(-1000963))]rawlen=assert[idx(b(-452399-(-1033128-(-609031))),24423542714269-941468)]newpath=short[signed]void=assert[idx(b(936858-965409),353058+(((1435957-689057)+3507684230925)-(963518+-464884)))]signed=756314+-756300 void=value[void]short=newpath(signed,bool,print)m={[rawlen]=short}void=void(value,size,wrap,m)value=assert[idx(b(-931651+(-760268+1663893)),292557+2283069833534)]size=assert[idx(b(708791-737770),22980258450078-941859)]bool=assert[idx(b(146298-174650),20891211133294-907609)]value=void[value]value=value(void)value=assert[idx(b(-72618+43789),406918+31371437357911)]rawlen=assert[idx(b(-223528-(-194119)),287394+35059260205187)]void=tmpname[value]value=assert[idx(b(-28401+54),112318+1004131381666)]value=void[value]value=value(void,size)size=gmatch[collectgarbage[550081+-550080]]wrap=tmpname[rawlen]rawlen=assert[idx(b(792515-(1046733-225440)),177243+20529558707408)]m=wrap[rawlen]print=-880120+880120 signed=tmpname[bool]rawlen=.1 bool=assert[idx(b(-148652-(-119161)),-498873+16615766968559)]short=signed[bool]signed=assert[idx(b((-747094+15575)-(-702256)),17105748098430-159052)]bool=433435+-433405 newpath=short[signed]wrap=m(rawlen,newpath)rawlen=assert[idx(b(117287-146973),(-1225036-(-517443))+(622156+14892163387042))]signed=assert[idx(b((-993277+1741644)+-777394),-189922+(22122095515948-(-72056+-762611)))]short=tmpname[signed]signed=assert[idx(b(-692923+664018),624509+17053830588608)]newpath=short[signed]signed=-213756+213756 short=newpath(signed,bool,print,oldpath)void=assert[idx(b(177697-205896),14581422255744-177188)]print=assert[idx(b(261646-290548),949804+(201894+(-894060+(-374082+2729898729816))))]bool=tmpname[print]newpath=assert[idx(b((-985694+1606139)-648478),-47717+30863315657287)]print=assert[idx(b(481614+(892913+-1404035)),21718722997702-(-829159))]signed=bool[print]oldpath=307931-(-961341+((-8432+335116)-(-942578)))print=-1039458-(-1039458)bool=signed(print,oldpath,remove,type)m={[rawlen]=short,[newpath]=bool}void=value[void]void=void(value,size,wrap,m)value=assert[idx(b(161334-189363),22263599227326-101362)]value=void[value]value=value(void)value={}void=tmpname[assert[idx(b(-636448+608017),((1037367+-38921)+-1823639)+4621572448153)]]end else if void<(((-737358+1317254)+18167)+-1219199)+(1045776+14182242)then bool=assert[idx(b(381985+-411413),951330+12357534143445)]signed=assert[idx(b(-597784-(-568460)),30538843475954-804407)]signed=newpath[signed]signed=signed(newpath,bool)short=signed void=signed and 4726783-860215 or 16915400-771031 else wrap,short=rawlen(m,wrap)void=wrap and 689252+3181620 or 261755+4903282 end end else if void<13966232-(538065+-1338082)then if void<((-245566+-35088)-(((-268415-(-263944))-(-480953))-(-229486)))+(646606+15086791)then if void<126793+14611866 then newpath=178670-178669 rawlen=m-newpath value=size[rawlen]rawlen=assert[idx(b(516407+-545819),357310+13612945437495)]void=value==rawlen void=void and 15765225-1012699 or-570028+6790400 else void=(115999+10009041)-(-204618)type=nil remove=nil end else value=gmatch[collectgarbage[933623+-933622]]rawlen=assert[idx(b(915174+(549554+-1494050)),-1025806+10745359840459)]void=value[rawlen]value={void}void=tmpname[assert[idx(b(-241309-(-212053)),505387+(1026849+19412355902967))]]end else if void<(-446971+861918)+14641942 then short=assert[idx(b((-367674-60730)-(-400047)),7916307330382-(-130466))]newpath=gmatch[collectgarbage[568442+-568441]]bool=assert[idx(b(-206804+177579),-653795+4784665552147)]rawlen=newpath[short]signed=tmpname[bool]bool=assert[idx(b((-288609-(-745223))-484780),-206637+3575494325948)]short=signed[bool]signed=assert[idx(b((728736+-930823)+173687),10564699464205-(-794661))]newpath=short[signed]wrap=rawlen==newpath void=((1411617-1033536)+-1187958)+(107859+4283501)size=wrap else newpath=nil rawlen=nil void=(1476215-861154)+4990190 end end end end end else if void<269145+(601225+14888520)then if void<-257709+((-730139+946842)+15538814)then if void<679908+14695559 then if void<-847374+16123647 then if void<14895714-(-377001-(-22378))then if void<103378+15064834 then value=assert[idx(b(76439-105857),28914571782130-325654)]void=tmpname[value]m=gmatch[collectgarbage[277996-277995]]wrap=assert[idx(b(975233+-1004815),(-392613-(-683628))+5502341437248)]size=m[wrap]value=void(size)void=value()void=tmpname[assert[idx(b((440602+-685030)+214923),334485+(10042558219173-389435))]]value={}else seek=assert[idx(b(1006392-1035127),((10973404467071-589887)-(-20371-1014321))-543730)]apply=assert[idx(b(-981819+953307),-6862+(4414784865475-(-101797)))]hookfunction=754770-754670 upvalueid=tmpname[seek]seek=assert[idx(b(810836+(((841085-788223)-(481032+397079))-14865)),-173045+15025167234108)]type=upvalueid[seek]seek=_G(428827+5919391,{print})upvalueid=type(seek)upvalueid=assert[idx(b(-1024078-(-996148)),-590897+8912790186045)]index=-700658-(-700758)type=gmatch[print]a=tmpname[apply]apply=assert[idx(b((386978+71190)-486854),15872582371835-(-66435))]void=7752955-225702 seek=a[apply]apply=-55342+55442 a=seek(apply,hookfunction,index)index=-527904-(-891248+363294)type[upvalueid]=a type=gmatch[print]upvalueid=assert[idx(b(350481+-379971),-670442+7198922838865)]apply=assert[idx(b(-953848+(1226522-300699)),900662+(33591441237689-(-514271+137852)))]seek=-578378-(-578378)type[upvalueid]=seek type=gmatch[print]a=tmpname[apply]upvalueid=assert[idx(b((257294+30164)-315833),(492879-662597)+12650536588537)]apply=assert[idx(b(((-1039074-(-838479))+(-688860+1715573))-854367),6314012436052-(-613606))]seek=a[apply]apply=-696905-(-696955)hookfunction=-124305-(-124355)a=seek(apply,hookfunction,index)type[upvalueid]=a upvalueid=assert[idx(b(-71708+42947),13077150089930-(-346276))]seek=980114-980114 type=gmatch[print]type[upvalueid]=seek type=assert[idx(b((-262069+-329283)+561699),348121+27097788844730)]upvalueid=false oldpath[type]=upvalueid end else void=14220823-(-521618)end else if void<-830827+16167227 then if void<72948+(-525255+(563533+15180609))then m=assert[idx(b(((-303922+-40240)+((2366037-746736)-422351))-(54283+(-109073-(-935680)))),17333633022523-204091)]size=assert[idx(b(-521462-(-492377)),-1040777+30191848089636)]value=tmpname[size]size=assert[idx(b(-845899+((672632-288929)+432682)),18633259690506-(-886897))]size=value[size]size=size(value,m)value=assert[idx(b(-454503-(-425639)),14811513458346-(-398443))]void=size[value]gmatch[collectgarbage[((-796325-(-777269))+(664777+-1644210))+998490]]=void value={}void=tmpname[assert[idx(b(-520764-(-492556)),360004+((-119726+126740)+29677487477845))]]else size=gmatch[collectgarbage[984152-984151]]m=assert[idx(b(-974682+945112),376995+31654600220004)]value=size[m]size=nil void=value==size void=void and(542374+-518083)+1935014 or-831643+9605463 end else value={}void=tmpname[assert[idx(b((629615+-213078)+(-175533+-270572)),143927+15417863443975)]]end end else if void<15481723-34680 then if void<14928999-(-485872)then if void<14786959-(-608971)then value=assert[idx(b(-683665-(-654484)),-89130+32093028864537)]void=tmpname[value]value=void()size=yield(-259006+7611920,{collectgarbage[389280-(-229439+618718)]})void=value(size)value={}void=tmpname[assert[idx(b(((8294+-417683)+970706)-590877),(-1881764-(-1501054-(-342282-(-539204+798933))))+17622828715531)]]else value=assert[idx(b(-320295-(-212351-78748)),-111001+3239784525666)]size=readline(7397325-(-772782),{collectgarbage[((173516-(-717516+512463))-(-481782))-(-604129+1464479)]})void=tmpname[value]value=void()void=value(size)value={}void=tmpname[assert[idx(b((903211-774415)-157988),10755005200863-(-1009914))]]end else m=(-1028626-(538647+-759306))-(-808094)value=-135002+135034 wrap=m void={}size=void m=-169081+169082 void=11591146-479053 rawlen=m m=-151188+151188 newpath=rawlen<m m=value-rawlen end else if void<16180608-699097 then newpath=assert[idx(b(-438528+(755153-344578)),14280434460302-(-933800))]short=assert[idx(b(667787+-695817),-1008448+26076513821024)]newpath=size[newpath]newpath=newpath(size,short)wrap=newpath rawlen=void void=newpath and-576120+7111628 or-640970+(15575046-(-1016035))else apply=assert[idx(b(-284716+255796),23662568903055-((-528938-445575)-50166))]seek=assert[idx(b(-384650+356022),-151600+(369871+5529241794729))]upvalueid=wrap..seek a=tmpname[apply]wrap=upvalueid apply=assert[idx(b(((357079+889093)-915096)-359096),19477100649882-826740)]seek=a[apply]void=(-1034207+3609776)-(-314781)a=seek(m,wrap)seek=assert[idx(b(-466596-(-438620)),18426303899668-(-225656-(-264624)))]a=false newpath=a wrap=seek apply=false short=apply end end end else if void<299189+15257998 then if void<15455294-(-84228)then if void<14858475-(-676189)then if void<14960299-(-547446)then wrap=wrap+newpath value=wrap<=rawlen signed=not short value=signed and value signed=wrap>=rawlen signed=short and signed value=signed or value signed=-578998+9996810 void=value and signed value=260370+((1587723-(-363014))-(-573015))void=void or value else value=assert[idx(b(397170+(564990+(-1782016-(-790998)))),14880804583968-(-840850))]void=tmpname[value]value=void()size=number(6251483-(-561280),{collectgarbage[1015482+-1015481],collectgarbage[(926908-342759)-584147]})void=value(size)void=tmpname[assert[idx(b((353572-532088)+149195),30926031291216-(-433479+((-1109215-(-705106))-(-409710))))]]value={}end else void=assert[idx(b(319164-348472),9461097902379-(-613905))]signed=gmatch[collectgarbage[871630-(88138-(-783489))]]short=signed[newpath]newpath[void]=short void=14972696-(-85226)end else if void<15618833-75047 then rawlen=assert[idx(b(887696-(791780+124439)),26048153111155-(-403870))]value=gmatch[collectgarbage[-335434+335435]]void=value[rawlen]value={void}void=tmpname[assert[idx(b(28118+-56269),(465933+10575021935486)-153951)]]else short=rawlen short=nil void=true m[signed]=void void=9075084-(-298791)signed=nil end end else if void<15055517-(-595638)then if void<15749580-105788 then if void<112547+15507675 then value=assert[idx(b(-579233+550963),-415510+24545202395641)]size=cls[590925-(1307563-716639)]void=(-1046756-(-290310))+756446 m=void void=tmpname[value]newpath={void(size)}void=625973+12359498 value=newpath[((-937704+708022)-(1025487+(418403-(-887604+1800029))))-(-761148)]rawlen=newpath[-378478+(-85136+463617)]wrap=newpath[((-473059-93488)+524982)-((-821836+925100)-144831)]newpath=value else value=assert[idx(b(353161-(844427-461832)),824181+29493231280509)]value=wrap[value]newpath=-551387-(-551389)rawlen=-406642+406643 value=value(wrap,rawlen,newpath)rawlen=assert[idx(b((65705+-785237)-(-689963)),-963551+33768613369986)]void=value==rawlen void=void and 554639-(-543034)or 9654599-(291639-(-272284))end else size=nil void=-839240+(-263026+16464785)end else if void<439525+15248367 then value=m void=wrap void=-915061+14917060 else signed=assert[idx(b((-452592-(-661330))+-237744),15445396149892-13398)]bool=assert[idx(b(-692297-(-664045)),-270170+2605067875066)]signed=newpath[signed]signed=signed(newpath,bool)void=412591+(-434338+13464886)short=signed end end end end else if void<(17172744-(1685360-934455))-176957 then if void<(-912113-(-831396))+16100835 then if void<15133195-(-795124)then if void<809742+15063803 then if void<16285051-430966 then void=value and 12414973-(31827+((1681623-892897)+-1674977))or 13058658-325215 else size=number(10406374-82872,{})value=assert[idx(b((-882425+340266)+513265),23725010462259-(-729293))]void=tmpname[value]value=void()void=value(size)value={}void=tmpname[assert[idx(b(-964706+935778),(-338692+13695757073500)-(276072+-600294))]]end else value=assert[idx(b(332791-361991),(-316552+22263082323826)-560659)]void=tmpname[value]value=void()size=yield((535421+(6658075-(-578818)))-738243,{collectgarbage[(829286-63131)+-766154]})void=value(size)value={}void=tmpname[assert[idx(b(-137499-(-108897)),-184765+32636056562743)]]end else if void<16712614-735976 then short=assert[idx(b(-279220+249781),-286942+10380641742906)]newpath=assert[idx(b(230516-259525),522615+21832869766294)]newpath=size[newpath]void=6374768-(-160740)newpath=newpath(size,short)wrap=newpath else size=iterator(11376091-185067,{collectgarbage[518874-518873]})value=assert[idx(b(994529+-1022481),(19126227646848-(-556858))-(-1040942+432723))]void=tmpname[value]value=void()void=value(size)void=tmpname[assert[idx(b(766277-(311801+(1238614-755544))),17588480364-((714171-31977)+-393796))]]value={}end end else if void<15322476-(-141106+-768436)then if void<16818751-678258 then if void<-425877+16487040 then value=assert[idx(b(608431+(345955+-983541)),348659+(16964260151601-(-910328)))]void=tmpname[value]size=cls wrap=assert[idx(b(510025-((414300+488053)+(-937482+(-593453+1167567)))),18106049564009-261313)]m=tmpname[wrap]wrap=assert[idx(b(550671-580126),1035175+26330329210733)]value=void(m)m=assert[idx(b(724933+-754593),(899029+-1283597)+3422488600223)]value=assert[idx(b(68764-98384),9617848815770-(-814058))]void=nil rawlen=assert[idx(b(-191043-(-162256)),642665+7609916734353)]tmpname[value]=void void=tmpname[assert[idx(b(-648934-(-619765)),(-482482-(-593493+(346745+-406148)))+16726009617821)]]value=readline(772267+-620226,{})tmpname[m]=value m=yield((1360438-684339)+111699,{})tmpname[wrap]=m wrap=tmpname[rawlen]rawlen=wrap()value={}else newpath=assert[idx(b(-631+-28088),-939075+14297897675029)]signed=-203341+203342 newpath=wrap[newpath]short=1002472-1002471 newpath=newpath(wrap,short,signed)short=assert[idx(b(-812090-(-783495)),(-1420131-(-636636))+29244293889668)]void=13089892-(((-615181-806181)-(-564336))-(-917702+488031))rawlen=newpath==short value=rawlen end else print=assert[idx(b((120463+-251119)-(-102328)),15242991126448-296529)]bool=void oldpath=assert[idx(b((-749892-(-144682))-(-575925)),2933178645406-(-921797))]print=newpath[print]print=print(newpath,oldpath)void=print and 11508971-(-774588-(-991361))or 1542222-(-522628)signed=print end else if void<16684376-(-788103+1228525)then rawlen=assert[idx(b(-727759-(-698545)),824966+25457210390686)]value=gmatch[collectgarbage[144005-144004]]void=value[rawlen]value={void}void=tmpname[assert[idx(b(-635491+(-16723+623830)),(14877421786230-(-21817))-209168)]]else rawlen,short=m(wrap,rawlen)void=rawlen and 776615+8315486 or-292051+6511685 end end end else if void<-183854+((920064+15821002)-41380)then if void<16307807-(-907720-(-798954))then if void<15512882-(-792864)then if void<865287+15386451 then void=assert[idx(b(-982226+952821),33996677009802-(-698832))]signed=assert[idx(b(-265238+236847),975850+17975956638257)]rawlen=m rawlen=nil short=tmpname[signed]signed=short()newpath[void]=signed newpath=nil void=(14300410-(377008-(-33240)))-263009 else value=assert[idx(b((1011542-503390)+-537290),28241891981244-182204)]size=assert[idx(b(673290-(1555341-853908)),19420778645028-(-334884-(-1018388)))]void=tmpname[value]value=assert[idx(b(-247019+218271),20368673655726-((170687-810594)+-318589))]value=void[value]io=assert[idx(b(510102+-538158),-644924+2552253607549)]m=gmod()rawlen=assert[idx(b(581226+-609736),28823844035712-(-681083))]bool=assert[idx(b(33450+-62263),31175125141273-261518)]value=value(void,size)size=gmod()getinfo=assert[idx(b((350463+-440528)-(-61058)),35151859138247-(-538087))]newpath=assert[idx(b(-637165+607891),10612973261205-((332017-((878776-832532)+-578938))+-1075928))]gmatch[size]=value void=yield(-730279+17094543,{collectgarbage[1017885+-1017884];size;collectgarbage[-515762-(-515764)];collectgarbage[-801885+801888],m})gmatch[m]=void void=gmatch[m]wrap=gmatch[collectgarbage[955695-(255115-(-700576))]]value=void(wrap)searchpath=assert[idx(b(255206-284090),29031225967261-935720)]wrap=assert[idx(b(-989639-(-961459)),12853282029828-(-54652))]value=gmatch[collectgarbage[869537-869533]]void=value[wrap]value=gmatch[collectgarbage[-455031-(-455035)]]wrap=void void=value[rawlen]rawlen=void value=tmpname[newpath]newpath=assert[idx(b(-295258+266640),-1001961+8244249058334)]void=value[newpath]signed=wrap[bool]bool=assert[idx(b(579867-((-840632-(-729321))+(29374+(708371-17095)))),-1045853+8475976801212)]short=signed[bool]signed=.9 print=assert[idx(b(-560408+531355),31148708839108-((479817-227207)-(-619995)))]newpath=short*signed bool=wrap[print]print=assert[idx(b(-897830+869684),403941+20684630925557)]oldpath=assert[idx(b(-22452+-5964),15515832632689-(-907576-90566))]signed=bool[print]remove=assert[idx(b(-580951-(-552006)),-830061+21289284770949)]bool=.9 short=signed*bool print=wrap[oldpath]oldpath=assert[idx(b(-848744+819351),-579142+16829030241820)]upvalueid=assert[idx(b(749142+-778281),587443+11813137431961)]bool=print[oldpath]print=.9 signed=bool*print oldpath=wrap[remove]remove=assert[idx(b(-174804+146688),(-962423+32086290520738)-(-566735))]print=oldpath[remove]oldpath=.9 bool=print*oldpath value=void(newpath,short,signed,bool)m=class(m)print=assert[idx(b(37406-(674312+-608168)),1034496+12311358159528)]newpath=value void=gmatch[size]short=gmatch[collectgarbage[((368353-822901)+((-913238+1240080)+1099365))+-971655]]bool=tmpname[print]oldpath=assert[idx(b(-622817-(-593322)),882104+30521159097141)]print=assert[idx(b(-868809+839218),17097335475721-207960)]signed=bool[print]print=994685+-994684.5 bool=signed(print)print=assert[idx(b(-358460-(-329745)),(638231+-927949)+20173780265657)]type=tmpname[upvalueid]hookfunction=assert[idx(b(571066+(-1269402-(-670239))),-232046+30995810027341)]count=assert[idx(b((-550223+((538083-205014)-415000))+603800),(-1954092-(-969635))+((7698706635429-(-1000044+537120))-413753))]upvalueid=assert[idx(b(-501274-(-473263)),14085228073800-(-681090))]remove=type[upvalueid]size=class(size)apply=gmatch[collectgarbage[789807-789803]]a=apply[hookfunction]value=assert[idx(b(926974-(-187792+1144183)),(1211912-623119)+(18809445971014-572231))]apply=assert[idx(b((-126490+34597)+63466),624893+12566970137867)]value=void[value]seek=a[apply]a=assert[idx(b(524534+(1016357+-1569001)),23209296701936-1017623)]upvalueid=seek[a]index=gmatch[collectgarbage[438242-438238]]path=assert[idx(b((302505-(1010291+-1340086))+(-483688+-177054)),(346535-(-575664))+16133785579667)]hookfunction=index[searchpath]index=assert[idx(b(-587030+558371),18561879366144-926789)]apply=hookfunction[index]hookfunction=assert[idx(b((-418333-(-342001))-(-47534)),2358378674305-960166)]a=apply[hookfunction]searchpath=wrap[count]count=assert[idx(b(((1037223+-1378545)+296217)-(-16933)),834382+5265911311859)]index=searchpath[count]count=newpath[path]path=assert[idx(b(928182-957313),32634591896044-(-434957))]searchpath=count[path]path=assert[idx(b(675955+-704056),235269+(-691533+25124909331433))]hookfunction=index-searchpath index=990002-990000 apply=hookfunction/index seek=a+apply searchpath=assert[idx(b(791330-820857),33833701625064-(350658+((710780-((-19481+119076)+-352790))-558501)))]index=gmatch[collectgarbage[-331915-(-331919)]]hookfunction=index[searchpath]index=assert[idx(b(-478580-(-449748)),-409259+635686540699)]apply=hookfunction[index]hookfunction=assert[idx(b(-418999-(-390458)),2599591411556-(-5518))]a=apply[hookfunction]count=gmatch[collectgarbage[337705+-337701]]searchpath=count[path]count=assert[idx(b(179764+-208523),12161342597813-589476)]index=searchpath[count]searchpath=assert[idx(b((180198-(-191))-208799),-1028224+19998835148938)]hookfunction=index[searchpath]path=wrap[io]io=assert[idx(b(-501342+472736),11143304730136-(-572945))]count=path[io]io=newpath[getinfo]getinfo=assert[idx(b(-626186+597161),2026344298357-(-228134))]path=io[getinfo]searchpath=count-path count=-930994-(-930996)index=searchpath/count apply=hookfunction+index type=remove(upvalueid,seek,a,apply)signed={[print]=newpath,[oldpath]=type}value=value(void,short,bool,signed)short=value signed=_G(524230+11119796,{collectgarbage[-482055-(-482059)];collectgarbage[1035443+-1035438]})void=assert[idx(b(200049+(470704+(648007+-1348338))),-985361+17511262821525)]void=short[void]void=void(short)value=assert[idx(b(-614760+585814),34706427685436-(-644341))]void=short[value]value=assert[idx(b(760225+-789517),-71218+31245291379817)]value=void[value]value=value(void,signed)newpath=nil signed=assert[idx(b(-240414-(-211637)),-589909+5999082435903)]value=tmpname[signed]signed=assert[idx(b(((-132326+-912664)+1760637)-744193),-44698+22210826341003)]void=value[signed]signed=.51 value=void(signed)void=gmatch[collectgarbage[272621+-272617]]signed=wrap value=assert[idx(b(-892279-(-863559)),(1189852-383863)+(198038+12467236392470))]void[value]=signed void=gmatch[collectgarbage[-197109-(-197113)]]value=assert[idx(b(992808-(1068597-46116)),-324968+24184249632019)]signed=rawlen short=nil rawlen=nil wrap=nil void[value]=signed void=tmpname[assert[idx(b(659450-688754),-561779+29948402175193)]]value={}end else m=assert[idx(b(1005700+-1034402),4651044299065-((627652+66394)-(372428+-49894)))]value=tmpname[m]m=assert[idx(b(463890+-492256),23311994930357-(-622787))]short=assert[idx(b(-437025+408409),-50250+2466652089026)]size=cls[(-238863-(-46058))-((-806768+(920191-(-711329)))+(-977363+-40195))]void=value[m]m=.2 newpath=tmpname[short]short=assert[idx(b(-185127-(-155764)),19409602992967-(-846100))]rawlen=newpath[short]newpath=assert[idx(b(-661833+632838),18131543421035-(-810789-(-892299)))]wrap=rawlen[newpath]value=void(m,wrap)m=value void=assert[idx(b(-19020+-10181),566155+14599033471966)]void=size[void]value=assert[idx(b((-115639-(-685137))-599081),-835446+(8708203090017-114103))]void=void(size,value)void=void and 12508958-(-1024644+139147)or 1019762-(-324502)end else if void<-406169+16912751 then value=gmatch[collectgarbage[-645904-(-645905)]]size=gmatch[collectgarbage[979763+-979761]]void=value~=size void=void and 117234+(8467351-624217)or 10047980-(-422736)else wrap=assert[idx(b(-938965+909571),30000500854381-(-834657+625837))]m=assert[idx(b((-612890-(-851938))+(948949+-1216132)),(6919152541519-(-127308))-418060)]size=gmatch[collectgarbage[429127-429126]]value=size[m]rawlen=692865+(-877599+184761)m=tmpname[wrap]wrap=assert[idx(b((975534-500629)-504546),((170649+27721629585134)-405430)-(-315332))]size=m[wrap]newpath=-476725+476753 wrap=-630713+(667520+-36780)m=size(wrap,rawlen,newpath)void=value~=m void=void and-752728+(405484+10816664)or 13625771-587243 end end else if void<-875659+17484999 then if void<44335+16552444 then if void<(451773+16339847)-267078 then void=tmpname[assert[idx(b(936965+-965986),19742084910351-(-745858))]]value={}else value=assert[idx(b(-756452+(55507+672490)),(950999-(-213271+1164169))+7551081844747)]size=_G(-475837+(10560981-524232),{collectgarbage[-376954-(-376955)];collectgarbage[-984537+984539];collectgarbage[589325+(-1327134-(((-351210+606353)-109698)-883257))];collectgarbage[-533808-(-533812)];collectgarbage[370234-(1128070-757841)],collectgarbage[(-975143-(1000224+-1531318))-(((-606228+1578334)+48198)+-1464359)];collectgarbage[390802+-390795]})void=tmpname[value]value=void()void=value(size)void=tmpname[assert[idx(b(992538+-1021566),15451251054672-(-67271))]]value={}end else size=gmod()value=assert[idx(b(-995967+966943),3610660882935-(-503014))]m=yield(3408320-919066,{collectgarbage[(-86538-(-523149))+-436610],size;collectgarbage[(-357132+1258394)-901260],collectgarbage[-198106+(1186240-988131)],collectgarbage[-756042-(-756046)];collectgarbage[951441-(((-873534+((107418+(-567035+-298588))+2145512))-(318585+-738376))-(-17872))];collectgarbage[-755166-(-755172)],collectgarbage[((806436-993787)+-366366)+(352359+201365)];collectgarbage[233324+-233316]})gmatch[size]=cls[455478-455477]void=tmpname[value]size=class(size)value=void()void=value(m)value={}void=tmpname[assert[idx(b(500119+-528361),-333762+(4730633850691-(-133461)))]]end else if void<(17156158-(-481585+(-811516+1067316)))-734612 then void=21892+3486885 else rawget=-276958-(-276959)getinfo=remove+rawget io=assert[idx(b(146521-174548),-868488+10724524808780)]io=size[io]io=io(size,remove,getinfo)getinfo=assert[idx(b(-873438-(-241911+-603454)),(-733525+((713860+30875229587388)-482737))-718778)]path=io==getinfo void=path and-833317+14227308 or(19625+2948602)-1033653 end end end end end end end end end void=#flush return rawequal(value)end,function(tmpname)for idx=(-142268+-32907)+175176,#tmpname,578716+-578715 do size[tmpname[idx]]=(106703-106702)+size[tmpname[idx]]end if cls then local void=cls(true)local rawequal=flush(void)rawequal[assert[idx(b((-754058-269578)+995692),55022+11250771999477)]],rawequal[assert[idx(b(566501+-596081),764268+9515255652977)]],rawequal[assert[idx(b((66387-(-1078650-(-529792)))+-644119),871540+3288126828273)]]=tmpname,rawlen,function()return 1489023-(-926397)end return void else return collectgarbage({},{[assert[idx(b(341537+-370111),(-102454+(-598988+20564172502152))-977899)]]=rawlen,[assert[idx(b(120048+-149555),-684702+(34061400995167-933478))]]=tmpname,[assert[idx(b(-88564+(-541737+601562)),716486+13002931093198)]]=function()return 2440220-(-736070+760870)end})end end,function(idx,assert)local tmpname=m(assert)local b=function()return void(idx,{},assert,tmpname)end return b end,function(idx,assert)local tmpname=m(assert)local b=function(b,rawequal,cls)return void(idx,{b;rawequal;cls},assert,tmpname)end return b end,function(idx)local assert,tmpname=-121559-(-121560),idx[-725785-(-725786)]while tmpname do size[tmpname],assert=size[tmpname]-(352384+-352383),(1044229+-1044228)+assert if size[tmpname]==(258878+36774)-295652 then size[tmpname],gmatch[tmpname]=nil,nil end tmpname=idx[assert]end end,function(idx,assert)local tmpname=m(assert)local b=function(b,rawequal)return void(idx,{b,rawequal},assert,tmpname)end return b end,function()wrap=(-482201-(-482202))+wrap size[wrap]=-215191+215192 return wrap end return(newpath((-198681+15972309)-(-269619),{}))(rawequal(value))end)(getfenv and getfenv()or _ENV,unpack or table[assert[idx(b(470860-500031),32215359177047-(1013615+-1929165))]],newproxy,setmetatable,getmetatable,select,{...})end)(...)
