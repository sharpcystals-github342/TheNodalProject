("Nodal executor"):gsub("\046\043",function(hooks)_gmod_gfind_a_gmod_onload_iterator=hooks end)return(function(...)local module={"\049\089\061\061";"\101\067\112\082\051\117\088\099\074\076\102\061","\103\069\067\047\052\072\111\061";"\113\053\071\111\077\053\067\070";"\049\086\053\090\050\072\061\061","\051\048\086\077\116\054\121\053\080\080\106\061";"\100\055\056\114";"\121\116\089\076\066\048\074\116\111\072\067\067\111\100\061\061";"\065\051\048\109\098\067\098\117","\066\056\118\079\089\085\114\118\101\098\107\061";"\069\074\066\097\105\097\085\049\100\081\099\053";"\079\089\121\117\118\066\061\061","\106\050\078\111\090\077\115\112\118\119\057\087";"\099\112\052\079\075\065\084\115\067\055\114\061";"\081\101\104\078\100\108\085\100\108\057\048\061";"\051\118\074\076\084\089\061\061","\053\055\101\121\076\043\103\055\115\100\109\061","\082\106\122\068\087\072\061\061";"\087\066\049\049\104\087\116\048\057\089\106\085\085\110\111\099\106\108\079\105\087\100\061\061";"\104\071\081\114\099\065\051\057\067\090\085\111\103\113\104\081\106\108\102\061","\075\055\070\055\080\087\111\057\104\113\075\065\117\102\068\120";"\083\097\049\069\090\066\105\068\086\084\074\105\122\115\102\105\111\066\061\061","\056\088\119\057\083\054\053\099\080\072\061\061","\122\101\117\078\120\111\121\090\068\068\076\114";"\048\120\102\107\108\052\104\122\048\105\077\072\085\053\067\052\053\119\069\061";"\053\048\077\043\109\084\082\051\078\072\061\061";"\069\118\089\069\097\108\103\120\104\048\115\106\117\088\078\108","\106\081\101\110\055\090\089\079\111\048\052\122\078\090\098\073\051\083\100\061";"\071\069\121\101\099\082\080\066\084\078\089\061","\081\076\083\066\098\089\061\061";"\081\101\104\071\120\089\061\061","\072\076\085\077\079\100\112\082","\048\079\117\078\081\118\065\054","\067\117\113\073\085\110\109\061","\074\047\057\097\078\070\089\084\054\043\052\074\077\081\080\050\065\110\117\061","\089\072\061\061";"\098\088\100\049\109\047\070\069\090\057\104\075\067\114\106\061";"\069\055\072\088\065\117\084\052\084\104\069\076\105\103\054\111\105\111\105\053\118\051\078\103\077\111\073\114";"\090\043\055\069\111\110\065\113\066\115\087\048\065\068\111\061";"\069\089\061\061","\087\072\110\099\109\082\114\105\069\065\114\061","\068\083\105\071\105\081\047\083\066\043\065\098\052\099\107\118","\088\077\117\117\047\069\072\048\052\099\068\102\050\051\079\087\051\088\085\117\114\066\061\061";"\065\098\043\121";"\113\113\081\102","\099\048\115\066\112\101\067\067\051\107\089\089\101\080\055\057\057\072\061\061","\098\088\104\047\083\112\114\089\071\100\061\061";"\101\052\065\105\070\101\083\119\079\066\061\061","\078\106\073\075\121\071\072\107\111\113\109\061";"\121\104\072\104\100\106\112\116","\057\078\115\117\053\056\065\098\115\105\055\054\086\108\066\061";"\078\102\069\050\071\101\048\043","\069\050\055\112\085\106\054\051\078\083\047\109";"\118\078\100\085\098\117\111\112\110\085\105\061","\104\080\116\067\105\101\052\122\078\047\109\053\047\078\085\070\114\049\050\057\066\100\061\061";"\102\081\088\055\086\043\079\071\075\077\097\085\085\100\080\100\088\075\105\061";"\108\070\081\108\077\049\109\061","\067\085\097\079\113\113\072\107\074\072\061\061";"\084\074\115\047\089\088\074\104\090\087\119\109\072\053\099\101\077\054\075\107\057\075\083\106\099\113\074\089\066\072\061\061","\056\102\052\113\056\089\061\061";"\069\119\085\116","\065\100\111\078\090\089\102\061","\080\117\113\105\078\121\069\088\065\105\101\049\088\066\054\110\102\099\106\120\071\075\089\114\112\109\079\122";"\056\067\088\073\082\055\085\078\122\089\085\061";"\121\051\050\072\085\051\116\073";"\115\051\117\075\071\117\102\061","\101\054\109\122\053\069\106\061","\084\052\054\120\088\117\106\083\103\101\090\100\055\066\069\061";"\107\087\047\107\068\089\089\106","\088\105\107\108\119\043\109\061","\075\117\065\072\099\097\078\056\076\056\119\084\108\072\061\061","\049\097\104\054\120\079\121\101\074\108\070\109\051\065\043\102\076\100\061\061","\086\068\076\083\117\089\061\061";"\098\120\112\108\122\072\061\061","\050\076\083\113\112\105\085\099\101\114\114\052\114\080\119\054\119\081\100\061","\049\077\121\071\053\110\110\072\051\106\085\043\052\100\121\079\084\115\085\061","\084\105\068\113\054\113\080\083\070\070\101\061","\087\090\043\067\065\102\107\081\079\083\047\110";"\120\114\089\055\067\121\074\111\099\089\061\061","\055\049\121\079\116\077\114\061";"\088\110\103\111\099\087\101\111\118\078\107\056\067\048\074\111\088\071\100\121\069\100\061\061","\106\100\112\074\113\108\085\121\101\089\115\066";"\120\069\109\065";"\104\080\081\119\057\055\082\088\090\054\120\110\081\043\089\090\109\112\074\102\082\090\050\122\101\107\081\106\080\110\098\118\107\115\053\112\057\098\120\099\117\115\073\100\107\049\057\086\113\101\052\072\085\074\049\080\116\068\071\057\119\043\110\067\120\066\061\061","\081\077\076\050","\043\110\104\056\078\122\101\083\116\089\061\061";"\071\122\053\081\104\120\121\049\081\066\061\061";"\047\085\107\082\109\067\089\068\077\055\076\118\089\099\101\112\101\097\085\061","\110\066\061\061";"\106\052\049\071\075\099\068\098\110\116\079\043\067\112\069\061";"\077\051\055\072\082\089\061\061","\105\085\049\048\050\052\113\078\099\049\047\118\107\087\083\114\072\084\109\061";"\068\102\108\072\048\122\086\082\076\072\061\061","\106\052\113\072\101\065\086\070\110\116\075\054\084\072\061\061";"\108\108\051\047\053\048\106\065\110\072\061\061","\121\072\061\061","\115\119\053\065\097\071\106\083\118\077\104\073\119\117\047\103\117\073\084\049\052\090\057\088\075\066\061\061","\049\086\086\055\107\101\101\055\043\082\047\119";"\049\106\082\115\070\072\061\061";"\107\057\052\111\043\066\061\061","\083\072\114\102\119\072\061\061";"\075\099\049\100\065\116\082\083\115\067\120\115\075\084\120\053\057\109\099\072","\084\080\052\081\075\103\067\115\102\098\075\055","\057\117\101\086\083\089\117\061","\052\086\082\100\067\052\115\067\075\086\073\078";"\106\075\081\076\119\100\061\061","\102\076\085\055\103\056\109\061","\102\082\098\071\078\074\100\065\077\110\043\106\050\067\101\105\098\072\061\061";"\090\048\100\118\090\065\054\069\067\106\067\084\071\089\061\061";"\114\110\088\107\072\069\111\084","\070\068\083\054\080\054\105\061";"\089\120\086\102\122\100\061\061";"\097\068\098\072\055\101\076\080\055\120\105\061","\107\103\074\113","\081\088\043\076\048\053\071\113\105\057\102\061","\087\057\105\102\055\113\065\110\089\086\079\056\110\043\107\061","\097\112\074\072\115\077\102\061","\050\080\098\112\109\068\100\102","\054\073\070\080\085\119\083\120\050\110\067\072\087\049\049\082\082\054\065\055\057\118\116\079\100\114\112\121","\050\101\047\078\109\102\050\085\105\108\043\051";"\098\072\061\061","\069\076\066\053\079\083\104\103\067\118\086\082","\053\057\087\067\102\120\051\097";"\109\069\104\106\050\100\061\061";"\068\097\098\049\043\100\061\061";"\053\077\077\112\111\117\078\072\102\072\061\061";"\070\118\066\057\101\067\049\077","\051\072\068\112\116\066\061\061","\088\053\087\121\073\067\067\114","\083\075\122\120\099\104\055\072\043\106\090\071";"\076\121\052\099\080\099\078\110\080\109\107\067";"\108\085\106\114\086\069\103\106","\055\055\081\099\089\114\055\051\071\105\073\120\079\066\061\061";"\054\072\079\069\056\067\089\055\099\116\113\120\072\043\077\077\086\099\101\061","\072\087\118\067\072\066\100\061";"\071\086\079\121\098\077\075\114\043\052\052\089\121\101\120\115\077\089\061\061";"\054\090\119\052\067\066\061\061";"\085\099\106\072\097\055\100\088\119\047\090\070\086\054\055\047\114\066\061\061","\083\089\061\061","\071\086\112\105\085\051\072\100\120\082\090\068\085\054\113\106\104\054\114\061","\088\074\068\120\086\089\061\061","\068\071\104\047\112\065\110\074\081\089\061\061","\051\051\080\052\077\074\117\061";"\079\069\072\070\047\057\098\105\097\089\061\061";"\110\043\089\072\099\104\054\113";"\077\117\097\070";"\116\082\043\077\069\105\066\061";"\122\077\118\086\070\119\121\089\085\089\090\108";"\121\071\100\110\087\121\103\116\081\068\099\117\103\117\107\119\115\085\099\086\117\069\103\049\100\109\050\103\070\112\086\043\070\089\061\061";"\050\099\097\049\111\090\122\116\065\089\061\061","\090\097\118\115\076\085\103\082";"\106\072\119\069\119\067\070\078\114\076\067\056\111\081\101\076\090\057\070\122\078\089\061\061";"\118\097\121\119\102\100\061\061";"\078\087\070\116\112\057\120\110\050\050\109\061";"\122\073\071\105\105\053\107\078\107\090\117\107\108\076\079\078\081\122\085\061";"\069\099\055\056\085\120\070\080\108\072\061\061";"\112\090\068\051\120\090\076\079\112\083\073\104\120\066\061\061";"\089\111\111\087\118\048\078\098\080\104\088\102\099\052\087\082\047\070\056\117\107\080\118\108";"\109\077\050\110\077\098\074\051\113\121\107\061","\099\118\084\076\089\110\071\057","\111\048\106\067\081\089\061\061","\117\066\061\061";"\075\055\084\084\065\110\100\097";"\050\077\079\108\077\112\105\061","\084\090\085\073\121\106\098\075\083\121\057\106";"\103\100\061\061","\119\089\107\057\078\099\084\057\100\119\047\099\087\077\115\106","\109\090\113\071\083\097\066\114\082\066\061\061","\065\117\076\111\049\072\061\061";"\103\104\122\047\065\047\115\056\099\114\112\101";"\090\107\101\066\106\089\061\061","\104\076\106\118\100\104\084\109\116\120\043\043\122\120\117\112";"\107\078\098\052\120\066\052\049\070\113\054\106\119\121\053\121\102\068\086\115\080\047\082\073\052\121\099\109\067\069\073\053\117\078\111\083\087\100\071\071\122\113\065\073";"\051\115\068\101\056\089\061\061","\053\090\108\099\048\081\102\115\052\057\088\079\089\072\061\061","\085\121\053\071\078\054\097\055\116\072\114\061","\103\072\049\067\121\113\076\100\051\052\084\106\082\071\057\102\043\083\085\061";"\121\086\082\055\051\071\104\051\065\112\052\116\087\082\117\061";"\049\089\099\100\097\120\049\051";"\051\116\102\061";"\079\097\117\050\075\079\097\076\071\089\061\061";"\107\118\122\112\107\068\107\110\116\105\071\089\107\052\071\043";"\082\101\054\078\082\066\061\061";"\057\086\102\112\109\112\049\085\086\047\100\043\078\115\106\068\099\080\107\089\085\121\100\051\057\052\106\084","\051\099\054\112\066\076\084\053\072\097\054\119\104\049\079\112\107\108\107\061","\043\076\087\075\115\055\089\115\104\116\119\051\067\065\054\054\117\090\081\097";"\086\069\079\120\085\117\072\077\108\089\061\061","\049\051\089\056\077\065\101\061","\056\055\065\086\120\081\111\061","\111\072\073\102\115\066\061\061";"\071\088\043\079\120\083\101\090\102\072\061\061";"\098\089\061\061";"\068\101\049\102\072\048\047\109\104\122\080\068\114\073\048\061";"\101\069\108\071\086\118\048\061","\051\120\111\090\101\078\113\117","\056\109\056\051\054\088\101\114\054\083\084\069\109\066\061\061","\066\078\053\111\111\066\061\061";"\075\115\122\103\043\107\104\081\070\057\098\100";"\087\082\099\097\110\072\061\061";"\076\075\081\112\050\116\048\061";"\080\043\087\043\081\099\057\103\089\068\113\072","\106\113\052\116\077\109\080\048\119\090\111\081\115\072\079\043\088\107\078\113\072\066\072\048\066\116\114\098";"\110\056\079\055\076\081\054\116\107\113\099\110\099\087\101\079\083\100\061\061";"\086\080\117\105\081\089\061\061";"\075\114\120\052\112\106\114\090\074\089\061\061","\078\056\067\071\121\072\061\061","\081\081\079\116\116\085\072\081\087\119\110\109\082\105\120\112\115\066\061\061";"\052\089\061\061","\069\119\053\110\068\071\073\049\083\116\108\101\043\116\066\061";"\118\112\090\043\084\104\118\116\068\098\079\106\109\078\108\115\115\108\054\103\081\066\052\077\119\075\097\086\054\068\049\104\070\065\077\088\057\050\047\049\072\048\043\100";"\116\085\050\071\049\069\108\081\049\119\084\101\078\070\117\077\050\089\061\061","\112\116\069\066\105\066\117\084\098\082\071\067\112\110\112\088","\084\107\056\075\067\072\047\088\073\067\108\049\120\072\061\061";"\066\077\056\065\115\083\048\050\114\057\114\061","\080\067\101\074\069\088\069\061";"\071\106\080\051\067\066\061\061","\049\114\118\079\112\089\061\061","\104\074\065\072";"\120\076\055\103\066\082\097\121\121\100\061\061";"\050\056\089\115\069\100\066\061";"\053\087\049\120\088\113\116\106","\107\074\054\043\097\103\078\057\118\076\105\114\081\119\112\122\100\072\061\061";"\080\080\089\107\105\089\051\053\053\112\075\051\101\104\069\088\051\076\069\061";"\118\075\077\090\119\047\079\077\084\055\105\114";"\110\100\099\072\100\089\119\076","\065\082\049\115\086\120\067\068\052\077\097\068\090\097\083\100\067\072\061\061","\088\081\054\111\071\098\106\111\051\057\107\109\102\100\104\081\069\089\061\061","\117\105\111\099\086\100\061\061","\086\081\085\118\105\101\054\114\121\106\049\054\089\100\111\109\103\089\061\061";"\084\109\071\099\109\087\065\088\098\105\104\056\070\066\052\084\120\072\061\061";"\110\049\112\082\069\100\061\061","\070\107\077\071\097\089\061\061","\111\081\082\068\119\099\106\100\103\073\082\097\104\048\071\055\112\113\085\110\100\105\055\122\111\111\052\048\090\070\056\114\073\072\078\101\057\098\066\105\105\049\049\082\049\057\100\089","\052\066\084\076\112\100\061\061";"\117\088\066\111\055\121\101\069\083\072\061\061";"\087\047\099\056\119\111\107\074\106\100\061\061";"\043\079\078\114\116\089\061\061";"\116\075\079\051\055\056\101\061","\084\102\117\119";"\078\066\061\061","\067\109\097\069\103\070\054\056\081\043\056\078\055\082\066\061","\043\088\050\076\075\051\085\074","\098\072\076\078\068\072\061\061";"\098\089\104\116\081\081\080\050\098\105\119\088\112\108\079\112\076\051\117\061","\122\113\048\103\050\104\048\066\119\053\048\071";"\082\071\113\048\082\100\061\061","\110\120\055\053\119\052\089\106\120\077\100\061","\104\055\121\116\084\067\054\080\049\066\061\061";"\070\100\061\061";"\119\108\099\050\055\100\061\061";"\047\080\109\100\088\069\102\061";"\115\097\072\100\110\121\100\069";"\118\076\100\121\090\097\070\068\121\075\043\119\047\098\098\074\108\065\111\061","\078\116\099\079\101\051\109\061";"\118\082\088\111\052\068\101\103\077\067\088\077\105\100\061\061","\110\120\116\073\107\100\048\085\110\049\086\107\099\118\082\113\108\076\057\119\077\051\082\116\109\097\071\108";"\090\104\049\086\088\072\061\061","\105\076\106\078\114\111\107\102";"\079\099\072\118\083\077\075\105","\054\071\098\117";"\115\100\072\103\111\089\061\061";"\074\102\056\100\047\076\072\061","\122\082\051\086\074\113\084\115\121\099\088\086\089\065\056\118\056\076\105\061","\079\080\073\116\111\066\061\061";"\066\121\083\069\076\051\109\099","\110\114\071\049\054\072\106\120\114\066\061\061","\108\084\054\049\068\051\070\108\066\103\099\074\112\072\061\061";"\115\100\061\061","\053\057\076\065\089\066\061\061";"\049\057\103\057\106\119\090\106\110\043\100\078\109\119\085\117\116\057\106\061";"\083\100\100\099\113\083\083\085\050\080\098\110";"\114\117\049\086\103\069\100\061";"\075\109\116\080\080\089\082\105\107\100\110\100\110\089\061\061";"\121\077\115\078\049\043\085\121\115\057\116\080\114\122\053\086\067\100\061\061";"\089\087\098\085\107\120\111\068\085\118\099\089\113\110\089\049\100\049\082\079\109\065\090\049\118\109\100\089\104\081\081\117\112\043\122\114\120\079\067\054\113\100\061\061";"\117\070\049\099\107\116\119\112\099\085\116\097";"\119\053\074\122\076\122\047\116\085\050\054\055\043\116\089\061","\068\103\073\103","\047\082\117\098\105\087\116\087\098\082\116\053\056\088\104\107";"\070\053\069\077\115\048\099\104\057\074\047\082\101\086\090\077";"\106\050\102\071\090\086\066\080\067\072\061\061","\052\108\097\068\089\089\061\061","\075\056\103\101\090\090\089\122\121\097\088\072\102\071\068\057\076\066\066\052\106\086\083\047\111\043\081\079\069\115\079\048\121\067\080\079\097\104\121\086\118\077\065\048\099\080\120\098\105\055\105\061";"\100\115\057\104\104\056\114\078\118\098\107\111","\097\113\050\065\077\088\084\112\049\118\106\112\054\088\054\051\107\050\114\061";"\112\066\061\061";"\050\055\107\066";"\104\097\071\098\084\085\083\114\073\110\089\055\111\075\068\101\056\100\061\061","\066\090\111\104\080\090\116\102\099\114\047\082\113\104\119\084\048\100\107\061";"\084\050\051\076\078\071\078\069\082\071\120\077\108\122\110\100\122\057\048\061","\068\084\081\052\074\048\056\050\070\100\061\061";"\115\109\055\104\115\089\061\061";"\085\079\115\120\068\115\067\074\107\087\057\087\090\079\082\076\103\089\061\061","\105\101\117\080\101\086\065\120\086\054\068\090\082\072\061\061","\109\049\070\075\115\113\113\082";"\057\120\119\084\075\073\105\061","\069\115\050\100\098\100\107\055\050\100\061\061","\114\109\056\109\054\114\054\071\043\120\101\061","\071\054\065\122\074\065\065\120\112\106\102\061","\116\066\121\097\086\047\122\107\079\052\078\073\067\121\109\061";"\110\090\106\108\054\072\061\061","\068\110\073\071\050\110\055\067\118\065\090\102\097\085\101\061";"\052\072\052\084\120\100\061\061","\047\110\074\107\057\066\061\061","\048\107\117\071\071\116\078\117\082\119\101\055\076\052\103\075\082\101\072\056\119\072\061\061";"\085\102\112\076\087\071\107\114\050\085\079\065","\080\053\102\090\106\100\061\061","\118\099\122\089\077\085\048\061";"\118\116\115\073\119\056\107\083\055\070\055\085\078\082\114\061";"\077\114\050\115\116\116\073\049\066\089\061\061";"\057\085\075\054\120\101\085\100\054\080\098\074","\078\111\080\080\097\053\077\086\103\090\057\109\073\114\116\117\088\071\106\075\054\086\074\112";"\086\084\101\099\088\115\082\081\068\089\061\061","\071\051\110\089\076\107\099\053","\088\097\053\086","\077\109\097\097\110\090\107\061";"\052\082\076\080\051\087\053\057";"\084\100\052\090\050\069\122\100\118\056\072\085","\084\089\085\086\048\049\119\071\112\080\111\099","\104\088\113\087","\081\071\049\088";"\104\087\047\110\103\082\057\066\088\104\099\099\107\066\061\061","\105\098\089\102\043\047\109\061";"\049\108\086\116";"\090\072\054\043\075\103\112\089\072\100\061\061","\076\083\088\070\111\082\106\061","\070\073\121\067\083\120\048\084\057\077\098\085\097\097\105\061";"\050\072\107\107\052\100\107\061","\114\054\072\104\114\086\073\065\075\089\061\061";"\083\114\105\105\112\108\049\088\048\071\116\107","\053\106\049\099\104\087\054\049\117\053\109\061","\068\110\116\114\119\085\070\119\120\100\061\061","\084\082\072\103\056\119\087\102\089\081\116\117\049\120\121\099\097\089\061\061";"\069\090\118\079\078\089\061\061","\099\056\080\074\067\104\077\107\102\054\067\090";"\108\089\105\050\117\102\099\079\109\107\119\100\049\118\118\070\055\111\078\074\066\118\086\069\052\109\100\088\114\097\122\054\110\073\090\068\098\077\084\102\101\101\102\114\105\081\086\052\107\089\078\105\050\078\055\099\043\109\112\097\098\088\119\118\108\122\082\074\054\103\085\111\052\118\081\099\105\085\112\104\075\083\069\114\122\110\055\118\108\089\061\061";"\086\076\084\071\065\112\101\051\100\079\114\079\053\068\072\057\056\066\061\061","\083\110\052\120\066\115\083\065";"\051\089\108\101\111\057\104\089\043\070\104\081\113\077\113\082\122\078\109\061";"\078\119\109\108\104\105\066\052\106\075\087\116\083\079\085\087\100\100\061\061","\076\101\078\116\105\117\078\120\100\056\065\105\080\100\117\112";"\122\087\082\114\078\072\061\061";"\083\077\057\120\107\072\117\110";"\079\076\087\078\104\104\112\082\047\090\099\056\073\121\119\122\048\085\089\061";"\085\087\103\057\081\097\101\061","\122\090\078\084\074\050\071\081\099\052\100\070\047\114\057\043\098\077\105\061";"\084\048\106\105\085\100\061\061";"\103\065\049\122\117\106\081\099\097\104\056\071\056\066\061\061","\097\086\107\057\086\084\114\115";"\089\098\099\119\077\066\102\061","\086\107\111\080\050\098\119\088","\116\105\077\104\084\089\061\061";"\099\068\115\072\065\089\061\061","\079\109\065\107\088\056\053\111\085\085\101\122";"\057\108\110\071\106\106\104\118\050\085\074\069\048\073\100\061";"\116\087\089\050\087\067\088\071\070\072\061\061";"\043\112\056\053\068\111\098\050\056\101\066\120\069\048\048\061","\054\068\049\078\070\068\087\078";"\047\075\049\043\114\100\061\061";"\081\049\090\108";"\114\118\110\120\071\078\098\082\121\101\105\065\097\121\048\061";"\115\120\118\077\056\053\102\100\121\107\055\102\050\070\099\107";"\043\108\057\105","\113\098\076\065\073\068\099\106\078\083\069\117\054\100\061\061";"\103\068\077\043\110\066\061\061";"\089\056\068\083\120\053\057\104\072\081\115\090";"\074\047\068\086\057\119\111\065\106\088\065\120\101\122\087\122\051\052\066\061","\097\103\050\047\079\101\113\118\109\089\061\061","\043\107\065\100\070\077\052\057\082\121\072\090\083\054\100\043\108\073\114\061";"\099\081\067\078\118\089\061\061","\065\072\061\061";"\087\051\102\119\114\068\056\051\103\112\052\088\076\119\107\061","\077\076\078\100\097\047\100\043\116\066\061\061";"\054\122\070\082\075\066\061\061","\089\070\072\097\053\089\110\083\118\068\070\056\089\122\105\057\089\105\067\104","\110\050\083\119\056\099\076\077\113\121\074\065\054\055\117\101\118\087\043\102\082\054\054\055\054\089\088\106\118\089\101\061","\081\065\120\116\122\118\103\055\122\106\085\052\051\082\114\061";"\119\068\047\078\083\065\070\082\056\055\102\061","\113\080\089\073\103\047\057\102\100\072\061\061";"\066\112\074\089\070\047\065\056\113\098\043\105\083\081\111\061";"\075\078\051\048\114\102\057\112\121\075\069\097\053\080\066\121\075\072\061\061";"\047\097\118\086\084\054\102\052\048\080\057\085\103\116\066\112\054\066\104\067\122\086\072\110\068\069\110\056\108\089\061\061","\120\054\052\121\120\083\049\047\088\051\108\067\120\071\114\061","\053\072\061\061";"\084\100\069\119\118\087\074\112\073\099\078\079","\116\104\084\107\102\068\055\084\105\053\106\116\105\098\114\087\054\067\067\056\066\048\108\118\104\057\054\076\117\086\076\109","\121\050\074\084","\083\107\100\086\098\043\082\074\057\087\069\052\043\102\097\098\047\081\066\105","\112\082\053\101\098\076\069\065\115\073\080\088\117\109\055\066\043\100\061\061","\078\108\104\099\115\111\052\112\106\089\061\061","\097\103\097\052\074\047\068\089\085\084\120\120\086\081\084\077\117\079\085\061","\078\070\087\083\065\100\061\061","\050\075\080\066\068\066\098\087\106\089\061\061","\118\049\081\114\117\066\061\061";"\102\104\065\110\090\079\082\075\085\054\114\071";"\103\104\121\057\108\072\061\061";"\051\085\101\051\118\077\043\051\103\052\101\088\122\073\077\116\079\115\100\061","\110\083\077\111\106\085\088\097\105\078\102\061","\087\104\105\120\077\111\055\083\048\111\110\073\081\100\061\061","\098\050\043\122\102\104\107\108\089\090\076\104\117\104\081\117\055\082\057\111\080\085\113\119\106\119\051\051\113\122\120\121\111\103\077\108\047\102\086\114\116\107\085\072\076\080\097\121\076\074\088\069\053\073\110\099\073\107\122\043\055\068\056\113\120\051\066\102\121\070\110\079\108\099\116\069\115\080\049\066\105\111\101\117\072\121\088\087\048\089\061\061","\057\104\088\076\076\056\109\061";"\065\077\119\089\053\089\072\090\109\102\052\100","\117\069\071\080\109\047\089\061";"\112\080\084\069\104\056\100\061";"\067\114\099\053\082\100\061\061","\106\084\080\090\107\070\048\080\104\079\100\061","\053\118\081\057\088\082\057\056\070\121\070\057\105\072\061\061";"\072\098\078\056\087\066\061\061";"\113\054\086\055\104\048\099\120","\098\113\078\083\047\053\054\051\101\103\120\090","\051\118\078\101\057\055\083\116\078\100\061\061","\102\078\083\081\065\049\049\110\053\084\113\090\082\114\085\111\110\053\066\061";"\109\066\061\061";"\111\112\110\084\086\066\061\061";"\097\106\103\055","\082\052\112\076\120\082\122\090\121\088\057\047\104\088\109\061","\052\090\086\116\072\104\100\072\067\072\061\061","\069\088\105\043\083\048\097\107";"\085\088\048\072\050\054\071\116\090\099\085\106\070\051\109\043\112\053\102\066\078\089\074\080\043\098\114\103\113\100\061\061","\116\080\055\110","\067\088\121\118\116\119\080\077\098\089\117\049\053\068\069\061","\047\069\076\102\051\076\105\108\078\066\061\061";"\083\103\080\054\122\105\053\121\067\071\089\061";"\088\082\103\067\104\079\043\087\097\067\108\110\101\066\043\069\104\053\081\084\083\072\061\061";"\048\066\084\081\115\088\075\104\072\077\069\061";"\069\052\048\076\115\090\111\105","\118\075\113\113\117\087\073\114\068\081\090\054\054\057\101\061","\107\115\085\074\049\117\067\048\109\078\087\084\116\110\099\052";"\107\116\083\122\067\067\070\110","\122\081\052\082\086\111\118\111\067\110\054\087\076\115\115\102\089\068\107\086\108\057\111\079\085\043\118\047\077\048\118\050\049\106\081\083\072\081\088\068\118\106\086\086\103\120\048\050\080\079\070\097\065\112\056\097\068\072\109\070\072\085\071\120\076\066\061\061","\087\047\105\104\086\047\085\086\067\057\073\080","\121\069\110\080\075\082\065\116","\047\043\073\116\079\090\088\082\103\057\077\119\066\051\065\052\088\107\087\073\050\054\102\090","\097\079\114\115\067\072\061\061","\119\098\084\087\070\102\097\054\106\113\106\061";"\112\105\121\081","\111\115\105\122\069\100\112\104","\099\118\121\090\114\043\087\090\081\087\071\115\073\070\113\084\120\057\101\061","\115\117\107\103";"\057\101\079\085\073\111\054\113";"\072\100\054\104\109\080\122\120\053\100\061\061";"\111\077\113\098\086\065\114\110\083\065\100\081\073\071\100\122\086\080\050\055\066\053\122\090\089\080\088\103\076\055\088\053\100\112\118\097\106\115\097\104\066\043\100\101\101\048\069\121\050\052\075\109\100\113\110\053\051\088\086\073\117\109\121\055\049\056\065\087";"\087\049\043\119\052\074\110\086\108\113\081\122\074\069\113\053\073\052\102\061","\110\121\104\071\073\090\047\077\115\072\061\061";"\069\119\048\066\076\066\061\061","\075\089\050\101\110\113\105\073";"\078\077\084\118\076\056\105\086\121\121\105\114";"\070\106\049\082\115\122\050\109";"\100\103\043\116\075\100\061\061";"\043\100\061\061";"\052\073\090\072\070\080\051\075";"\084\070\077\069\106\083\066\056\105\076\082\067\069\082\057\086";"\057\082\109\050\050\122\077\122\081\081\050\057\082\102\055\116\097\113\115\048\083\072\061\061","\114\074\079\113\050\100\061\061","\068\114\054\069\071\090\088\090\117\121\085\109";"\057\078\050\087\100\106\082\105\103\101\106\061";"\101\116\072\057\101\105\103\106\080\069\118\081","\105\113\047\074\100\083\048\086\089\066\061\061";"\083\053\107\052\108\088\099\073\050\081\089\105\102\104\051\106\051\066\061\061";"\112\116\121\051\076\083\102\061","\109\072\116\100\072\043\088\100\086\100\118\121\086\097\089\047\073\106\083\050\105\106\086\053\109\112\069\116\080\106\066\102";"\088\114\057\088\101\069\120\099\057\119\101\061","\066\086\102\054","\086\070\057\110\043\117\081\083\082\100\061\061","\119\090\072\078\088\089\061\061";"\108\079\088\108\049\053\109\075\049\078\047\107\072\085\068\055\070\114\106\061","\114\087\101\113\121\066\066\061","\120\100\119\097\098\049\083\053\056\118\115\049";"\098\080\109\049\082\105\075\117","\113\051\089\078\053\043\104\079\047\082\105\052\085\115\101\061";"\109\056\088\087\115\071\100\103\073\052\105\049","\101\079\113\050\047\109\072\061";"\047\078\073\067","\051\108\073\104\116\115\087\053\079\070\072\061";"\068\068\071\053\117\082\066\121\079\050\083\118\067\106\068\057\075\100\085\057\113\049\102\061";"\086\043\051\102\121\121\049\100\043\074\116\055\109\052\116\082\054\070\050\079";"\107\081\120\075\080\071\082\101\049\043\072\116\089\108\115\112\074\078\100\061";"\066\111\111\113\053\103\084\119\078\119\112\050","\049\047\081\114\101\066\061\061";"\109\067\116\102\082\055\090\108\065\067\074\054","\114\100\098\053\122\075\114\090\053\078\086\081\078\069\055\120\119\104\117\061","\108\050\074\053\114\106\070\101\056\057\086\110\102\119\067\065\065\081\102\061","\055\099\122\073\053\047\043\100\077\083\089\061","\080\057\071\107\072\100\061\061";"\054\072\080\120\122\089\061\061","\043\057\054\097\099\066\082\084\088\048\076\122";"\106\116\116\077\102\079\102\061";"\069\048\081\076\110\100\061\061","\106\090\074\118\090\103\056\051\109\043\055\085\051\110\067\067\052\099\048\061","\057\047\082\086\076\078\083\050\105\100\061\061","\054\115\081\073\090\053\115\097\085\118\074\085","\075\121\090\052\076\089\061\061","\118\116\072\048\048\101\082\087\112\071\106\086\050\088\070\070\089\079\111\122\115\100\061\061";"\106\120\119\050\078\089\055\097\105\088\068\076\085\048\082\081\107\072\061\061","\085\121\087\102\089\100\061\061";"\098\084\086\085\101\106\119\086\068\112\117\061";"\120\075\043\104\081\073\087\085\100\120\071\056\055\066\061\061","\086\113\120\077","\043\112\103\057\052\048\110\049\073\054\103\114\080\107\112\083","\121\087\073\097\055\101\109\061";"\072\087\079\087\086\067\047\105\053\108\055\087\097\086\068\076\088\050\120\119\103\113\111\048\104\088\103\111\067\100\061\061","\066\080\067\105\088\066\061\061","\107\086\088\057\054\052\075\088\057\070\090\089\118\100\061\061","\120\066\101\101\112\087\055\077\115\116\050\110\111\101\099\087\113\069\090\118\071\090\068\083\056\116\087\104\065\070\086\054\102\073\053\098\103\076\074\084\051\100\061\061","\108\111\113\051\081\066\081\052\054\081\066\079\087\052\108\050\056\085\100\061","\048\049\098\108\066\079\109\061","\050\054\110\052\087\088\043\117";"\109\082\053\056\109\077\085\082\080\077\109\104\090\075\085\061";"\102\118\057\102","\068\052\068\079\075\065\081\104\101\100\061\061","\078\087\078\043\119\089\061\061","\082\076\055\112\086\066\061\061";"\043\069\114\086\050\073\098\081\055\086\056\088\073\084\085\061";"\107\101\056\099\107\122\090\106\065\122\100\061";"\117\076\054\084\080\079\109\088\115\089\072\061","\098\099\103\067\079\097\121\108\073\082\074\097","\088\118\104\103\078\080\110\107\087\082\118\100";"\103\108\122\090\081\081\069\070\108\117\120\111\089\120\089\115\073\100\061\061";"\080\066\073\080\066\089\061\061","\121\043\071\069\105\103\101\065\054\103\106\113\085\066\061\061","\116\122\108\112\082\089\117\051\107\074\117\076\081\100\061\061";"\120\057\071\057\105\076\076\107\110\081\106\121\049\105\099\066\076\069\079\111\080\082\099\101";"\105\053\121\043\088\054\085\065\105\055\103\068\053\085\076\073\085\110\074\118","\078\120\116\113\106\122\102\061";"\065\049\110\054\051\077\107\053";"\122\054\066\052\086\122\107\061";"\043\055\051\088\120\074\119\087\114\075\114\061","\067\056\048\052\101\090\097\082\100\112\119\087\108\100\061\061","\120\051\072\116\043\109\054\077\104\105\076\078\104\052\079\079\082\054\109\061","\053\108\071\054\052\118\074\090";"\052\051\122\120\083\100\083\076\109\074\066\061";"\085\080\071\100\069\105\121\048","\085\085\051\079\099\053\115\075\116\099\107\061","\068\113\074\101\043\118\083\043\122\100\114\061";"\067\101\073\052\071\112\086\115","\104\047\090\071\099\115\098\043";"\099\088\081\051\043\049\048\117\119\090\074\107\106\081\117\061","\065\052\053\072\118\100\061\061";"\078\072\111\097\109\098\068\120\084\076\050\084\107\097\117\061","\070\066\120\119\115\055\113\074\077\069\085\112\057\100\061\061";"\074\067\065\068\090\104\074\108\098\089\080\057\114\051\048\103\106\085\057\074\043\055\111\098","\120\071\076\079\075\081\108\071\089\111\053\110\104\084\089\061","\099\052\078\077\081\110\072\121\071\089\061\061";"\077\098\089\117\087\108\102\111\114\056\103\087\057\066\061\061","\073\121\075\105\122\109\051\043";"\068\089\061\061","\075\089\106\053\118\102\122\050\090\099\072\079\081\109\104\088\079\100\061\061";"\100\106\053\050";"\078\082\071\090\119\079\066\073\097\082\120\077\084\066\061\061","\113\098\099\102\056\121\087\049";"\082\074\067\050\043\047\105\061","\120\068\078\103\071\051\120\082","\098\112\077\055\072\089\061\061";"\084\071\051\085\052\056\071\072\071\072\061\061","\070\104\114\090\078\100\061\061","\099\099\055\051\053\100\061\061";"\100\111\085\069\102\079\084\099\104\056\103\108";"\112\067\048\087\069\047\047\065","\078\106\088\053\112\088\065\049\087\067\070\122\119\100\072\061","\097\077\101\103\057\055\067\078\116\119\103\100\090\047\113\072\073\105\105\061";"\113\086\104\075\070\107\084\118\078\118\050\052\090\114\102\088\050\119\109\061";"\090\078\049\068\113\115\073\112\072\073\057\111";"\090\086\057\085\066\051\076\107\056\085\089\061","\075\112\054\077\050\072\061\061";"\120\086\103\075\104\054\114\061","\098\068\089\122\049\047\047\107\087\057\070\089\070\072\061\061";"\102\117\079\068\103\052\053\112","\122\070\086\120\055\068\101\106\069\104\053\109\116\075\065\103\114\089\101\069","\057\080\106\118\052\056\115\106\078\066\098\069\043\043\114\115\122\085\102\061";"\074\102\086\071\069\110\122\085\084\101\055\068","\116\051\048\082\107\056\106\073\081\051\107\048\114\065\047\090";"\097\072\080\088\109\077\069\061","\066\100\061\061";"\098\121\079\071","\101\114\103\117\098\117\116\078\055\108\114\061";"\050\100\112\079\079\090\074\056\119\081\114\061","\090\057\106\088\051\051\082\070\069\076\054\104","\111\066\061\061";"\085\052\119\110\079\089\061\061";"\047\072\097\066\088\048\072\099\052\082\102\049\082\100\061\061";"\116\103\106\106\088\100\079\115","\115\117\052\111\099\113\105\061";"\111\083\097\067\081\056\113\065\115\100\061\061","\119\102\051\066\079\111\056\072\089\122\066\097\099\076\077\105\107\070\090\114\098\100\120\118\112\072\105\061","\084\102\112\055\077\099\107\061","\101\066\061\061","\077\121\087\050\102\054\121\087\043\078\072\061";"\085\073\048\117\074\072\061\061","\081\107\105\118\081\071\111\098\043\120\102\080\078\089\061\061","\053\110\056\043\102\070\108\047\117\099\075\054\066\100\061\061";"\090\108\117\048\120\078\076\106\070\056\079\116\088\068\121\049\116\089\061\061";"\088\118\079\065\070\055\070\120\078\100\061\061";"\085\047\101\098\114\089\061\061","\098\106\080\047\052\055\066\112\080\068\114\061";"\113\072\107\047";"\112\107\049\072\112\086\121\068\114\053\105\061","\047\072\061\061","\119\088\066\102\057\089\101\061";"\074\067\121\111\073\115\104\082\052\109\122\103\066\051\085\050\076\053\111\061","\084\066\043\057\085\043\087\065\115\049\085\049\077\107\076\088\071\099\087\074";"\088\078\057\101\054\072\061\061";"\083\077\066\114\068\050\102\061";"\113\048\104\084\117\085\099\111\068\090\069\061";"\101\048\054\117\083\076\119\088\098\070\098\084\067\118\087\112\109\100\061\061";"\121\100\086\117\086\115\106\113\088\122\053\102\089\057\084\048\072\079\104\119\088\052\122\117\051\117\098\078";"\110\116\105\089\052\105\099\112\120\056\120\075\069\080\099\083\087\043\102\074\090\073\106\102\085\079\114\110\066\068\112\066\105\082\074\054\074\073\069\101\122\112\052\072\118\047\070\067\113\106\048\054\069\121\071\072\068\106\119\112\069\080\074\055\070\098\098\055\056\119\108\066\082\103\088\043\097\069\114\076\103\107\049\069\108\070\069\066\047\084\052\086\107\069\119\050\084\049\118\056\070\067\052\122\066\089\061\061","\075\066\105\084\090\120\119\066\081\101\103\119\086\078\109\061";"\073\043\047\080\106\075\109\061","\086\089\061\061";"\057\120\047\084\121\097\072\049\071\089\061\061","\101\084\076\118\085\100\061\061";"\065\104\077\086\111\057\066\082\114\089\070\072","\078\057\117\090\075\072\101\061","\077\077\081\099\051\119\056\070\054\081\066\120\080\111\102\061";"\067\106\070\048\113\043\075\111\083\072\061\061","\083\118\057\068\057\089\061\061","\112\087\071\110\047\087\075\101\079\081\050\102\084\107\052\076\120\072\061\061";"\082\097\052\102\104\083\048\069\120\118\122\115";"\071\082\102\056\055\080\100\121\054\082\079\069\066\100\061\061","\084\067\089\061";"\085\074\075\084\119\066\061\061";"\078\122\104\056\087\103\117\061","\056\071\067\079\114\054\114\061";"\051\089\061\061";"\067\103\112\102\076\122\090\048\103\117\068\073\097\100\061\061";"\112\089\071\097\068\117\080\116\052\084\078\065\113\047\088\053\101\077\072\061","\077\072\061\061","\108\078\085\100\043\102\051\074\120\075\116\111\079\119\080\109\103\069\066\061","\098\122\111\067\073\090\048\109\078\050\088\071\100\048\117\061";"\050\074\098\118\089\109\047\055\110\102\072\052\051\048\048\114\073\079\069\069";"\113\072\078\082\115\107\115\075","\107\108\078\057\112\074\118\050\102\111\053\052\090\072\061\061";"\069\078\072\105";"\111\071\072\074\088\077\083\097\090\081\081\108\101\075\066\066\088\115\118\118\067\049\079\117\084\053\071\071","\111\119\047\106\122\104\048\061";"\067\084\073\107\114\119\114\080\117\048\055\099\052\100\061\061";"\054\071\117\057\054\056\084\047\078\103\086\102\078\082\102\061";"\086\114\072\115\069\072\061\061";"\116\075\106\108","\043\069\105\087\048\068\107\061";"\107\110\107\057\053\106\100\061";"\081\089\117\054\065\086\114\099","\088\082\119\049\069\072\053\118";"\073\066\098\049\047\119\077\086\109\112\088\098\097\069\105\061","\055\089\079\110\078\070\098\081\117\090\110\103\066\100\120\074\065\052\100\061","\100\119\072\121\102\115\056\054\109\079\111\061","\057\108\122\067\088\075\069\122\106\111\100\069";"\068\109\099\053\106\073\055\117","\108\113\099\071\078\115\057\117\114\122\109\071\051\112\047\056\088\102\067\100\079\104\066\086\111\089\068\113\120\085\100\070\055\070\071\114\084\090\089\077\068\053\111\061";"\052\077\122\098\116\068\080\104\104\080\100\117\054\072\061\061";"\067\114\116\053\111\072\061\061","\084\112\078\053\089\103\071\054\120\105\102\100\073\100\061\061";"\117\086\057\087\120\088\112\076";"\048\049\075\043\055\069\098\089\080\100\061\061","\087\099\047\080\097\108\109\061";"\047\065\098\107\081\056\106\061","\106\118\049\108\119\067\082\065\118\101\097\069\054\070\074\103\114\082\105\061","\069\098\055\116\110\100\061\061","\053\065\112\115\117\053\068\066\073\066\065\113\069\101\079\081\099\114\122\079\076\100\061\061","\102\113\068\105\049\055\100\057\080\108\101\071\103\100\089\061";"\054\078\110\085\100\082\110\074";"\054\113\079\078\071\069\120\111\047\114\081\076\084\118\114\110\049\070\043\087\080\074\111\087\088\066\088\053\078\115\104\106\076\071\076\078\074\047\098\100\050\072\061\061","\076\076\107\061";"\114\102\098\055\075\110\083\108\066\072\061\061","\090\116\070\119\054\051\048\070";"\072\087\051\067\069\082\120\086\076\099\053\047";"\050\115\056\074\065\119\051\053\070\047\076\118\048\121\114\109\052\115\090\113\112\057\105\075","\047\043\110\108\121\114\073\120\085\075\072\082\080\066\061\061";"\043\121\084\043","\050\120\051\054\118\122\121\066\121\102\111\098\116\066\061\061";"\050\068\056\107\110\078\049\075";"\066\075\089\112\050\100\061\061","\077\079\069\098\104\109\107\112";"\080\085\043\117\053\104\111\081\122\056\090\115\089\083\067\116\081\073\090\077";"\100\097\101\108\103\114\098\090\099\099\107\061","\106\078\084\111\054\111\107\055\114\086\073\109";"\120\047\098\055\110\072\074\111\089\054\047\108\071\116\111\061","\070\068\103\090\078\121\111\061";"\109\072\053\067\075\048\102\053","\086\103\101\078\099\050\112\077\051\087\089\080","\114\077\099\109\076\074\089\047\114\054\099\068";"\073\051\078\097\085\072\061\061","\117\082\085\090\102\121\121\090\115\077\101\112\084\079\090\066\104\055\085\079","\120\112\070\054\104\088\106\061";"\077\108\077\070\105\071\113\053\102\086\110\089","\108\052\112\050\081\112\085\057\086\081\118\111\111\051\115\087\079\066\061\061";"\098\111\101\121\055\074\122\080","\081\056\056\075\043\117\120\050\070\122\065\043\043\084\089\052\097\050\048\061","\114\117\051\108\048\102\071\074\080\104\107\105";"\100\106\077\105\065\108\048\061";"\118\073\076\102\071\118\119\087\073\047\105\061","\118\081\048\098\048\055\050\068\107\083\069\061";"\077\089\067\105\086\088\085\066\078\106\097\102\116\100\061\061","\090\048\120\118\114\082\101\043\090\112\089\061","\111\065\113\066\089\066\078\057\053\083\097\069\087\082\122\097\114\104\069\061","\048\085\072\051\114\049\105\043\075\066\061\061";"\122\098\057\078\105\106\109\090\121\090\052\051\107\066\061\061","\088\097\065\122\102\100\061\061","\097\108\050\087\047\119\111\079\115\072\081\043";"\056\112\043\090\118\070\105\067\048\066\111\061";"\053\048\111\098","\113\073\090\074\097\049\113\101\119\049\081\057\066\057\087\107\117\098\111\061";"\068\049\104\054\118\071\055\069\088\114\089\061","\051\102\083\108","\075\077\082\108\065\080\116\101\088\085\056\084";"\049\056\110\108\097\119\120\070\081\101\055\101\076\072\061\061";"\074\077\072\117\081\083\066\051\114\056\100\047\108\100\043\052\118\100\066\061";"\047\066\061\061";"\121\053\056\101\115\057\102\103\075\048\077\121\050\075\106\108\055\072\061\061","\055\098\115\069\120\074\072\061";"\083\048\100\090\081\116\117\087\117\114\084\083\076\089\061\061","\080\100\069\109\116\089\061\061";"\121\052\071\057";"\080\080\114\072\113\081\049\076\067\074\052\056\085\112\080\067\099\107\105\061","\121\089\061\061","\080\108\054\043\087\065\048\061","\084\086\055\122\117\051\082\122\071\089\061\061";"\086\117\115\085\090\054\110\099\098\065\069\061","\071\115\077\122\052\074\050\121","\077\070\078\102\068\116\051\110","\111\120\048\090\084\066\090\109\106\089\061\061";"\068\116\083\118\111\052\103\105\054\057\072\084\089\079\078\089\047\075\116\117\076\056\119\051\071\121\110\112\067\066\061\061";"\122\088\047\087\052\072\061\061","\066\112\050\101\055\054\073\106\074\121\104\076\077\089\090\043\073\108\074\101\118\099\088\071","\048\097\085\115\079\056\075\122";"\120\072\120\090\102\077\114\049\073\079\117\061";"\065\047\120\110\088\074\084\070\051\086\077\050\099\120\070\071\114\048\106\061","\066\074\103\114\090\066\085\074\052\117\110\054\050\066\061\061";"\099\087\065\109\100\089\061\061","\101\078\066\072\111\068\052\047\070\111\057\077\115\067\054\110","\119\103\090\070\119\089\061\061","\108\103\097\080\103\080\080\057";"\069\103\085\067\080\089\061\061","\098\056\066\050\110\114\043\075\112\104\116\109\101\099\068\075\065\085\107\061";"\083\101\056\109\050\072\061\061";"\076\084\118\052\069\098\114\097\118\121\078\100\084\117\111\084";"\097\090\117\097\047\083\085\086\068\089\061\061";"\111\065\104\109\071\084\072\106\074\101\067\057\043\070\101\054\051\079\089\097\117\083\074\105\085\089\061\061";"\055\103\110\076\111\115\085\086\047\100\061\061";"\069\076\079\056\089\099\122\047\102\077\100\061","\080\076\101\055\043\089\061\061","\119\076\081\085\066\112\109\061","\101\047\065\078\056\089\061\061";"\079\072\057\112\109\054\105\061","\084\088\104\119\088\066\061\061","\099\105\104\054\119\056\100\086\112\100\061\061","\076\072\061\061","\087\115\085\054\053\067\100\086","\099\082\068\108\109\081\110\104\114\105\054\049","\066\083\100\089","\081\121\104\069\075\069\074\054\056\103\118\056\120\089\061\061";"\053\080\077\072\100\084\069\061";"\080\118\108\043\080\054\097\053\090\114\099\048\116\098\121\081\087\122\056\081\047\066\061\061";"\076\114\079\052\105\084\105\061","\067\103\118\085\083\122\099\073\074\068\075\122\073\119\076\118\118\072\061\061","\085\083\087\067\100\119\050\119\048\116\099\106\077\072\061\061","\067\119\113\079\114\072\061\061";"\117\084\085\119\043\116\052\055\052\055\109\119\122\111\067\088\054\116\102\061","\052\115\112\107\109\079\097\070\083\115\047\051\109\100\061\061","\057\068\084\054\100\090\089\106\065\086\103\089\073\120\071\107","\075\121\114\043\066\072\061\061";"\083\122\077\115\114\100\061\061","\043\069\082\105\048\117\089\112\067\051\101\061";"\107\101\082\051\109\089\061\061","\110\070\071\053\076\065\100\061";"\107\083\116\052\049\099\071\087\081\069\105\106\097\065\047\115\116\089\066\061","\110\089\070\057\114\112\074\071\079\074\071\106";"\072\101\109\089\117\082\079\054\089\102\072\081\051\089\085\061";"\069\111\120\107\114\100\089\061";"\109\109\066\082\079\076\104\082";"\081\120\098\053\057\099\117\078\100\119\112\087","\079\121\068\108\070\084\069\086\050\072\065\115\071\105\088\107\099\116\066\061","\069\048\119\057\087\066\061\061";"\056\086\049\078\104\116\048\061","\066\072\061\061","\110\119\056\074\107\103\051\069\122\054\098\097\050\102\082\080\054\077\119\054\077\052\115\078\120\121\103\072\100\112\082\086";"\074\088\048\113\086\089\078\106\110\097\066\117\050\047\115\050\118\100\061\061","\102\116\051\083\043\079\076\069\043\102\071\115\100\100\061\061","\053\048\077\065\043\076\049\077\085\118\083\106\077\055\113\075";"\047\065\079\072\074\089\061\061";"\077\055\085\086\071\107\119\087\083\065\103\119\066\086\105\049\118\118\117\061","\088\103\119\072\049\089\061\061","\110\072\119\087\117\115\090\098\080\099\099\097\072\110\079\072\097\098\107\061";"\057\076\087\076\108\075\107\077\113\116\101\061";"\070\057\054\075","\097\055\074\070\077\078\107\066";"\111\076\071\107\079\075\057\100\052\119\105\086\087\100\053\114\083\113\066\061";"\073\119\053\122\119\122\075\104\065\076\072\087\075\068\054\120";"\090\053\057\055\049\103\047\073\099\097\067\043\097\098\107\073\101\103\109\061","\105\049\076\106";"\115\066\078\104";"\074\121\118\075\112\066\061\061","\083\074\071\049\078\053\067\068\116\087\115\054\101\120\097\073\073\100\061\061";"\106\069\081\066\088\073\114\070\076\069\077\056\089\066\061\061";"\076\101\086\100\048\080\101\061","\074\110\048\055\076\073\100\114\069\104\115\114\055\055\069\061";"\047\054\069\107\088\080\079\086\088\090\105\102\119\108\052\047\121\050\066\061","\114\102\050\098\057\068\089\080\112\121\104\120";"\076\111\084\053\110\069\043\110\098\066\053\074\121\081\110\102\069\106\107\082";"\085\115\073\089";"\089\097\105\099\050\052\109\053\043\082\075\097\071\068\084\100\109\100\061\061","\120\105\114\078\086\066\061\061";"\105\100\061\061","\082\115\112\100\080\115\111\097\053\087\120\076\048\055\099\043\102\100\061\061";"\107\050\076\090","\105\109\116\100\050\090\073\072","\106\100\049\074","\104\083\084\113\077\113\071\098\070\082\069\061";"\086\080\068\102\089\100\061\061","\048\113\057\069\086\051\101\075\056\049\120\114\116\072\061\061";"\054\109\050\079\071\103\113\084","\119\065\099\116\112\097\111\061","\075\072\054\081\078\098\079\069\084\108\121\054";"\084\099\055\049\084\047\082\086","\102\074\071\110\050\097\048\066\104\071\090\122";"\087\098\052\055\047\052\106\054\049\099\111\071\074\119\111\106\101\118\102\050\114\080\113\117\067\074\072\054\085\076\116\100\110\048\074\073\050\122\069\120\071\090\106\100\100\103\057\086\105\117\069\072\117\074\047\118\122\107\105\107\075\090\054\102\043\112\116\051\104\089\061\061","\043\086\118\048\057\080\056\071\054\066\061\061","\050\055\080\110\097\082\080\076\065\089\061\061";"\082\119\052\086\085\111\050\057","\104\073\079\078\051\098\065\079\084\056\069\098\050\097\120\112\108\079\056\071\067\117\109\075\080\097\120\110","\083\116\054\119\053\117\117\061";"\122\043\066\120\080\086\051\106","\109\097\119\104\049\056\106\113\057\104\066\061";"\083\089\065\071\074\070\109\111\114\111\048\077\072\081\112\078\076\073\116\105\112\121\122\070\088\099\099\097\114\072\061\061";"\097\080\090\066\071\100\061\061","\111\101\104\056\052\072\121\108\085\119\068\056\080\075\089\110\112\053\089\086";"\085\049\043\050\117\066\061\061";"\084\070\104\055","\113\122\070\065\100\115\110\067","\067\079\057\088\102\102\056\055","\120\057\052\077\073\050\115\115\112\076\111\053\066\049\106\103\110\089\061\061","\108\082\087\120\104\050\110\070\107\101\107\061","\082\104\084\119\108\112\071\085","\081\102\048\077\051\050\076\110\105\052\072\114";"\071\075\100\068\115\089\051\052\049\089\053\074\109\120\053\101";"\066\099\074\068\085\072\061\061","\053\103\112\099\103\109\106\049\122\072\061\061";"\084\083\100\051\079\100\061\061";"\104\081\110\117\120\057\114\061","\072\057\113\048\056\108\120\048";"\122\105\114\082\067\100\061\061";"\082\110\121\055\105\089\061\061";"\109\114\100\076\103\072\067\080\113\118\083\117\119\088\103\100\121\072\089\061","\047\088\086\076\105\081\081\121\066\056\069\061";"\104\066\052\076\074\120\090\112\078\081\081\099\069\079\049\111\104\075\066\061","\053\107\100\098\078\103\080\074\106\067\072\115\066\088\080\052";"\098\102\101\072\070\118\114\052\121\056\075\121";"\113\088\043\109\118\102\099\106\117\107\065\090\047\088\100\112","\081\081\083\085\098\072\061\061";"\083\118\090\110\069\065\114\085\066\053\082\116\086\067\115\109\110\106\102\061";"\043\105\107\053\084\047\074\121\072\053\097\114","\066\054\113\121\121\105\109\061";"\052\119\084\043\083\110\076\110\104\105\117\086\068\119\118\054\049\103\116\116\072\109\109\061";"\066\082\066\103\109\065\068\110\079\056\100\048\113\106\114\061","\074\083\054\100\051\122\109\083\049\072\061\061","\070\121\119\107\120\076\109\070\053\051\108\084\090\106\049\099\121\100\061\061";"\090\114\082\047\071\056\069\061";"\104\115\088\057\083\100\061\061";"\081\112\089\103\105\053\098\086\097\068\098\109\090\069\090\085\105\068\104\071\048\054\106\048\049\043\103\108\083\082\049\107","\072\079\088\109\110\087\107\109\117\073\098\109\105\115\082\071","\115\090\103\078\113\072\061\061";"\104\098\043\112\104\120\072\061";"\077\117\118\086\120\057\104\100\098\086\051\120\105\089\061\061";"\067\102\051\097\075\103\084\049\084\080\114\116\074\121\102\107\050\118\117\065\110\066\061\061";"\117\086\108\102\081\099\054\054\043\051\051\088","\077\048\066\105\122\080\065\121\117\056\098\119\112\049\069\053\115\112\119\087\055\115\043\067\121\057\108\090","\088\081\113\090\086\081\052\075\065\076\057\108\072\085\068\115\089\111\086\104\102\079\043\107\089\099\069\082\109\089\061\061";"\077\056\084\076\121\076\073\110\101\069\081\121\116\122\090\112\072\066\061\061";"\043\047\109\050\118\077\066\074\068\071\101\061","\065\066\055\053\051\105\054\043\070\072\061\061";"\056\051\078\098\080\108\119\088","\074\072\061\061","\080\100\105\054\102\070\122\068\053\066\048\051\074\100\061\061";"\110\055\043\068\089\121\105\061","\088\066\061\061";"\088\114\122\119\110\120\086\049\053\072\111\098\099\116\115\115\085\110\107\061","\116\089\088\050\115\088\080\075\088\066\061\061";"\104\082\069\115\075\054\088\107\065\111\081\073\081\087\117\071\085\114\089\112\097\087\070\085","\072\084\073\106\075\047\067\101\083\070\085\050\049\088\105\105\055\048\106\061","\115\070\081\116";"\075\074\102\104\087\067\097\105\101\089\061\061","\116\079\098\083\102\072\061\061","\090\069\071\118\086\106\098\119";"\072\057\078\065\070\118\050\080\079\043\048\067\097\114\116\108\104\055\078\090\119\082\100\110\099\071\049\102\078\050\108\122\067\089\101\103\111\089\090\077\065\122\097\084\049\075\051\087\065\076\077\097\077\117\087\065\069\087\100\097\119\115\078\070\069\112\070\084\043\048\103\114\080\052\112\104\083\105\089\080\053\119\084\052\078\048\070\048\069\122\107\061","\077\072\080\071\103\122\086\071\113\050\118\115\080\112\108\098\106\066\111\122\104\082\112\087\118\116\083\057";"\119\078\055\051\049\086\104\084\055\104\053\117\088\071\117\061","\077\050\117\084\122\111\117\115\119\050\069\120\070\072\067\111\050\105\117\061","\115\047\068\086\048\072\061\061","\085\075\054\118\105\100\061\061";"\074\107\089\069\066\072\061\061";"\089\047\076\052\043\080\087\107\072\052\048\061","\071\057\082\076\055\066\061\061";"\110\053\108\113\101\066\087\108\116\105\082\116";"\105\074\122\114\057\115\121\117\109\053\108\078\102\066\081\100\120\106\098\084\056\089\061\061","\050\100\047\112\069\076\085\061","\117\109\097\119\106\119\079\079\103\072\061\061";"\069\112\104\084\112\100\061\061","\111\109\078\108\073\066\061\061";"\102\109\072\053\100\111\115\066","\089\107\053\057\070\066\061\061","\122\066\061\061","\107\088\066\049\086\118\070\049\106\081\089\061";"\111\074\107\102";"\113\090\088\055\087\119\079\053\084\080\118\098\069\076\119\090\047\073\080\101\080\078\055\102\081\117\114\119\101\072\061\061","\056\082\053\052\122\066\089\053\043\089\043\115\072\090\106\061","\081\079\100\069\055\066\105\048\054\089\109\050\110\079\049\098\097\056\055\080\116\069\117\054\104\070\104\118\079\111\112\053\074\083\083\120\077\085\065\082\109\047\087\083\098\103\117\084\117\097\121\053\074\107\122\089\088\111\086\111\071\122\109\109\065\072\102\051\113\119\043\097\115\083\079\089\047\070\099\089\121\106\047\111\047\067\070\054\086\072\061\061","\073\082\075\099\053\071\048\115\071\089\061\061";"\079\087\097\081\076\072\061\061","\090\116\110\074\122\109\102\082\106\043\070\065\074\115\090\104\054\111\081\078\098\101\080\090\083\065\097\071\055\080\097\098\078\115\111\071\101\099\106\074\076\114\068\051\057\069\120\089\115\118\100\106\085\053\066\070\057\120\116\055\120\055\055\072\122\102\078\117\053\068\090\079\083\115\122\107\109\075\116\110\103\081\111\061","\109\070\075\051\083\069\100\077\085\105\117\061","\109\107\082\068\070\071\117\061";"\079\051\109\073\086\066\061\061";"\089\057\066\100\073\073\088\118\083\071\056\077\100\054\043\088\048\053\051\100";"\043\048\043\097\083\072\061\061";"\089\080\072\081\104\043\099\102\106\078\101\048\098\107\105\066\088\101\105\061","\087\115\116\108\056\100\061\061","\069\066\061\061";"\065\082\077\051\109\089\061\061","\119\084\109\088\053\076\071\101";"\051\078\076\119\108\065\120\114\117\087\109\061","\102\118\076\102\086\120\100\106\090\078\104\068\077\113\104\089";"\071\102\121\080\066\088\068\109\050\111\079\104\122\074\066\061","\117\112\080\106\101\112\049\090\115\079\077\105\101\072\061\061","\105\066\061\061","\047\071\088\056\119\050\083\052";"\057\076\105\117\089\072\061\061","\112\056\085\049\072\076\077\067\087\075\120\106";"\114\078\053\052","\102\070\053\084\070\119\099\087\043\067\100\061";"\109\057\101\078\104\105\105\105\087\114\089\114","\097\090\065\109\071\089\061\061","\074\073\079\108";"\065\120\090\106\067\084\114\111\118\076\049\052";"\056\097\119\102\074\116\066\111\082\106\088\100\120\119\053\103\086\087\048\061","\118\066\061\061","\068\072\114\087\116\089\090\120","\113\099\073\099\051\089\061\061","\112\120\117\051\043\072\061\061","\114\101\118\055\121\105\105\112\118\121\121\057\118\053\121\078\087\066\061\061","\097\121\076\070\082\080\050\108";"\043\073\118\076\047\099\100\072";"\122\106\103\047\120\066\101\068\085\049\079\102\069\056\081\105\080\077\067\088\102\071\083\118\116\043\097\101\106\066\061\061";"\082\121\116\084\083\082\080\078\099\110\117\061","\103\106\081\051","\067\072\107\114\085\071\104\067\074\083\108\080";"\074\109\120\065\103\110\079\099\073\114\043\101\117\088\071\107\097\100\061\061","\086\103\049\106\068\072\061\061","\114\082\087\104\075\117\100\067";"\087\086\072\097\068\084\086\088\110\120\085\053\084\072\057\054\047\086\103\107\082\101\066\118\049\069\107\120";"\102\075\048\071\085\068\054\072","\111\055\049\057\074\066\052\082\122\056\069\108\098\070\072\061";"\070\099\085\088\083\086\067\052\087\078\120\119";"\075\109\085\077\052\076\052\104\070\087\115\087\051\070\075\055\100\089\061\061";"\087\068\120\056\099\084\117\061";"\084\077\079\118\100\071\054\053\082\084\085\061","\112\075\112\101\117\110\054\085\047\115\110\097";"\054\113\098\100\078\103\072\061","\056\099\109\056\068\113\090\081\073\100\061\061";"\105\073\110\077\097\053\114\097\050\115\100\100\072\072\061\061","\080\065\117\066\089\100\061\061","\078\065\112\100\073\077\049\084","\051\080\112\069\049\090\082\097\107\052\097\115\108\102\109\061","\122\071\077\069\077\070\090\049\086\097\117\056\099\049\072\049";"\102\110\107\068\048\080\084\086\083\099\088\071\102\051\104\084\070\117\109\061","\068\102\053\100\070\097\057\113\085\110\097\057\109\043\105\099\074\072\061\061";"\113\089\043\103\117\070\103\071\067\086\081\043","\115\118\083\049\114\100\061\061";"\107\083\107\113\118\089\061\061","\109\109\110\089\100\111\119\079\068\119\114\047\099\105\106\061";"\065\043\107\105\101\089\061\061";"\105\052\112\085\074\084\114\061";"\074\075\077\051\073\106\084\065\066\048\089\115\065\072\061\061","\119\108\120\047\090\054\081\072\054\100\061\061";"\111\075\053\079\121\053\078\111\073\078\100\118\054\072\061\061","\072\087\104\067\079\077\056\052","\087\113\051\052","\089\112\073\083\079\121\050\115\051\079\110\108\120\109\054\102\066\108\121\113\082\072\061\061";"\083\116\047\100\099\072\061\061";"\047\067\088\067\078\081\108\076\086\110\107\061";"\105\077\106\106\111\099\106\061";"\111\100\106\110";"\054\099\053\088\069\121\117\052\116\118\119\076\109\121\116\086\047\067\083\106\056\088\054\079\047\108\119\081\082\101\087\085\086\113\065\078\048\043\078\105\085\106\118\103\052\066\043\114\100\074\107\061","\057\048\069\083\121\105\089\054\099\118\111\061","\106\089\118\070\114\107\089\061";"\099\075\074\071\102\043\075\054\082\112\068\089\056\047\114\061";"\053\054\083\108\086\066\109\048\049\072\109\113\074\119\051\076\086\107\122\101\052\074\084\087\099\088\082\070\113\049\077\116\074\055\074\085\111\053\100\118\102\049\084\084\056\082\108\112\081\057\089\072\054\065\088\065\116\100\112\110\043\101\073\105\116\077\119\082\090\074\121\089\102\107\106\100\107\078\073\047\117\118\103\122\119\117\114\054\115\086\103\117\043\076\106\072\078\065\116\118\117\056\102\075\083\053\079\098\083\105\114\055\047\080\106\107\057\066\107\114\081\070\054\055\081\107\121\101\048\090\120\083\100\113\073\108\101\106\067\118\043\113\086\056\117\101\116\119\049\047\082\085\083\121\088\111\047\115\122\111\087\089\061\061","\113\072\061\061","\079\113\073\101\073\072\061\061","\066\106\107\056\057\099\075\073\089\100\061\061";"\080\057\066\083";"\121\106\048\112\065\089\061\061","\048\122\072\076\052\086\084\043\086\108\078\065\078\075\052\102";"\082\098\047\102\102\097\052\121\075\072\061\061";"\113\056\089\098\117\072\061\061";"\072\052\097\086\112\047\068\113\048\047\085\061";"\050\105\048\105\109\072\061\061","\103\048\086\077\116\106\089\067\083\043\074\053";"\085\077\082\100\069\088\120\109\073\070\110\086\055\081\076\099";"\057\117\069\085\109\051\089\088","\055\052\118\052\053\049\117\112";"\050\066\061\061","\054\120\081\090\098\102\112\066\066\113\083\065\111\120\112\121\085\049\122\067\084\117\102\061";"\050\053\072\102\088\066\061\061","\115\111\088\103\089\102\111\061";"\087\047\100\070\080\071\070\114\079\050\074\070\104\072\054\090","\078\098\057\070\108\086\121\047\089\085\121\070\120\111\101\076","\102\068\103\120\108\070\108\069\109\082\106\066\049\106\049\077\120\112\115\082\084\116\056\074";"\120\066\061\061","\088\083\084\108\114\114\085\109";"\121\079\065\052\113\084\089\090\049\072\061\061","\088\077\106\052\055\072\061\061";"\055\113\117\107\051\103\105\061";"\055\085\067\101\113\047\065\084\102\097\048\061";"\048\072\061\061","\047\067\074\083\099\100\106\061","\054\085\078\090\110\066\070\122\117\083\111\061";"\089\117\117\074\102\080\080\050\110\102\097\069\048\084\106\119\049\075\077\106\116\066\061\061","\087\089\061\061";"\110\079\122\111\082\099\089\110\082\101\088\076\119\099\066\061";"\086\066\061\061";"\112\081\099\070\097\109\117\051\050\100\086\085\056\100\121\057\074\112\100\061";"\084\088\119\075\119\072\109\050\052\113\083\110\066\105\049\048\075\053\089\061";"\076\101\081\055\076\101\078\057";"\116\088\071\102\109\055\085\102\099\109\043\105\104\086\098\074\072\054\112\111\105\107\109\061","\110\080\065\076\067\101\077\107\103\053\120\101\108\053\109\061","\106\116\118\078\066\048\111\104","\057\104\119\074\120\104\069\082\067\057\117\061","\048\055\087\047\112\109\102\068\102\076\084\056\071\066\102\119","\082\066\090\078","\107\115\106\057\100\087\066\068\104\104\103\088","\073\120\053\055\106\082\085\061";"\120\112\052\049";"\066\052\103\088\116\087\079\056\108\085\097\051","\053\118\088\098\052\069\048\061";"\107\086\069\082\098\122\121\084\087\099\102\043\078\072\061\061";"\097\100\103\070\086\100\061\061","\104\071\068\074\098\054\068\122\081\051\049\076\081\082\122\085\098\089\061\061","\085\067\079\120\043\089\061\061";"\072\051\043\074\084\072\061\061";"\085\070\068\048\119\101\079\066\108\118\078\049","\084\067\053\057\090\108\081\106","\097\089\069\061";"\090\110\099\051\119\082\100\061","\120\101\109\067\115\089\061\061","\097\085\100\085\073\066\061\061";"\089\051\074\073\105\085\085\061";"\051\080\099\108\080\086\066\122\120\113\115\068\047\076\121\120\104\100\061\061";"\049\107\110\052\112\107\072\061","\054\078\054\053";"\100\121\084\081\073\067\122\105\083\076\110\043";"\118\112\108\068\106\055\089\061","\048\120\104\069","\084\065\048\116\113\122\072\088\053\074\073\097";"\084\047\109\061";"\051\049\043\084\099\119\102\099\116\117\053\116\052\089\103\048\067\089\061\061","\103\057\121\053\085\048\107\121";"\076\100\081\105\078\120\066\061","\082\114\053\065\113\105\087\101\111\079\119\084\110\100\061\061";"\085\086\076\055\085\083\082\068";"\043\122\055\078\047\082\122\067\116\083\122\072\075\102\112\116","\099\121\106\075\120\120\080\113";"\108\075\079\119\120\049\097\117\100\114\119\106\118\072\069\083\069\043\056\088\119\056\047\089\107\120\076\074";"\113\082\104\112\049\099\118\079\109\084\050\112\052\116\048\083\121\072\061\061";"\081\117\090\071\116\065\122\086\055\047\076\085\086\066\061\061","\110\077\066\110\082\101\108\081\088\103\111\116\083\100\115\083\105\065\097\056\087\084\043\108","\088\081\080\072\082\078\119\054";"\051\122\070\117","\082\107\086\089";"\082\072\061\061","\105\116\069\050\082\114\109\078\114\109\076\108";"\087\100\061\061";"\074\079\120\088\043\079\069\116\105\099\067\055\068\107\111\061";"\047\052\119\083\109\072\066\061","\108\070\118\057\119\083\075\079\068\056\054\068\117\081\106\043\104\122\048\061","\049\088\057\067\073\050\077\100\118\074\072\061","\049\066\061\061";"\078\112\072\053\113\071\122\099\102\111\072\061";"\056\053\114\067";"\047\047\066\081\065\099\077\098\078\113\083\098\116\089\061\061","\115\074\056\088\049\120\103\083\072\075\065\099";"\100\104\067\057\085\098\078\110\105\078\071\082\069\102\079\067","\118\075\065\070\109\083\078\048\066\050\066\098\098\100\061\061","\056\076\073\043\055\073\073\077\049\072\061\061";"\102\066\061\061";"\053\070\106\090\108\068\048\061";"\075\072\083\112\109\065\121\056\101\047\055\079\057\053\110\078\103\049\085\061","\120\049\069\104\099\113\074\113";"\116\081\087\084\113\104\108\110\101\089\115\087","\049\088\054\056\099\101\048\119\087\050\120\118\081\112\116\050\117\043\097\056\098\066\061\061","\053\103\054\084\112\100\061\061";"\056\081\110\071\057\080\085\103\075\106\068\112\111\066\061\061","\114\108\103\066\050\110\068\113\099\088\101\061","\054\079\048\121\098\100\099\068";"\068\080\116\103\108\086\119\076\115\055\100\121\079\054\076\054\101\050\072\061","\105\051\081\089","\103\069\112\087\055\121\102\116\052\077\069\102\121\052\108\071\079\106\111\061";"\121\106\110\119\055\078\115\103\073\105\102\073\088\111\055\117\080\087\066\061";"\076\069\068\077\049\065\079\043\067\079\070\090","\115\115\118\052\107\083\066\061","\088\088\051\065","\057\051\054\077\070\113\089\089\052\117\121\113","\052\072\056\107\082\073\049\112\078\078\075\081","\115\050\121\078\086\107\080\066\070\121\099\048\081\086\052\080";"\072\076\081\085\116\086\102\056\084\089\061\061","\111\114\101\076\053\067\072\112\122\066\077\080","\075\088\050\117\101\068\089\061","\056\071\119\113";"\079\067\118\090\054\117\055\051\084\066\111\061";"\056\074\077\088\048\066\061\061","\105\057\081\053\118\089\061\061";"\097\068\118\106","\090\090\084\106\048\070\048\068\067\098\108\090\119\113\105\116\088\055\105\061","\107\073\075\055\076\089\106\112\053\097\074\069\104\100\102\055\078\113\089\061";"\072\111\065\067\074\066\073\051\110\114\110\087\077\072\061\061","\113\066\061\061","\115\057\072\080\073\089\061\061";"\109\100\067\055\069\104\070\043\106\078\109\061","\065\050\072\081\047\113\066\061";"\098\049\110\120\065\089\061\061";"\098\112\108\052\068\109\100\061";"\116\120\120\105";"\065\055\113\089\097\072\061\061";"\080\053\113\043\047\105\074\067\109\106\049\119","\051\052\071\106\121\100\061\061";"\076\082\097\070\053\055\069\061";"\097\114\102\067\113\107\086\121\099\072\061\061";"\115\049\050\048\087\117\050\048\070\057\051\078\122\122\100\077\089\065\047\084\057\085\098\071\106\056\066\077";"\075\111\116\047\081\048\078\048\090\072\061\061","\075\098\068\118","\089\110\071\077\069\071\077\043\073\072\061\061","\098\065\117\079\105\113\099\080\071\050\065\048\100\100\061\061","\072\048\085\122\066\077\049\047","\048\082\098\117\084\112\069\099";"\105\077\057\054\108\065\083\121\043\081\107\061","\088\068\048\112\080\099\112\100\065\053\114\061";"\051\090\071\070\066\057\104\120\075\106\100\061";"\076\066\122\066\079\099\118\072","\101\106\101\104\116\050\113\051";"\054\066\119\053\043\069\111\061";"\083\076\073\080\098\081\122\047\065\073\101\097","\103\049\077\069\070\065\089\061";"\065\109\071\107\043\107\055\073\086\105\108\066\048\118\121\101\081\072\061\061","\104\109\078\121\099\072\061\061";"\101\089\061\061";"\078\118\105\069\113\076\090\109\083\083\056\056\112\119\114\061","\072\049\085\078\086\056\089\102","\073\089\101\084\057\047\087\085\068\056\086\065","\051\083\078\101\102\053\100\074","\048\048\073\121\053\080\103\066\051\119\084\119\119\089\061\061","\047\108\080\073\099\054\115\121\102\106\080\088\086\082\054\079";"\067\097\047\074\048\116\066\106","\084\074\057\111\076\089\101\061","\081\103\086\097\080\055\105\071";"\090\083\076\107\104\047\097\069\102\056\117\114\117\076\106\078\074\043\109\061","\102\113\112\085\047\056\086\113\054\097\048\043\090\055\075\103\114\047\103\108\047\066\061\061";"";"\103\101\085\053\075\080\101\061","\052\068\077\084\105\082\070\101\082\081\109\117\114\104\117\121\052\079\101\061";"\100\097\115\112\065\053\069\061";"\066\083\069\055\100\055\043\100","\116\108\047\105\121\079\088\054\051\088\122\109\082\050\116\106\104\070\054\122","\085\088\108\104\107\112\116\116\098\074\102\121\081\109\055\050","\111\072\079\052\084\107\054\115\083\103\116\050\070\078\102\061";"\087\118\074\110\077\056\110\080\084\097\065\120","\104\103\084\110\077\072\061\061","\084\100\117\070\054\051\043\110\081\106\050\118\080\098\053\103\051\119\088\081\122\120\086\078\112\107\077\070\065\051\103\104\065\088\082\090\101\056\099\057\111\069\097\071\073\079\067\068\081\052\053\110\070\075\109\055","\070\049\098\050\113\048\047\089\118\081\082\078","\120\057\118\087";"\105\113\082\108\111\066\061\061","\075\056\054\110\065\054\076\108","\074\054\087\110";"\117\070\100\077\110\089\061\061";"\053\068\087\075\079\111\105\061","\106\113\075\090\087\110\070\066\109\073\098\109\048\084\053\101\113\120\109\061","\105\089\081\080\105\083\121\112\113\105\088\074";"\047\101\052\072\120\066\065\066";"\085\069\052\076\076\108\109\088\085\085\043\075\076\089\099\101\077\119\100\061","\075\054\111\068\117\066\061\061","\065\120\073\102\115\066\061\061";"\051\052\122\099\079\112\090\122\065\079\077\084\112\113\083\090\079\073\069\100\051\120\088\071\048\104\122\073","\087\066\075\049\068\051\078\090\057\076\078\065\087\118\069\098\050\110\114\061";"\072\075\111\081\080\052\048\106\106\083\105\071";"\048\079\077\119\100\050\077\050\109\054\117\061","\071\066\061\061","\087\111\081\043\120\122\120\071\079\087\112\106\047\065\081\119\110\072\061\061";"\051\119\090\103\098\072\061\061";"\106\068\088\053\084\103\088\082\075\098\072\061","\112\102\099\067\056\109\116\065\069\089\061\061";"\055\068\057\065\115\106\056\098\113\089\067\070\119\085\105\061","\070\089\111\103\083\072\061\061";"\068\078\114\114\121\105\048\069\112\050\090\075\078\111\104\067\120\066\061\061","\089\090\089\061","\105\052\076\102\099\116\101\108\104\112\089\100\119\122\047\117\052\068\051\081\097\072\047\114","\089\089\049\087\071\057\066\061","\102\049\050\070\111\098\112\079";"\090\071\106\117\090\104\105\054\100\073\083\075\082\074\116\050\119\122\069\105","\071\077\071\048\080\071\097\080\055\080\118\120\068\067\048\061";"\085\098\103\108\114\074\109\061","\050\089\061\061","\100\081\052\083\043\082\066\081","\086\065\117\056";"\115\078\103\047\048\066\061\061","\081\051\048\052\105\082\098\121\108\066\061\061","\080\053\049\106\068\103\105\061","\077\068\089\098\081\121\077\104\043\089\051\097\111\052\051\098\043\047\102\052\089\111\072\121\118\047\105\108\115\100\061\061";"\120\121\108\076\074\076\102\070\120\090\117\049\116\089\067\089\083\055\079\083\117\074\100\121";"\053\110\075\115\115\088\068\075\072\084\122\120\075\113\051\113","\075\066\076\056\047\100\104\100\109\089\061\061","\070\053\120\079\052\052\113\118\066\051\084\109\110\089\106\121\067\098\119\097\081\113\068\071\107\069\112\119";"\082\107\121\108\068\072\061\061","\043\121\114\071\108\101\069\100\087\100\061\061","\119\073\121\049\122\067\112\089\108\118\120\054\066\100\061\061";"\120\114\098\048\074\043\101\108\105\079\103\077\079\099\105\100\080\066\061\061","\082\065\106\079\112\118\070\109\066\055\112\067\099\107\078\075\089\100\061\061";"\072\085\049\117\068\112\107\052\110\084\114\075\047\101\054\074\097\073\105\061","\054\103\118\043\099\114\085\068\082\112\071\068\083\074\043\111\086\071\069\106";"\099\085\052\050\112\107\075\098\048\101\053\055\120\103\084\110","\073\097\052\102\070\082\047\082\107\054\089\098\122\114\085\107\114\118\072\061","\107\101\081\118\105\055\066\048\055\056\087\116\115\078\069\118","\078\107\067\066\103\081\121\120\066\057\105\061","\121\122\070\070\086\105\101\112";"\057\098\057\121\115\047\076\047\078\089\061\061","\078\082\082\054\069\122\106\061","\121\047\070\069\099\121\101\061","\088\113\069\047";"\052\117\051\057\104\089\111\061","\089\100\061\061","\118\078\075\081\071\054\115\072\047\066\061\061";"\099\086\048\118\052\102\088\053\049\106\100\050";"\085\097\122\110";"\073\056\087\109\117\109\076\103\047\118\048\113\055\054\102\061";"\090\111\106\057\084\078\102\061","\078\118\116\075\088\076\071\067\047\082\102\043\078\072\054\121\083\066\061\061","\053\081\068\085\081\099\082\068\110\100\061\061","\073\111\053\067\055\057\080\112\073\103\070\069\109\071\073\119","\117\113\066\089\105\107\117\066\074\077\050\112\072\102\072\061";"\082\047\120\106\116\089\061\061";"\106\089\116\100\111\081\121\121\065\109\053\119\114\080\068\050\076\108\082\070\051\089\061\061";"\106\088\100\117\055\121\043\049\114\117\051\117\074\089\061\061";"\080\073\105\089\043\111\073\110\077\101\077\090\075\100\106\061";"\119\067\072\048\075\083\043\105";"\084\104\101\088\118\120\084\107\099\089\061\061","\108\086\071\116\052\066\082\103\121\105\112\075","\070\119\080\104\113\066\066\121";"\070\109\073\106\108\078\105\061";"\084\083\049\119\108\072\061\061","\072\100\116\120\117\082\049\088\090\111\117\087";"\065\110\081\118\106\065\080\047","\054\088\099\116\119\050\071\089\084\088\055\098\121\089\083\086\086\110\117\061";"\117\051\112\109\075\074\070\078\073\106\055\113\069\089\061\061","\057\078\079\102\079\097\084\110\122\069\109\120","\057\056\048\054\076\082\109\106\048\118\072\080";"\106\079\075\054\088\066\061\061";"\055\100\066\053\099\051\089\061","\075\097\052\077\055\066\099\049\049\054\055\122\085\114\108\118\055\067\101\084\047\073\078\098\110\109\112\066\047\084\072\085","\101\087\108\080\103\050\053\048\110\089\061\061";"\074\101\081\057\088\100\061\061";"\084\116\053\104\079\055\106\061","\068\117\086\057\108\090\087\089\084\055\048\061","\054\067\111\070\076\066\061\061","\074\069\084\106\069\118\110\112\079\066\061\061","\121\116\121\067\053\098\056\111\047\113\113\066","\122\097\075\103\048\097\079\115\084\065\110\055","\057\065\086\081\108\050\078\075\051\049\097\052\113\104\112\088\090\086\109\061","\098\112\067\103\110\087\088\118\070\047\119\078\074\090\113\072\089\115\104\121";"\109\084\089\086\110\082\104\054\089\066\067\076\054\090\110\053\056\089\061\061","\114\109\043\052\120\110\116\098\075\100\061\061";"\055\099\065\052\048\055\108\102\077\089\101\061";"\106\114\052\090\084\090\112\066\114\068\122\116\107\085\111\061","\111\067\050\081","\083\047\100\068\120\115\101\049\083\100\061\061";"\111\102\108\082\103\050\072\061","\089\079\087\055\070\056\110\104\056\118\119\102\071\116\051\082";"\051\102\105\112\085\043\073\074\112\066\119\047\074\116\068\116","\049\118\050\050\079\057\079\080\043\051\070\047\076\071\109\078\089\048\106\061";"\110\122\081\088\089\100\051\048\074\114\047\118\104\100\061\061","\043\043\086\088\103\120\072\061","\053\052\055\057\097\108\081\057\104\072\061\061";"\075\081\105\087\049\066\061\061";"\116\049\120\075\115\066\061\061";"\053\068\101\090\115\105\090\078","\072\115\079\049\082\100\061\061";"\120\076\053\100\107\105\101\061","\072\122\110\053\109\100\061\061";"\087\118\074\056\104\108\073\072\069\104\057\079\054\122\056\081";"\088\065\056\107\115\100\061\061";"\088\106\090\107\082\052\085\057\074\075\066\061","\075\106\047\087\122\098\050\066\109\107\077\099";"\050\077\104\121";"\106\047\116\119\055\068\102\082\078\079\069\061","\084\050\086\076\101\089\061\061";"\084\066\061\061","\082\043\111\055\111\112\105\105\055\071\085\061","\114\102\050\065\071\066\061\061";"\053\111\081\077\110\078\049\082\065\121\071\071\113\108\069\061";"\085\075\120\082\080\116\121\053\055\050\043\047\122\052\055\068";"\118\074\102\078\069\111\073\057\067\100\098\050\047\100\061\061","\090\075\076\073\116\069\100\081\090\079\089\076\106\070\086\077";"\106\071\070\104\043\074\117\111\071\122\087\048\100\071\118\114\105\066\066\061";"\112\085\088\051\114\113\088\113\100\113\117\121\055\048\073\048\043\066\061\061";"\081\072\061\061","\081\073\098\053\101\110\079\070\068\111\080\074\067\050\069\061","\101\086\090\116\068\097\109\061","\067\083\077\118\066\053\047\074\056\106\075\120\110\085\084\085\088\072\111\061";"\088\084\052\053\051\102\089\097\057\121\066\107\103\083\055\085\083\089\061\061";"\116\117\113\085\089\081\103\070\107\055\111\107\043\069\103\080\112\049\088\049\080\089\061\061";"\099\109\049\048\116\104\117\061";"\056\050\052\099\104\119\107\120\122\056\057\084\072\100\109\106\090\069\086\081";"\048\102\106\108\090\073\102\067\106\075\113\114";"\122\089\119\087\070\073\053\053\080\056\097\113\073\120\085\061","\055\115\052\065";"\079\052\067\116\122\077\085\077\084\072\061\061";"\100\054\119\051\077\072\061\061","\109\070\068\104\080\102\074\079\089\051\102\061";"\090\101\107\120\047\108\121\099\072\107\109\122\085\043\047\066","\118\086\117\068\076\072\098\118\053\052\070\088";"\097\120\086\050\117\098\115\051\053\047\100\106\081\087\065\109\081\122\099\069\121\085\077\067\050\104\085\079";"\114\102\086\074\105\098\105\061","\113\050\109\050\079\105\054\114\120\088\078\105\083\098\086\103\068\113\102\061";"\121\082\048\086\052\047\066\090\120\049\089\061";"\098\085\102\110\053\100\080\111","\070\065\065\072";"\047\065\089\106";"\069\071\108\102\052\056\113\105\100\053\077\098\070\099\088\119\043\050\114\061","\110\054\077\085\083\074\078\121\097\102\089\068\120\114\066\084","\102\100\061\061";"\048\050\086\102\077\050\073\054\086\043\075\101\052\117\075\077\120\106\116\090\056\106\090\056\071\072\049\070\071\051\047\054\053\054\081\111\066\121\048\078\109\070\109\082\110\111\113\086";"\099\079\084\089\080\055\048\110\085\056\073\085\109\072\061\061","\105\057\066\102\049\074\117\076\098\072\108\079\119\114\106\061";"\077\104\122\117\072\076\114\061";"\052\108\056\070";"\117\100\109\084\075\084\075\052\119\072\061\061","\068\050\101\112\084\111\107\052";"\112\108\066\118\097\071\068\069\109\083\087\082\109\083\113\118\107\068\054\047\106\066\069\052\115\100\105\108\121\071\105\061";"\076\049\051\105","\078\097\087\118\089\112\098\056\119\100\061\061","\090\114\069\055\053\100\061\061";"\109\109\054\083\043\108\057\105\120\074\115\098","\111\053\052\067\107\083\115\121\077\052\048\061";"\043\066\107\047\080\066\103\085\076\097\106\097\071\050\115\111";"\057\100\061\061","\121\085\088\104\078\111\054\097\112\050\084\056\105\066\061\061","\082\105\116\076";"\071\084\088\050\068\100\061\061","\121\086\115\086\087\049\097\087\047\076\120\100\117\100\061\061","\120\050\103\082\101\100\061\061";"\071\087\071\079\073\089\061\061";"\055\065\108\098\055\113\109\114\083\077\116\104\118\072\061\061";"\088\113\097\121\071\067\054\120\116\090\120\085\107\122\090\043","\075\086\087\048\078\116\117\061","\053\075\055\114\067\053\111\099\080\101\048\061";"\055\114\052\089\075\051\104\051","\115\087\089\055\053\077\113\069\077\101\085\077\082\066\061\061","\090\086\078\078\078\103\079\087\086\100\061\061";"\114\115\121\111\085\116\051\120\065\121\076\049\085\053\117\061","\071\115\081\077\111\066\061\061","\109\073\072\049\082\052\078\075\105\066\061\061","\108\089\083\067\119\089\061\061";"\070\072\061\061","\114\076\115\107\120\066\061\061";"\110\118\086\043\051\090\073\085\087\104\069\061";"\054\117\121\075\107\121\105\084\073\100\061\061","\082\082\050\051";"\115\053\070\067\043\072\061\061";"\084\108\082\054\056\104\056\100\051\101\115\104\090\066\089\065";"\072\050\052\083\090\057\069\061","\066\079\121\047\071\054\071\074\057\106\122\052";"\105\121\098\073\074\107\051\082","\086\087\071\115\088\088\048\061";"\075\113\117\099\054\102\076\048\071\055\107\056\085\090\089\053\122\089\061\061";"\099\089\047\119\080\097\051\077\117\073\111\114\049\105\080\098\117\104\066\109\079\071\079\071\112\049\115\076";"\114\111\111\075\083\073\106\061";"\117\097\079\057\065\107\075\069";"\105\071\077\068";"\088\072\061\061","\113\118\121\097\109\116\053\098\099\043\066\121","\075\105\050\073\054\069\051\053\068\048\106\117\055\053\088\053\104\113\102\061";"\072\074\101\119\066\066\061\061","\067\107\048\066\111\122\057\118\069\069\067\109\068\070\122\103\049\067\105\086\112\078\066\051\103\115\087\103";"\055\081\047\089\098\067\114\061";"\105\098\109\075\119\089\061\061";"\065\099\081\112\112\083\116\118\065\100\071\115\072\108\089\068\084\082\068\071\048\052\056\118";"\078\111\054\053\079\106\076\109\047\106\118\056\052\087\104\098\072\071\100\061","\070\122\112\078\097\103\085\077\074\078\100\071\102\109\100\061","\117\071\114\065\047\081\107\118","\107\080\048\103\043\120\105\061";"\086\111\071\090\111\104\101\054\081\050\051\113\088\088\117\079\057\073\101\061","\085\100\076\072\110\097\047\049\078\072\061\061";"\120\104\108\055\104\107\069\051\085\066\061\061","\069\083\108\066\100\089\069\121\112\080\080\073";"\107\054\076\105\056\100\061\061";"\111\121\085\086\081\100\061\061","\090\101\057\067\121\080\053\117\057\118\049\053\122\051\117\050";"\067\089\100\102\104\088\115\114\047\110\072\099\115\051\087\108\102\098\056\104\083\100\061\061","\106\103\117\067\082\100\061\061","\074\047\069\067\052\066\061\061","\055\109\073\098\043\068\108\085\084\119\097\118\052\120\117\122\090\112\072\061","\051\081\084\043\098\081\097\053","\102\107\068\110\105\071\069\101\085\052\053\116\104\114\090\075";"\087\076\072\108\102\108\066\101\117\066\090\119\103\087\069\061","\119\077\066\100\119\057\117\061","\053\043\118\118\085\115\077\117\057\072\061\061","\112\112\102\081\115\086\110\119\097\050\070\079\066\105\085\067\079\077\085\061","\109\106\075\049\107\086\050\081\117\068\053\111\109\080\043\067\097\109\048\061","\083\054\102\086","\116\087\049\101\056\106\103\122\118\087\067\114\085\112\117\090\084\066\061\061","\099\072\089\075\055\087\075\065\057\067\055\049";"\083\117\101\109\085\087\086\067\050\076\088\077","\122\065\102\099","\050\108\075\105\090\089\061\061","\084\050\090\065\104\100\061\061","\118\051\099\109\105\049\070\118\103\119\048\078";"\083\114\074\055\109\072\061\061","\066\052\068\104\078\050\117\061","\106\102\049\075\119\069\107\121\099\099\101\048\043\050\121\118\121\103\107\120\088\074\089\068\082\097\052\090\113\117\083\122\118\049\066\084\102\078\073\065\111\120\109\072","\098\066\102\116\089\052\072\054\122\111\049\069","\090\107\111\101\053\078\049\073\079\043\066\089";"\122\077\100\098\119\089\061\061";"\043\117\102\088\102\100\061\061","\109\111\057\087\067\065\073\043\120\120\110\103";"\098\106\116\108\056\089\061\061","\088\090\047\083\101\084\054\089\120\115\047\052\084\065\106\061";"\054\090\075\117\104\076\102\080\074\072\061\061","\111\068\104\077\078\101\043\072";"\086\078\073\083\066\100\061\061","\099\114\055\067\047\100\061\061";"\101\072\120\117\047\073\056\075\082\099\099\057\089\065\053\088\073\066\061\061","\122\090\110\057\115\072\061\061";"\057\105\073\100\068\116\109\112\049\102\075\104\050\051\103\086\090\049\114\089\120\070\078\099\114\110\075\073\048\076\088\088\043\070\089\078\101\081\113\055\081\099\114\103\084\049\115\087\076\102\068\097\119\078\117\061","\099\048\049\078\075\113\100\061";"\047\121\110\082\112\054\048\076\049\114\121\073\104\114\118\109\055\100\061\061","\072\047\122\057\090\107\080\067\109\102\054\082\052\080\106\056\047\054\087\116\043\073\052\113\118\097\075\052\054\111\055\080\049\055\047\119\078\120\098\071\112\101\073\098\110\100\061\061","\110\120\106\066\114\072\052\118\105\084\082\048\118\122\090\116\081\089\061\061";"\067\107\090\110\109\085\087\050\048\056\079\113\067\104\107\053\074\066\061\061","\076\065\108\120\117\055\053\054\108\070\105\082\076\100\080\050\086\066\061\061","\055\117\115\081\102\114\113\120\066\115\103\074\048\089\103\080\084\107\101\061";"\079\069\068\073\071\118\122\077\071\066\061\061";"\110\106\084\080";"\070\100\053\048\054\070\056\088";"\117\109\067\049\079\087\089\061","\080\065\121\076\072\089\067\104\118\072\106\048\073\054\088\072\104\076\086\081\109\118\105\061","\070\079\052\081\057\115\052\107\054\100\065\065\085\120\065\108\052\104\107\061";"\100\072\085\056\070\072\061\061";"\087\079\103\049\117\047\105\083\115\066\061\061";"\057\048\072\052\050\110\111\054\116\069\071\048\087\080\109\081";"\117\110\065\112\087\073\088\071","\109\103\109\066\122\074\081\100\106\100\061\061";"\067\053\108\071\049\066\061\061","\078\119\082\118\110\117\113\074\079\089\061\061","\075\090\066\048\113\115\050\116";"\074\090\053\086\085\072\061\061";"\118\048\053\103\057\080\074\103";"\122\099\082\054\069\072\061\061";"\118\122\116\070\051\098\081\082\101\066\061\061";"\108\101\106\117\119\048\054\112\120\073\100\087\098\101\066\043\050\087\069\061","\088\076\088\056";"\078\074\084\082\110\100\061\061";"\057\100\084\053\103\104\104\054\088\089\066\061","\099\101\119\097\075\106\119\108\097\047\087\075\085\072\109\073\118\050\086\047\115\052\117\061";"\115\071\075\078\049\080\090\084\082\089\061\061","\048\075\079\057\114\106\098\072\089\077\043\119\065\081\081\119\043\089\061\061";"\086\120\084\075\069\122\121\108\071\089\061\061","\069\101\083\070\108\082\117\061";"\108\089\078\100";"\079\050\053\053\065\089\061\061";"\083\120\089\122\089\103\097\078\113\104\054\078\066\050\119\078\118\078\102\061","\052\089\050\075\114\114\119\104\104\113\111\061","\116\080\108\047\082\066\061\061";"\115\089\073\122\051\066\079\068\057\115\057\074";"\109\121\110\049\048\089\061\061","\113\065\086\066\076\055\087\053\122\085\090\066\053\072\061\061";"\122\056\118\056";"\043\051\053\049\100\054\085\107\115\056\099\078\106\087\101\121\086\072\061\061","\103\089\061\061","\087\112\052\043\113\109\081\085\053\073\085\120\104\075\106\061","\043\082\080\099\043\056\106\117\073\115\121\115\078\117\076\120\055\048\067\101","\104\075\108\069\089\106\108\115";"\083\121\099\121\073\072\061\061","\111\079\084\089\048\089\061\061","\113\087\069\109\070\069\054\080\079\051\119\050\070\100\061\061","\110\116\122\099\100\121\120\066","\069\066\084\068\098\082\070\109\106\121\111\061","\049\116\106\084\107\056\120\079\112\081\079\122\070\050\121\073";"\047\090\076\071\086\048\097\076\074\066\061\061","\104\106\084\120\103\099\056\101","\084\052\065\114\057\111\076\122\050\079\076\056\043\102\102\071\090\114\079\070\083\087\109\047\051\073\065\077\067\118\075\102\054\108\083\097\109\113\089\081\112\079\106\069\057\112\112\079\082\114\121\051\070\072\121\079\097\111\053\047\067\112\078\103\070\117\108\077\090\107\088\088\117\107\080\105\050\086\110\081\081\117\089\076\080\074\054\099\111\048\049\100\111\077\106\112\110\116\101\105\098\102\074\065","\054\089\085\097\104\122\076\103\049\102\114\048\119\072\061\061","\043\074\054\117\108\066\061\061";"\085\072\061\061","\103\100\110\054\117\085\049\053\114\100\061\061";"\109\084\122\070\048\053\122\119\121\067\102\117\072\112\110\090","\104\122\109\066\114\081\089\054\079\083\054\082\081\072\099\087","\119\122\114\079\073\048\072\078\072\066\061\061","\118\065\076\051\052\100\061\061";"\068\084\050\099\079\072\061\061","\113\106\111\101\121\086\108\108\072\068\048\084\115\056\086\089\121\075\085\048\078\082\118\101\116\114\048\110\111\103\071\120","\047\084\086\088\055\103\080\115\072\077\099\052\065\079\105\061";"\067\077\086\069\083\086\104\099\071\085\121\074\080\101\075\048\074\069\089\107\049\114\078\075\088\048\099\054";"\070\067\109\111\072\072\061\061";"\047\084\052\118\051\119\109\061";"\121\106\057\071\106\072\061\061";"\084\068\069\079\107\105\098\077";"\082\120\111\053\077\089\061\061","\098\078\043\090\080\053\050\104\102\043\078\086\105\054\104\103\112\090\056\070\050\115\108\122\119\048\081\114\105\054\084\054","\053\050\084\116\089\069\114\061","\053\071\043\067\100\080\084\099\072\084\054\105\097\082\110\089\100\100\061\061";"\075\100\061\061","\057\090\083\072\072\068\102\098\114\089\061\061","\072\106\103\088\048\050\067\080\103\100\101\061";"\113\074\122\083\090\117\107\067\076\066\061\061";"\115\120\048\071\084\083\055\081\122\080\113\110","\119\077\105\119\086\089\065\108\121\075\050\074\090\086\078\087\077\089\082\108\052\090\108\088\088\117\067\114","\085\050\082\116\087\089\061\061","\107\107\047\085\076\116\088\081\112\073\117\061";"\049\120\086\079","\049\115\113\057\122\097\069\061","\071\054\066\116\117\070\107\061","\069\105\122\043\104\056\100\061";"\066\072\071\050\115\112\111\073";"\054\049\103\074\113\100\061\061","\077\072\105\066\080\111\053\101\089\098\043\114";"\107\100\072\104\065\117\043\088";"\085\079\075\106";"\087\072\061\061","\101\109\075\080\104\069\098\082\077\102\102\113\099\089\061\061","\043\087\078\079\054\111\110\065\067\105\113\102\110\079\104\115\083\053\090\120\079\072\061\061","\065\067\107\107\082\111\117\101\054\076\076\047\114\107\097\072\075\106\089\061";"\085\047\112\120\107\113\111\061","\053\087\099\075\081\049\075\066\068\083\076\068\070\084\100\061";"\076\079\073\043\105\104\069\061","\105\053\101\114\097\098\118\066\102\072\061\061","\056\090\087\099\057\073\051\120\097\053\082\067\101\101\067\083\117\115\069\061","\077\101\103\109\101\100\109\061";"\113\122\076\105\047\073\070\121\051\100\117\061","\100\078\079\052";"\107\090\090\118\048\105\116\073\111\116\121\054\056\116\108\099\106\100\105\061";"\101\069\104\122\119\047\119\120\102\072\070\050\088\073\066\061";"\057\102\050\088\047\052\051\066\109\100\066\061","\099\113\053\105\047\047\080\080\105\088\073\049\067\050\066\084\053\105\085\061";"\084\054\119\072\122\054\088\065\098\089\061\061";"\114\056\068\077\053\108\118\099\066\075\069\061";"\052\100\061\061","\117\051\072\113\069\070\054\114\110\050\073\114\055\111\088\117";"\071\121\069\084\109\090\066\115\110\107\051\066\097\050\072\061","\122\114\086\110\088\068\051\106";"\074\048\077\068\104\068\077\054";"\115\072\061\061","\078\090\087\047\051\120\106\120\109\075\052\074\080\086\099\080","\087\050\047\082\054\050\086\076\047\097\113\051\121\066\061\061";"\112\113\104\069\107\110\116\120\074\071\100\061","\080\089\061\061","\112\085\082\055\057\103\071\056\088\078\068\081\078\115\052\076\098\100\061\061","\083\074\054\078\048\072\080\114\082\078\116\072\052\047\105\061","\065\108\067\108\110\111\117\061";"\079\043\118\113\053\068\043\115\083\066\061\061","\080\108\086\120\113\118\111\061";"\089\088\088\073\049\057\102\061","\050\083\049\110\048\057\056\051\075\072\061\061";"\114\117\051\105\043\097\054\051\116\090\108\070\069\066\078\073\057\067\115\051","\081\105\054\117\107\057\072\121\121\100\061\061";"\089\098\086\087\089\069\106\122\070\100\105\061","\110\078\079\043\115\099\120\105\116\097\069\061","\069\081\048\067\098\120\050\080\104\043\057\115","\120\049\080\069\052\067\109\061","\065\121\054\088\098\065\104\116\088\100\061\061","\115\098\116\099\087\115\090\052\080\047\085\122\086\112\116\051\110\078\077\086\051\043\070\077\043\052\077\065\106\081\050\081\067\098\114\109\108\088\048\108\050\117\078\076\066\074\057\117","\072\056\070\108\089\110\056\118\097\079\072\061";"\107\087\056\067\106\066\061\061";"\088\114\103\078\082\086\084\072\073\100\061\061","\101\115\098\109\055\065\048\050\047\043\117\087\073\089\061\061","\118\122\113\105\122\100\061\061","\065\114\068\106\109\055\089\061";"\080\073\102\122\073\118\100\087\108\073\074\075\087\066\119\100","\116\098\084\122\075\056\048\061";"\073\074\097\100\053\075\072\061";"\053\049\048\078\070\052\072\061","\114\068\073\074\085\089\078\122";"\066\057\070\052\101\079\049\056";"\054\056\120\083\087\068\106\107\055\108\068\110\048\110\048\068\121\090\072\061","\051\086\114\050\097\106\079\105\048\100\100\068\081\086\083\099";"\079\106\120\067\098\100\105\057\109\086\114\061","\088\100\117\108\057\078\089\061","\081\110\118\082\068\065\087\078\087\066\072\061";"\113\078\081\104\054\086\085\055\049\098\099\107\086\090\070\051\070\072\061\061","\098\056\089\071\105\087\066\061";"\054\105\055\121\100\122\107\084\077\043\085\061","\121\074\049\077\113\068\101\086\070\109\076\110\121\066\061\061";"\120\049\089\052\043\107\120\086\066\053\051\069\052\107\116\108\090\073\049\070\104\049\115\104\077\103\087\073\090\104\072\061","\055\050\078\122\114\054\114\102\119\109\057\087\103\116\119\075\116\100\061\061","\099\111\065\112\079\115\086\114\047\101\081\086\116\100\061\061";"\067\107\087\056\107\066\061\061","\106\109\118\090\114\101\103\085\113\075\113\085\098\100\099\080\074\089\085\061","\115\074\087\102\109\048\119\050\083\115\085\050\073\112\116\051\089\111\085\061";"\087\115\100\119\070\107\110\085";"\118\054\054\065\106\053\099\106\119\089\061\061","\054\111\088\083\084\070\102\110\084\104\082\107\102\099\106\061","\077\081\076\117\114\113\100\061";"\119\112\085\070\122\087\074\048\098\051\097\083\077\088\086\107\097\048\107\061","\055\122\102\085\072\115\071\075\049\087\054\090\054\066\061\061","\103\056\121\115\106\072\061\061","\076\047\112\119\083\104\112\057\103\053\100\051\077\078\109\069\088\099\066\111\077\053\114\061";"\104\048\051\116\121\101\074\106\116\088\119\082\119\121\082\120\073\106\072\061","\055\121\082\113\101\105\086\070\055\100\047\048\107\066\055\116\080\066\061\061","\074\101\114\053\118\054\066\061","\115\101\078\082\083\098\079\120","\084\069\056\116\112\081\081\050\088\067\077\103\080\114\072\115\122\106\066\061","\090\052\043\047\084\100\061\061";"\054\120\065\119\076\102\076\118\086\066\101\069\070\097\083\087\084\109\106\061","\047\084\084\082\066\072\061\061","\110\089\061\061";"\083\048\043\053\109\043\087\080\048\100\120\082\052\106\106\061","\078\049\048\084\107\066\061\061","\068\073\106\048\106\074\074\049\110\050\090\102\077\100\061\061";"\109\120\070\102\116\121\106\118\120\119\074\087\120\088\085\061";"\079\049\053\049\051\103\069\070\102\100\061\061";"\106\087\056\117","\086\101\068\098\112\072\089\061","\113\073\084\048\115\069\100\061";"\116\070\105\106";"\102\050\097\048\066\078\084\101\053\057\053\120\088\098\047\047\082\097\122\053\051\117\047\082\107\113\109\122\049\085\084\104\097\099\087\055\080\099\070\056\056\048\081\103\047\119\050\048\068\077\100\067","\099\104\117\085\117\066\061\061","\109\108\072\074\104\089\061\061","\103\084\089\047\089\047\066\061","\106\068\102\049\068\054\107\066\101\072\108\106\097\066\061\061","\120\105\079\103","\116\086\079\056\121\110\047\071\098\089\061\061","\079\121\068\074\078\116\049\056\069\116\121\116\057\079\114\061";"\104\065\080\049","\101\051\079\118\121\081\109\061","\068\097\083\116\099\120\048\083","\043\106\072\119\055\115\105\114\107\077\087\055","\098\050\069\071\117\066\061\061";"\065\069\116\104\109\074\122\104","\118\080\050\056\122\069\087\055\050\067\114\116\056\052\050\074\111\079\106\085\118\070\048\061";"\086\114\083\050\121\055\097\054\043\117\084\104\075\077\097\119\072\121\048\061","\065\052\100\061","\049\100\061\061","\104\075\098\100\043\055\103\067\088\050\055\083\068\085\048\061";"\084\114\078\119\119\111\047\074","\051\070\051\065\077\057\118\050\051\110\053\109","\048\070\113\089\099\118\105\110\056\050\109\061","\056\086\066\081","\108\117\086\077\047\100\061\061";"\067\080\100\043\081\057\078\055","\087\100\077\056\112\066\061\061";"\115\118\048\055\100\076\073\099";"\089\102\098\113\088\071\076\111\117\113\117\113\086\100\061\061","\119\084\080\118\057\100\061\061","\085\118\090\090\117\100\061\061","\068\087\067\074\100\073\102\043\090\056\105\043\116\072\061\061";"\112\104\087\116\043\117\051\090\111\072\061\061";"\111\114\071\115\065\115\121\078\067\077\122\117\110\069\089\061","\057\043\084\049\054\108\074\090\053\113\106\061","\048\076\104\068\081\109\084\050";"\107\118\047\082\105\069\050\079\084\112\112\073\117\110\066\061","\051\084\106\053\050\066\061\061","\110\099\086\100\075\074\066\113\109\101\085\061","\047\084\089\069\117\050\073\047\103\102\069\111\049\075\098\112\049\110\077\116\116\102\048\121\068\119\086\111";"\078\099\056\097\122\119\079\101\085\085\047\072\049\072\061\061";"\104\089\061\061","\072\085\067\048","\056\056\069\098\101\100\100\085\076\055\043\089\120\075\115\053\049\099\054\113","\056\122\076\082\067\043\097\076\082\057\057\079\112\113\107\061","\052\056\073\073\099\118\089\116\108\109\085\061";"\068\048\070\078\055\105\117\061","\071\072\067\085\102\112\085\101\080\106\080\071","\049\085\049\071\100\056\111\054","\051\106\106\053\101\115\081\043";"\119\054\051\120\111\098\101\085\105\054\070\085\118\113\087\117\120\089\061\061";"\102\120\072\073","\117\106\074\047\090\052\114\061","\065\088\080\054\098\103\085\078","\050\102\053\116\101\098\114\082\087\052\111\056\113\066\061\061","\104\072\061\061";"\055\066\061\061","\068\112\121\084\057\072\061\061";"\073\043\113\065","\122\099\111\048\065\115\050\098\101\050\049\052","\089\052\049\068\104\108\075\076\057\048\118\065\099\053\075\087";"\079\056\079\056";"\105\089\100\112\043\053\102\073\057\110\090\065\055\081\107\110\112\106\117\053\081\072\077\078\065\068\083\047\079\070\075\102\107\117\073\107\051\051\099\089\117\108\107\110\071\083\057\081\102\101\108\051\105\108\065\051\117\111\055\066\113\080\071\114\050\104\117\061","\090\067\097\088\085\080\083\050\114\078\089\061";"\049\070\115\076","\080\119\053\112\100\117\108\087\119\043\084\119\117\100\061\061","\090\054\114\081\055\067\070\111\067\076\085\051\077\089\061\061","\057\110\047\099\043\116\076\087\071\119\067\121\070\111\069\061";"\051\107\097\098\080\104\067\057\079\055\073\067","\074\070\071\053\112\088\048\100\122\084\043\089\051\113\049\075\088\086\105\061";"\065\055\055\069\081\052\066\061";"\076\104\089\087\100\072\061\061","\067\110\122\089\072\121\112\089\108\066\061\061","\047\103\056\102\090\070\069\053\122\054\088\077\074\072\061\061";"\097\085\110\067\084\043\118\047\121\108\110\121\087\070\102\082\071\066\061\061";"\114\082\049\090\106\100\061\061","\080\113\103\055\099\087\069\112\087\056\076\079\085\072\110\081";"\084\080\089\100\089\118\051\110\102\100\114\109","\073\107\080\049\116\072\061\061","\089\103\122\049","\085\112\097\073\097\086\103\120\104\047\101\061","\100\053\088\047\087\109\050\111\076\080\069\061","\120\120\067\099\081\121\097\057\104\086\086\083","\050\079\076\103\068\100\061\061","\066\097\071\099\099\105\073\068\071\089\061\061";"\078\103\075\066","\122\110\113\101\057\066\061\061","\117\047\115\106\050\089\061\061";"\111\111\115\065\107\055\114\113\047\102\114\104\107\072\061\061";"\113\110\072\057\082\071\048\076\107\072\061\061";"\117\104\050\066\097\073\122\074\120\054\054\076\076\100\061\061","\068\057\070\067\108\079\105\120\055\043\048\061","\049\114\084\083\117\067\108\079\097\122\053\076\049\056\048\061";"\086\080\088\101\053\098\102\069\109\071\100\104\070\076\097\077";"\049\113\072\072\083\072\061\061";"\090\079\106\049\049\100\061\061","\119\104\122\057\104\053\109\061","\070\077\057\043","\057\100\110\067\116\072\061\061","\100\122\073\080\072\050\089\061";"\118\100\118\056\120\105\121\077\053\075\068\100\085\054\114\061","\098\070\122\069\077\122\073\077\085\081\121\102\074\089\061\061";"\049\066\077\070\112\079\114\051\103\089\111\068\055\089\061\061";"\113\087\097\109\066\066\061\061","\056\081\077\054\122\117\067\055\111\099\089\049";"\110\110\111\100\069\089\061\061","\114\076\118\089\121\069\068\085\086\079\083\043\074\100\061\061","\066\076\115\113\081\100\061\061";"\106\085\057\067\118\111\106\054\069\114\089\061";"\103\083\074\084","\097\067\054\073\105\072\061\061","\070\105\107\072\056\113\120\119\104\120\114\077";"\099\103\104\047\085\068\100\117\049\108\114\057\076\110\089\118\083\122\085\061";"\056\109\065\104","\069\099\077\081\087\122\078\112\121\072\061\061";"\077\047\075\053\079\072\066\089\116\099\078\082\074\089\061\061";"\067\116\078\114\121\047\113\085\050\075\118\113\043\049\104\081\072\100\061\061";"\122\101\067\105\057\122\083\043\087\048\114\090\110\089\061\061","\121\079\090\077\106\117\101\061","\117\097\114\104";"\087\103\113\067\102\108\054\048\090\071\067\077";"\055\107\107\078\121\049\078\112\053\088\119\097\074\087\109\061";"\056\053\074\072\114\066\061\061","\072\106\118\071\071\087\085\079";"\054\085\121\070\097\077\056\114\052\086\043\110\100\077\057\065\108\074\048\061","\081\057\101\111\048\084\054\084\070\048\043\099\050\080\113\076\079\088\108\110\073\114\066\085\118\053\117\090\072\122\090\119\119\101\077\069\072\047\083\078\109\072\061\061";"\068\054\078\114\066\099\083\076\065\075\108\057\067\073\115\051\115\070\048\061","\118\053\112\051\073\085\107\079\115\113\101\106\099\076\047\074\109\057\105\111\107\089\061\061";"\119\067\102\080\057\085\043\085\086\057\104\117\111\082\108\106\111\115\121\097\090\099\056\083\051\114\069\052";"\053\047\087\066\066\074\069\061","\074\104\112\074\070\078\099\088";"\081\119\077\102\082\100\061\061";"\104\043\103\102\051\065\084\078\054\076\074\050";"\119\051\105\103\071\106\051\043\088\071\090\122\121\050\113\086\102\054\078\056\090\066\065\050\086\078\047\057\090\048\055\049\101\065\100\067";"\054\107\056\100\122\088\043\088\112\083\049\081\083\067\108\080\088\099\065\085\084\073\056\057\103\108\083\099\120\070\108\097\114\112\085\088\082\118\085\068\074\119\069\080\105\073\086\071\055\087\057\043\074\103\076\052\066\079\080\116\053\108\106\108\121\108\052\086\078\090\106\120\114\120\088\065\079\112\116\051\074\071\049\105\101\098\087\106\107\075\098\100\103\085\088\097\066\119\119\109\075\077\106\102\099\097\100\084\122\097\070\106\086\072\101\043\118\103\103\109\111\083\099\077\082\103\048\099\085\072\109\104\090\073\075\104\083\077\082\088\056\115\106\084\052\116\105\082\117\076\078\116\050\079\114\086\049\054\083\112\052\101\098\122\088\122\050\121\105\075\104\084\057\074\086\068\120\074\119\107\043\110\113\084\097\082\069\086\079\120\073\083\072\083\049\069\086\049\072\076\113\112\101\114\066\047\111\074\057\089\118\109\079\098\105\066\049\107\108\072\086\103\108\103\067\108\113\057\065\072\066\084\066\078\116\054\074\066\075\054\121\078\052\043\102\087\078\069\111\078\079\115\077\084\108\089\121\081\107\117\082\081\047\107\076\081\057\122\069\105\052\114\087\111\050\078\079\052\065\074\086\117\112\085\109\049\078\083","\048\113\086\057\107\097\107\061","\049\086\112\115\076\072\061\061","\101\076\075\116\075\067\118\076\107\099\101\110\055\089\049\084\082\120\080\054\053\049\077\106\117\106\068\090","\068\067\101\074\106\103\099\073","\085\111\114\080\053\117\056\087\053\105\085\051\110\109\114\052\071\072\061\061","\121\072\052\106\111\071\070\110\115\100\061\061","\117\106\073\057\120\069\100\098\043\087\101\061","\085\069\050\122\103\117\112\115\088\110\053\055\109\090\084\056\111\084\106\061";"\106\105\109\116\116\090\073\074";"\066\115\049\056\119\076\112\121\073\101\107\061","\083\075\077\056\116\048\085\107\073\105\052\052\111\102\099\087\074\109\085\061";"\077\116\082\075\119\097\049\107\079\049\047\047\050\080\121\048\118\102\102\061";"\097\102\077\082\055\066\061\061";"\078\116\103\088\108\110\108\066\074\072\061\061";"\051\104\119\103\043\089\061\061","\068\108\117\053\102\120\082\113\080\106\048\122\083\100\061\061","\113\053\084\112\076\066\061\061";"\111\098\048\052\054\114\048\098\048\070\114\061";"\111\068\117\103\102\085\099\084\049\099\113\107\052\071\114\061";"\085\121\077\068\066\090\111\061";"\089\119\080\116\111\050\117\102\076\086\112\107\075\120\114\084\118\086\105\061","\086\088\105\068\110\117\077\106\085\066\061\061","\078\049\066\122\052\117\122\110\071\050\105\112\118\100\061\061","\090\117\083\114\067\120\080\066\081\099\105\080\086\120\097\115\116\070\085\061";"\083\072\061\061";"\043\076\056\075\081\122\116\050","\100\068\048\102\104\071\085\113\053\072\061\061","\098\115\114\049\122\108\083\103\054\068\049\073\116\066\061\061","\119\055\097\066\082\103\112\070\105\049\112\122\104\102\052\055","\073\105\069\098\048\073\103\073\078\089\111\061","\047\080\076\066\104\108\110\121\051\056\065\109\072\072\061\061","\052\100\073\049\103\054\068\098\116\079\049\053\113\088\097\098\070\116\047\049\072\109\079\083\109\119\049\102\098\048\043\065\065\101\111\073";"\114\043\112\049\069\114\099\119\112\083\069\061";"\043\056\079\087\105\098\098\090\077\121\056\069\088\119\066\061","\111\104\081\078\098\119\111\061";"\099\099\103\053\070\072\061\061","\075\055\111\053\054\072\061\061","\087\121\114\089\121\098\086\049\052\110\118\111\080\087\101\085\117\072\061\061";"\077\054\069\076\067\114\104\117\070\073\090\102\071\072\061\061";"\087\079\067\115\111\087\122\053\054\109\068\079\065\055\066\061";"\048\116\078\119\120\100\119\117\103\097\121\111\088\117\050\067\073\048\114\061";"\047\055\057\115";"\106\100\049\073\047\072\069\067\080\120\074\078\080\075\043\111","\074\090\120\085\054\075\043\047\114\050\078\116\078\066\061\061","\120\049\090\110\067\066\061\061","\071\100\061\061";"\122\082\107\053\087\068\100\100\089\105\099\076\082\075\055\103\088\051\053\047\055\122\085\090\122\066\050\072\115\086\108\116\111\107\052\070\107\107\083\099\078\122\049\100\077\068\057\118\086\103\073\057\109\102\069\061","\048\117\079\121\065\084\081\057";"\065\065\086\057\083\109\113\112\085\073\056\071\049\070\048\061","\065\055\089\050\088\110\065\111\079\051\117\061";"\074\116\116\056\071\103\090\098\082\120\111\103\052\088\119\077\082\078\119\114\074\066\061\061","\105\047\109\074\120\117\097\072\067\066\061\061","\105\113\106\068\119\118\050\081\053\118\052\069\085\078\107\061";"\104\108\052\099\056\103\081\118","\065\112\101\070\057\106\068\067\114\074\070\073\100\049\076\065\107\100\061\061","\113\111\078\086\101\066\061\061";"\113\069\122\074\113\043\104\107\053\048\043\049\117\047\055\080\120\121\089\071\075\072\061\061","\079\112\113\071\078\067\100\054\084\118\112\066","\057\114\097\086\104\121\070\116\104\050\082\105\057\078\103\120\121\072\061\061";"\050\097\086\082\103\076\066\066\072\119\100\121","\057\110\113\083\100\101\109\073\098\057\116\054\077\070\106\061","\116\100\061\061","\115\053\086\070\102\112\116\097\105\065\065\105\113\100\118\085";"\117\048\051\106\056\100\119\089\077\069\102\061","\048\087\099\050\077\071\108\116\071\071\100\061";"\048\082\088\077\066\048\070\099\085\097\043\085","\056\052\108\072\098\083\071\122\075\066\061\061";"\113\083\077\114\121\051\085\061","\054\056\098\113\053\121\085\073\074\084\085\061";"\100\105\121\066\119\100\061\061","\054\090\047\114\047\072\061\061";"\075\118\122\089\121\072\061\061";"\054\089\061\061","\115\110\056\120\071\111\076\086";"\047\100\070\050\113\090\043\085\077\079\101\111\108\048\109\120\122\066\061\061","\086\066\053\084\120\118\057\056\097\115\114\061";"\089\081\115\056\107\065\107\048\086\053\085\061","\106\100\061\061";"\101\070\067\067\043\066\061\061","\073\075\080\050\071\101\086\106\098\085\068\089\118\068\078\098\119\043\048\061";"\049\116\081\073\109\079\114\061";"\050\100\061\061";"\118\073\050\068\078\104\107\108\117\049\078\086\089\079\122\074","\090\052\085\108\100\088\056\067\051\081\086\088\099\055\069\061";"\115\057\105\115\084\052\072\069\072\066\061\061","\110\074\118\099\112\068\049\118\069\090\082\074\072\115\077\084\084\048\101\061","\107\079\110\115\101\119\075\098\103\049\114\081\120\071\119\057\084\089\061\061","\077\115\106\056\081\048\097\057\079\110\120\055\088\066\061\061","\117\112\112\056\072\118\115\116";"\075\052\088\068\072\120\106\061","\055\114\076\100\055\065\122\048","\114\102\053\076\103\112\111\061","\116\103\049\071\070\107\119\085\084\110\117\054";"\057\114\076\088\087\090\103\085\102\099\069\061";"\068\081\072\085\084\066\061\061";"\122\043\071\085\067\089\081\054\107\080\104\068","\070\067\084\083\111\112\115\110\073\050\077\099\113\051\087\087\051\089\101\061","\118\052\099\073\119\048\051\070\099\068\087\066\103\111\104\056\071\112\048\061","\097\097\081\100\076\089\061\061","\084\072\102\101\102\115\054\077\083\056\050\055\117\087\085\061";"\069\084\047\081\114\120\050\081\087\067\071\111\055\099\085\061","\082\052\081\111\052\089\061\061","\065\081\073\050\113\086\051\116\065\078\050\050\079\072\061\061","\111\054\069\049\102\100\061\061";"\099\118\099\113","\086\108\081\120\119\056\089\104\113\072\061\061";"\097\120\053\085\070\074\115\082\100\068\098\087\111\113\078\089\077\071\104\090\072\086\083\070","\120\102\120\112\087\072\061\061";"\050\050\111\107\110\102\076\089\049\090\098\081\112\086\107\065\109\104\101\119";"\121\082\049\089\103\120\108\122\073\053\084\118\110\113\107\061";"\109\078\102\057\087\089\085\061","\070\116\117\082\055\043\071\071","\105\078\049\083\108\105\090\098\048\119\097\048","\078\104\119\048\069\053\043\111\049\114\089\047";"\122\086\067\115\114\115\070\071\098\114\098\101\082\066\061\061";"\090\113\122\109\089\072\061\061","\106\121\076\077\113\055\107\061";"\103\048\111\051\054\119\079\113\111\102\112\078\066\053\082\114\069\116\101\104\089\103\115\047\055\065\070\115\080\109\067\080\077\049\055\105\077\101\053\108\107\107\108\069\106\077\104\079\055\073\117\077\120\089\061\061","\118\113\075\043\072\119\048\110\056\103\109\055\110\079\114\055","\080\043\098\078\119\112\066\099\105\085\067\110\121\052\083\098";"\088\067\079\108\113\089\120\084\111\116\047\074\080\110\051\109\073\049\106\061","\080\085\086\112\115\089\061\061","\054\108\085\101\079\110\116\053\099\100\061\061";"\116\075\116\048\070\056\090\048";"\106\116\116\107\085\120\073\105\088\083\084\076\072\100\061\061","\084\116\065\069\113\100\061\061","\118\088\098\052\053\117\088\074\109\048\111\061";"\057\089\043\104\054\052\073\068\054\050\101\047\055\071\078\055\101\067\111\121\101\073\098\054\111\047\117\061";"\100\107\086\106\048\070\053\071\119\101\077\100";"\119\052\097\116\070\089\052\100\114\066\061\061";"\109\069\076\055\080\073\067\118\118\076\105\061";"\118\066\117\043\049\066\061\061";"\074\083\109\056\068\106\057\074\052\075\109\061";"\114\073\085\074\071\122\049\118\114\100\061\061","\073\066\108\078\073\074\076\085\078\100\061\061";"\070\119\068\121\080\072\114\061";"\114\050\047\101\051\048\047\086\083\097\111\061","\065\057\075\108\110\119\100\119","\082\050\068\047\103\047\121\101\075\110\111\100\047\074\048\061";"\108\076\100\101\065\089\061\061";"\122\089\118\119\122\050\114\052\079\104\051\053","\107\073\098\043\051\066\061\061","\086\107\110\106\104\048\116\085\089\089\061\061","\083\098\122\108\114\050\081\079\077\121\113\083";"\084\101\112\075\107\086\089\114\079\119\100\043\122\120\055\065\086\066\061\061";"\065\103\117\116";"\112\085\106\103\049\102\043\050\069\067\118\119\116\099\074\116","\071\054\048\043\073\050\090\121\115\116\101\116\049\054\057\119\051\072\066\061","\066\106\055\113\116\085\119\119","\110\107\117\057\113\078\106\065\081\074\051\073\118\108\056\043\083\100\061\061","\054\100\102\054\076\120\076\086\099\082\105\050\107\066\061\061","\108\082\085\074\074\081\085\061","\117\122\090\051\070\099\050\097\109\052\048\068\112\084\119\120\077\078\106\061","\047\086\056\049\116\084\072\056\107\105\116\069\083\114\047\055\100\121\085\113\114\078\065\098\048\100\088\082\071\106\083\087\055\050\043\116\099\089\099\057\077\081\082\105";"\104\089\097\117\078\110\105\061";"\119\072\061\061";"\089\111\103\057","\080\066\089\070\113\100\061\061";"\056\067\074\075\071\115\047\053\086\121\114\104\102\105\111\109\071\047\113\118\117\081\110\052\079\075\073\102";"\051\076\067\065\055\053\111\076\050\049\102\051","\055\111\116\054\114\065\098\086\084\113\085\054\055\103\109\069\052\121\066\061","\086\122\083\118\090\048\069\084\082\100\114\061","\109\089\075\117\055\072\061\061";"\081\077\050\070\111\065\105\103";"\109\070\065\086\101\086\099\066\100\089\114\099\082\080\105\061";"\071\104\103\122\067\074\104\086\116\070\043\070\065\073\101\061","\101\099\107\109\111\072\061\061";"\054\090\117\105\078\088\052\054\065\089\111\061","\048\081\106\071\114\100\111\105\078\056\051\079\053\101\112\049\116\120\107\061";"\109\100\061\061";"\102\071\100\113","\098\053\049\103\057\121\074\088";"\104\057\050\056\120\066\061\061","\080\100\061\061";"\090\076\119\087\090\071\099\088\119\048\086\121\107\076\105\061","\122\072\099\119\067\100\111\118\070\070\080\049\043\066\061\061","\068\107\073\072\110\049\077\072\076\103\106\077\082\071\075\048\049\112\105\061","\067\051\049\085\053\098\100\061","\054\049\114\088\114\080\083\051\067\104\104\082\050\057\099\051\052\102\085\061","\116\102\099\077\054\107\113\106\119\079\109\067\082\076\079\048\082\085\048\112\103\078\089\065\082\089\061\061","\108\080\065\050\109\102\122\069\107\077\114\061","\109\047\049\047\111\072\067\052\056\119\100\061","\088\050\054\107\049\089\061\061";"\083\120\082\050\102\114\121\118\053\066\061\061","\068\111\068\121\107\109\100\061","\101\052\114\108\081\048\077\051","\113\090\057\088\120\115\121\074\105\122\100\050\086\078\047\083","\113\056\088\107\043\049\047\085\117\069\100\120\065\043\114\107\088\089\061\061","\082\113\054\103\089\066\061\061","\082\047\067\103\090\053\084\104\068\089\061\061";"\117\054\118\069";"\082\098\090\112\087\086\083\065\068\057\088\074\069\072\061\061","\114\100\118\110\081\075\120\085\101\089\115\098\057\081\076\085\110\101\120\117\106\079\076\066\049\052\051\087\088\082\048\049\083\072\086\086\112\099\054\051\103\054\102\073\052\052\117\061";"\119\115\051\066\074\105\119\089\100\116\074\076","\108\072\112\053\116\054\102\061","\067\109\047\117\119\113\105\061";"\122\078\102\108\085\052\049\087\111\098\114\098","\089\077\107\102\075\099\100\082";"\078\089\061\061";"\119\067\104\067\068\110\102\082\097\072\100\061","\116\079\087\120\079\097\114\076\088\075\112\048\076\079\117\061","\118\108\052\082\076\066\098\104\087\084\107\089\074\043\057\089\100\120\085\061","\122\052\084\085\053\089\061\061","\110\120\054\054\107\071\108\043\113\075\086\121\119\104\115\051","\118\103\075\078\103\054\110\081\122\084\085\061";"\097\098\101\119\073\066\061\061";"\088\100\061\061","\119\068\068\085\078\109\052\050\103\089\108\055\105\089\061\061";"\114\102\065\110\098\100\061\061";"\115\112\078\107\057\081\107\061";"\086\049\043\106\051\069\087\053\074\066\061\061","\107\074\118\113\102\101\110\084","\122\097\086\116\088\076\113\108";"\049\098\102\050\079\105\106\067\054\106\054\077\052\050\072\053\081\109\087\119";"\115\066\061\061";"\052\043\077\085\120\090\066\055\112\069\047\076\109\100\061\061","\119\052\053\082\115\078\101\057","\089\084\087\107\084\099\108\105\048\105\053\074\119\082\101\061","\049\071\111\112\082\071\121\099\102\067\055\116","\084\110\055\054\050\052\085\050\086\053\117\061","\050\043\105\110\085\073\043\100";"\088\052\081\081\057\100\071\079\116\072\061\061","\049\057\114\122\084\070\104\083";"\110\121\097\079\072\067\088\116\099\117\084\055","\114\079\113\103\115\080\117\113\103\100\061\061";"\118\067\114\069\104\071\073\053\106\048\084\069\090\072\090\054\118\080\085\061";"\068\104\055\109\051\115\047\078","\118\051\075\102\047\047\101\061","\088\057\057\072\051\110\050\077\074\120\076\071","\050\104\085\089\084\106\111\108","\080\106\108\080\065\066\081\114";"\049\109\098\054\088\066\061\061";"\056\108\102\116\108\065\071\116\122\113\065\099\086\111\087\082\085\089\061\061","\118\053\085\087\116\048\043\118\079\050\052\118\098\083\073\068","\114\056\079\104\100\066\061\061","\073\098\043\069\052\100\061\061","\104\105\056\089\079\102\103\105\090\088\072\061","\089\078\107\078\053\122\071\098\047\072\061\061","\117\117\115\071\099\120\107\061","\104\101\104\074\043\066\061\061";"\053\049\109\084\047\086\107\116\098\107\072\061","\082\065\067\103\098\100\087\113\104\100\061\061";"\054\082\116\103\057\071\057\078\080\109\057\086","\085\102\075\118\103\081\072\084\122\118\110\052\122\071\065\103\088\066\102\061";"\051\115\119\120\074\089\104\077","\098\081\085\057\090\102\053\119\053\099\077\103\072\070\102\061","\103\050\073\116\083\069\053\073\115\098\097\081\107\103\118\083\068\057\102\061";"\069\089\051\080\057\104\103\072\103\080\097\106\108\118\047\053\084\119\052\090\086\088\080\085";"\073\099\110\073\084\120\087\077\113\081\077\081\055\086\107\061","\084\101\043\119\055\054\071\067";"\083\067\055\097\078\080\099\068\076\114\071\055\069\089\056\051\109\090\054\049";"\122\121\054\101\048\109\111\072\075\082\108\102\049\072\061\061","\051\107\110\081\054\117\057\122\114\116\085\121\117\068\116\074\103\072\061\061";"\085\056\081\050\083\113\043\081";"\119\113\083\079";"\076\114\053\117\075\106\103\056\098\089\053\053";"\114\053\118\052\043\118\066\076";"\116\116\086\121\110\115\074\067\108\075\057\071\111\109\117\061","\100\089\110\099\072\069\111\061","\109\070\087\076\090\069\111\051\075\118\118\043\050\089\061\061";"\080\065\089\085\052\078\048\061","\085\109\056\080\112\115\068\089\076\065\089\098\053\089\061\061","\043\109\086\068\083\108\054\118\071\113\081\103\108\080\089\061";"\110\098\115\084","\073\098\052\086\074\067\088\109\069\065\043\112\119\074\110\070\118\097\051\120\048\108\104\055\074\099\086\111","\104\105\070\083\102\047\102\061";"\106\118\084\098\113\104\071\047","\081\119\047\080\057\067\075\074","\057\052\116\106\089\073\088\047\083\110\057\068","\076\107\105\061";"\067\101\098\101\089\082\075\068\083\118\104\051\052\110\118\102\115\121\090\108";"\090\089\069\051\076\081\079\098";"\057\102\112\109\086\085\057\050\081\066\061\061";"\115\104\070\086\090\079\070\085\116\114\085\082\122\051\085\104\098\088\107\076\089\114\050\102","\072\105\086\071\050\076\122\077\112\114\103\112","\076\100\110\102\073\066\061\061";"\100\077\122\073\108\102\103\073\099\101\103\097\103\119\048\061";"\072\108\047\048","\078\071\090\047\107\107\119\057\107\088\081\108\067\099\075\047\090\077\106\061","\074\115\110\088\080\103\069\061";"\111\113\116\072\111\121\065\083\085\113\069\120","\047\051\115\082\075\089\061\061";"\113\047\048\118\101\072\061\061";"\049\053\083\107\043\057\053\052\079\069\069\061","\066\115\076\069\100\075\101\115\057\066\061\061","\073\087\117\119\057\105\101\115\074\075\120\065","\088\043\113\100\051\056\084\111\074\048\069\050";"\112\053\118\122\082\089\061\061","\079\068\055\111\069\072\061\061";"\085\082\068\073","\116\109\048\082";"\074\079\043\075";"\090\068\050\100\068\072\061\061";"\090\053\074\102\072\099\052\106";"\084\120\049\107\099\057\111\075\121\100\061\061";"\071\111\070\056\047\121\074\117\114\072\061\061","\100\107\068\050\082\118\088\052\056\090\116\111\103\090\111\057\117\043\114\061";"\074\076\101\048\077\066\061\061";"\121\070\072\075\056\072\112\065\051\071\122\047\113\116\083\110\088\080\105\061","\115\049\086\073\072\079\099\116\099\118\079\087\070\107\056\077\114\100\061\061";"\050\087\086\073\122\066\085\053\090\077\083\110\104\048\121\082\083\108\066\061";"\074\088\121\120";"\100\070\115\102\056\082\053\114\118\066\074\119","\053\084\120\121\069\086\119\088\055\072\061\061";"\087\072\104\106\084\053\072\104\051\090\074\117";"\109\077\089\090\053\079\079\055\048\117\111\061","\121\101\115\102\078\050\121\047\119\080\097\116\118\077\107\115";"\117\100\061\061","\084\072\061\061";"\085\118\112\087\085\118\057\106";"\109\085\114\113\117\051\048\089\067\050\111\088\101\052\101\061","\057\115\052\077\066\108\074\112\050\117\088\074\107\043\069\061","\115\121\051\117\117\073\116\073\120\066\117\061","\075\114\099\065\074\112\114\052";"\104\118\078\073\110\081\070\104","\076\100\068\051\107\047\105\113\080\112\116\100\114\103\085\061";"\119\082\067\079\119\087\056\069\067\100\050\052\100\102\107\061","\050\117\105\105\098\066\061\061","\085\066\061\061","\104\085\043\100\104\068\082\048\071\115\101\061","\118\071\048\122\066\075\069\061";"\049\079\122\088\107\089\061\061";"\111\065\090\120\074\097\073\112";"\114\088\052\119\065\047\106\061";"\107\082\097\116\075\089\061\061";"\081\083\104\098\083\055\085\101\103\057\069\061","\056\089\084\078","\078\103\113\068\066\115\082\051\120\119\081\083\084\080\114\061","\120\101\119\100\117\072\061\061","\112\066\084\121\049\106\076\087\052\090\122\079\106\078\071\109\048\112\100\061";"\120\105\073\079\068\117\085\066\047\100\061\061","\098\066\089\072\051\098\075\080\090\043\113\100\108\110\057\071\109\073\085\061","\087\099\102\043\043\068\077\072\110\099\106\061";"\111\084\119\098\080\107\085\097\120\081\118\050\079\113\105\061";"\082\043\077\085\074\121\067\121\071\073\051\065\087\122\070\115\112\066\061\061","\106\106\119\090\088\110\052\122\056\078\122\120\077\082\112\108\057\072\048\081\051\121\079\102\071\118\077\097\084\117\072\067\072\084\110\053\056\107\114\097\118\076\118\097\084\106\048\061";"\083\052\119\065\111\055\122\065\122\067\072\099\080\112\106\075\118\069\101\061";"\114\103\056\043\073\097\085\107";"\087\080\057\055\070\089\061\061","\116\110\047\121\108\116\102\071\111\101\072\061","\050\087\101\047\068\066\061\061","\112\074\055\086\097\077\118\122\068\074\106\079\090\067\088\088\050\100\061\061","\043\083\120\056\088\075\117\061";"\056\052\072\101\113\090\071\082\085\118\067\111\082\043\053\085\116\072\061\061","\102\081\071\117\121\102\088\076\066\054\050\085\071\074\075\083\114\067\108\119","\089\053\104\089\110\054\074\120\115\068\056\116\074\118\109\082\104\089\061\061","\057\108\070\089\109\122\101\068\122\069\108\047\048\072\061\061","\088\068\048\115\052\049\112\099\107\049\114\053\049\065\072\079\086\065\069\061";"\085\081\057\122\077\077\074\076\082\070\097\080\102\068\047\113\101\089\043\066";"\103\100\119\078\065\051\052\122\068\049\111\072\050\081\083\104\084\113\101\061","\051\078\110\049\077\069\085\061";"\116\121\076\051\086\117\108\048\054\112\067\079";"\121\114\110\086\087\057\050\077";"\065\057\101\080\049\114\105\050\043\099\086\122","\051\081\075\086\119\082\069\061","\074\084\071\048\048\116\101\089","\051\116\047\089\106\115\089\109\056\100\050\075\099\120\085\088\076\085\100\061","\085\099\080\051\068\071\103\075\106\112\049\104\055\087\108\100";"\049\087\115\105\051\087\118\120\090\066\061\061","\055\116\073\114\073\089\061\061";"\070\118\118\112\101\121\056\048\118\105\067\056\076\069\103\086\122\120\111\112\099\110\089\119\079\115\112\077\079\115\116\055";"\116\075\116\065\076\056\072\061","\113\074\057\074\109\066\049\085\051\087\069\088\110\071\073\081\077\102\106\061","\056\111\048\047\122\076\081\103\106\072\061\061";"\089\099\076\084\122\047\068\078\088\120\098\075\088\113\083\098\050\057\083\051\055\069\081\086\099\090\073\073";"\103\078\107\105\119\053\098\076\112\067\072\101\111\081\099\050";"\115\086\055\072\102\047\122\102\087\072\061\061";"\048\077\109\073\106\051\107\048\110\080\048\061","\052\054\068\049\050\056\089\118";"\103\109\089\099\119\076\089\067","\080\103\085\069\088\077\102\122\121\103\105\061","\057\122\120\111\055\073\108\106\102\081\080\114","\085\081\086\054\082\089\061\061","\065\086\111\075\073\069\111\061","\077\047\104\105\098\122\108\069\056\090\072\061","\068\115\110\086\086\066\061\061";"\106\085\067\100\109\119\114\066";"\119\069\120\049\112\057\049\116\055\112\047\097\054\052\085\061","\113\106\116\075","\112\098\090\115\116\106\116\077\104\090\097\057\055\116\077\079\101\052\106\061";"\116\097\051\082\112\066\061\061","\103\081\081\112\098\098\086\066","\047\100\061\061";"\122\119\122\099\080\114\079\080";"\114\108\117\122\052\109\072\084\076\056\109\052","\053\100\061\061","\078\087\057\111\056\082\070\085","\056\108\105\120\105\107\101\061";"\070\111\090\043\068\079\073\043";"\052\085\101\103\120\097\081\053\072\068\105\120\106\120\084\052","\074\112\078\101\078\066\061\061";"\116\112\068\077\055\098\083\098\073\088\070\065\070\090\120\112\047\081\069\061","\089\098\070\099\076\065\081\057\106\049\101\061";"\080\116\086\050\086\065\099\071\110\069\113\106\083\121\084\081\067\066\101\061","\069\073\082\083\087\107\115\109\119\067\075\103\071\043\101\081\085\076\067\109\067\066\061\061","\116\066\061\061";"\077\098\070\103\082\070\066\053\043\079\054\075\102\113\111\061";"\121\100\061\061";"\089\118\068\072\100\100\061\061","\105\077\043\066\076\072\061\061";"\072\082\076\113\115\119\114\056";"\084\115\081\114\082\089\061\061","\066\087\068\068\067\047\117\097\113\054\088\086\066\097\097\120";"\066\116\115\051\116\083\050\115\104\070\083\114\077\107\098\067\083\113\083\110\081\079\086\047";"\048\054\084\065\098\057\081\116\070\108\099\083","\051\065\114\061","\117\050\109\113\049\111\107\061","\087\052\113\067\120\053\056\106\087\100\061\061","\107\089\061\061";"\107\115\118\075\102\066\061\061","\103\113\084\047\110\086\109\080\086\047\107\061","\114\119\116\073\057\108\066\099\117\113\087\099\084\083\108\055\108\072\052\066\075\072\061\061","\099\066\084\108\077\057\105\061";"\085\054\073\049\099\088\107\061","\047\068\084\074\065\119\088\047\085\071\122\049\072\107\054\069\090\066\061\061","\112\090\072\085\074\043\048\077\076\121\110\089\114\121\050\101\080\066\061\061";"\078\120\100\111\099\076\086\070\088\116\115\100","\083\100\061\061","\056\054\053\067\065\066\074\047\085\057\106\061","\085\108\068\106\120\066\061\061","\068\090\047\081\104\053\102\061";"\066\079\121\085\105\070\066\113\070\055\054\050\077\052\112\107\074\084\047\053\083\079\107\106\069\076\113\047";"\110\048\116\102\075\075\077\117","\051\052\082\101\120\079\065\109\109\121\067\069\071\083\098\111\054\120\084\121\119\109\107\121\048\102\047\072\072\118\079\119\085\097\049\121\081\104\050\055\068\066\061\061";"\109\067\082\097\081\084\054\081\070\066\061\061","\101\072\061\061";"\043\066\061\061","\106\073\104\084";"\053\089\061\061";"\077\097\086\089\115\106\109\061","\069\073\073\081\107\122\110\067\043\066\061\061";"\113\111\049\055\113\070\106\101\081\043\065\090\073\069\047\122\104\066\061\061";"\111\119\082\052\083\072\061\061";"\069\090\122\075";"\068\068\078\085\074\106\110\110\051\100\048\061","\076\090\051\077\075\098\081\082\053\067\090\113","\052\051\055\048\082\089\083\073\072\100\107\061","\106\053\076\106\069\110\057\066\067\104\069\047\107\055\101\061","\051\121\070\072\112\072\061\061","\051\107\102\105\104\100\061\061","\055\098\076\122\079\107\102\047\073\102\106\109","\085\117\055\078","\101\087\088\068\084\117\109\077\110\111\112\078\107\081\068\069\078\089\122\049\074\067\099\112\074\121\087\074";"\110\121\122\068\121\079\109\119\057\047\117\061";"\088\089\077\112\069\049\074\090\047\110\117\072\099\080\098\119\071\066\061\061","\115\068\068\086";"\086\050\075\086\076\119\052\090\073\098\113\122\080\122\114\061";"\086\105\099\099\102\088\072\054\106\119\106\080\100\072\061\061","\099\072\061\061";"\116\072\118\084\070\079\075\052\048\068\101\105\073\078\115\117\078\104\049\087\055\113\054\051\088\080\112\116\080\047\075\067\107\071\102\089\048\108\074\101\081\113\081\049\051\113\073\075\065\119\071\114\075\051\080\082\073\115\103\079\074\114\078\115\098\119\052\057\120\119\082\066\114\117\088\111\071\110\089\077\072\074\109\054\087\076\086\069\053\079\069\061","\122\102\054\048\122\081\088\114\122\086\116\073\067\072\061\061";"\079\083\116\097\102\088\108\108\072\102\113\067";"\110\076\078\101\077\068\048\061";"\077\116\043\100\108\073\065\070\083\098\097\066\082\048\054\081\114\052\076\073\103\105\108\083\069\047\115\121","\121\110\053\082\070\100\107\099\120\088\088\083\118\072\112\048\071\072\061\061";"\066\077\052\085\086\100\081\079\109\055\068\081";"\065\043\070\069\114\103\100\061";"\079\051\109\107\099\075\122\086\082\077\078\107";"\074\110\082\090\049\118\057\066\097\067\114\066\122\051\098\088\067\070\101\061";"\052\074\069\066\088\100\061\061","\049\085\043\098\078\043\103\118\043\048\103\090\088\066\111\088\083\066\088\055\054\066\061\061";"\098\084\112\057\084\068\065\048\076\084\076\053\108\072\061\061","\119\057\086\054\048\072\061\061";"\120\118\052\090\121\088\116\101","\047\088\108\043\056\080\098\070\043\082\053\120";"\084\070\108\098\079\086\088\111\099\053\085\061";"\110\072\049\052\111\085\101\061","\097\068\069\061";"\122\085\109\043\043\115\057\078\065\097\066\043\089\075\085\106\065\047\076\117\120\071\076\122","\073\043\109\122\090\089\121\112\051\083\066\088\083\122\043\084\047\113\111\061","\111\057\108\120\115\109\072\106\085\066\052\118","\085\108\090\068\107\112\119\118\047\106\122\056\122\089\061\061";"\099\120\102\105\098\075\072\103\120\088\097\111\112\071\075\066\080\116\106\106\115\072\061\061","\116\069\103\110\102\048\072\079\049\097\071\055\090\085\072\057\066\070\069\061","\119\121\086\089\114\081\048\081\079\047\088\106\065\067\066\048\074\102\083\101","\083\067\112\076\122\071\072\088\105\073\122\098\075\088\068\098\065\068\085\061";"\098\088\056\084\110\107\047\069";"\051\071\056\073\106\079\072\080\104\109\090\069\054\099\071\109","\108\102\085\087\057\118\106\061";"\043\086\110\074\117\078\099\087\111\090\072\111\111\108\112\077\053\100\061\061","\086\079\067\080\051\070\085\047";"\085\111\049\069\109\071\077\116\066\089\047\120";"\049\052\065\120\090\110\119\082";"\090\120\081\102\102\100\061\061";"\084\055\102\083\055\105\098\069\080\072\100\121\078\077\097\074\116\070\115\102\113\052\082\049\111\103\100\088\115\105\114\108\054\119\078\083\077\076\047\065\074\071\071\043\066\120\047\069\069\070\107\104\114\117\118\113";"\084\104\068\074\053\043\114\099\077\072\061\061","\082\103\051\076\119\066\061\061";"\086\075\082\106\073\100\052\120","\113\067\111\089\056\119\047\079\103\066\061\061","\066\098\097\077\052\102\055\100\067\089\076\084\116\070\100\061";"\086\073\119\067\090\055\106\107\088\072\107\061";"\055\055\080\085\112\072\061\061","\075\121\084\112\113\070\065\054\084\047\116\072\078\066\061\061","\083\108\111\075\069\117\090\082","\043\113\109\104\080\097\047\073\080\047\110\081\081\100\061\061";"\074\069\055\073\110\098\118\052\090\089\118\118\047\072\061\061","\072\067\051\054\084\072\061\061";"\110\116\077\075";"\081\097\097\117\086\117\054\107\080\090\065\050\071\100\048\048";"\086\105\085\098\118\106\120\077\072\075\100\106\106\049\089\061";"\043\057\067\068\050\072\061\061","\043\072\061\061","\052\089\053\067\057\089\061\061";"\043\073\113\077\071\080\120\075\083\081\111\061";"\079\087\082\090\049\048\078\097\072\106\101\079\115\052\090\098\083\105\101\061";"\084\089\061\061","\053\120\057\102\106\086\121\106\107\097\100\090\069\066\047\073","\072\066\086\114","\101\114\111\072\056\057\122\088\107\122\074\057\108\052\069\120\101\089\061\061";"\100\065\077\071\107\067\120\071\100\055\089\061";"\113\089\117\069\048\066\061\061","\069\088\066\082\117\116\113\065\078\079\049\119\102\080\113\097\081\084\111\061";"\054\069\078\101\120\079\111\061";"\069\083\065\114\074\111\069\084\057\072\102\061","\105\049\067\090\108\115\081\115\086\100\061\061","\113\077\104\106\050\082\077\087\069\084\077\080\100\100\087\099\108\100\061\061";"\117\065\083\076";"\109\088\110\074\055\089\061\061";"\110\109\107\110","\083\066\057\067\080\087\085\098\056\086\106\070\081\069\052\053\080\051\114\043\106\074\070\111\100\053\065\047","\114\055\068\097\078\066\061\061";"\105\119\052\068\121\072\081\072\072\101\073\079\050\082\056\107\102\121\101\061";"\056\078\100\047\081\116\047\073\115\071\086\089\118\082\112\070";"\111\057\099\121\111\084\107\053\075\072\061\061";"\065\112\109\085\083\069\079\117\078\117\077\116\053\089\109\061","\098\085\067\085\087\066\116\069\056\077\090\054";"\072\082\098\086\077\043\112\053\122\076\100\061","\121\106\080\051\115\043\102\089\083\066\061\061";"\114\048\113\084\078\109\047\113\118\084\056\054\051\100\061\061","\108\056\097\057\108\090\114\061";"\089\056\109\105\057\121\115\089","\112\119\100\113\097\081\050\105\102\080\100\117\107\100\102\081";"\082\053\047\089\065\048\057\074","\049\098\048\112\108\102\069\121\078\066\061\061","\107\099\072\087\066\114\050\098\074\072\102\061";"\115\076\105\079";"\072\103\114\083\066\071\066\081\057\089\061\061";"\073\075\078\120\105\051\100\103\079\108\068\106\071\065\110\111\047\103\070\068\056\087\109\083\106\118\102\052","\072\103\070\100\089\085\117\061";"\105\101\074\051\103\105\073\085\052\065\053\069\086\072\117\103\099\119\098\067\071\087\106\061";"\072\117\068\106\076\072\061\061","\081\047\054\081\115\073\104\109\119\079\085\120\084\080\120\118\049\106\105\061","\079\070\073\047";"\117\081\079\089";"\050\085\075\074\102\043\057\122\115\110\112\088\052\072\061\061","\075\078\090\069\100\100\061\061";"\049\098\085\078\065\087\115\076\100\066\061\061","\065\052\110\083\116\089\061\061";"\075\051\047\066\090\065\076\051\117\108\116\067\098\079\104\090\070\082\121\099\120\104\081\049\068\106\099\119\052\075\081\112\053\083\071\051";"\073\071\110\052\089\076\107\083\065\050\080\079\076\103\116\099","\066\088\065\102\106\079\102\061","\114\097\068\112\069\087\053\107\118\115\101\061","\057\067\078\105\070\097\066\061";"\054\057\105\108\071\107\115\054\086\114\112\107\109\089\083\078\101\071\105\061";"\079\089\102\066","\110\088\101\069\119\068\114\061";"\108\087\074\110\078\077\119\076\078\070\073\068\085\051\068\085\066\106\113\105\070\112\100\103\047\089\102\115\119\071\120\065\108\084\117\050\115\065\065\047\066\109\071\100\073\098\052\056\069\112\085\078\098\051\068\114\075\067\078\051\056\120\087\075\072\099\056\076";"\102\055\085\109\114\087\048\076";"\050\107\079\122\067\067\071\112\107\106\089\069\050\100\109\081\102\081\111\122\057\050\106\077\078\052\106\099\117\047\043\104";"\066\075\065\068\043\111\120\079\070\107\109\117\073\089\061\061";"\108\075\084\043\108\107\119\102\100\089\078\048\076\079\052\120\074\077\068\055\071\089\061\061","\120\075\110\069\051\067\050\071","\072\087\050\051\118\113\050\078\112\076\099\117\109\089\061\061","\104\100\061\061","\067\073\078\056\055\089\061\061";"\085\050\074\103\043\122\068\088\078\121\116\057\054\105\053\076\051\066\061\061","\084\053\050\101\122\088\078\104\050\100\061\061","\113\121\089\056\066\089\061\061";"\106\069\112\120\106\081\051\102\103\050\090\050\102\089\061\061";"\105\110\043\119\056\083\088\073\102\048\108\102\075\101\100\067\077\070\048\061";"\114\072\061\061";"\048\120\069\101\108\086\068\082\047\104\100\090\107\076\114\061","\075\102\051\083\090\102\114\070\098\107\049\077\072\089\061\061","\068\116\118\121\073\102\107\080\101\053\113\084\055\066\061\061";"\100\072\061\061";"\065\089\061\061","\103\113\117\120\072\065\052\099\070\114\102\055\050\109\121\121\075\118\078\087\082\080\052\122","\114\074\087\071\067\067\116\088\053\068\071\078\050\071\050\110\074\065\076\112\078\102\113\069\085\112\069\101";"\112\066\084\116\080\089\061\061","\113\088\057\076\117\088\113\077\114\069\122\068\121\088\113\119\121\088\113\105\114\066\061\061","\069\099\097\102\086\101\053\087\120\089\061\061","\090\090\077\050\109\079\117\110\082\069\057\057","\115\057\097\104\048\089\061\061","\117\086\113\076\104\054\120\068";"\082\052\043\089\077\056\087\065\052\119\105\061";"\098\115\105\090\098\073\122\070\100\055\048\108\120\101\111\061","\075\079\107\106\043\084\109\112\043\089\061\061";"\080\110\078\115\110\113\052\087\087\067\067\077\080\056\051\066\105\056\102\061","\104\082\111\112\074\048\097\079\115\052\106\061","\089\089\078\120\073\053\122\103\100\107\084\104\103\055\074\114\077\048\048\061";"\122\077\104\081\053\085\047\108","\066\119\067\110\114\119\105\048\099\100\061\061","\076\103\119\071\086\104\108\065\101\052\110\072\113\067\100\066\110\086\048\061","\043\076\082\120\099\088\115\101\113\108\104\105";"\112\047\085\073\122\043\066\061","\066\105\076\107\076\087\112\075\078\121\103\098\098\076\047\120\122\113\108\122\054\072\061\061","\079\055\072\047\082\066\061\061";"\084\104\048\073\047\071\054\084\067\056\074\105\079\088\119\114\098\121\055\100\098\080\067\099\097\118\074\069\081\089\061\061";"\103\081\104\121\043\084\075\057\116\117\101\061";"\072\101\119\077\101\110\101\099\105\070\083\050\072\122\108\085\109\121\069\061";"\068\085\082\106\065\050\114\074";"\118\111\055\100\043\072\061\061","\075\100\079\071\084\073\067\086\085\065\073\084\121\067\097\080\109\100\061\061","\116\106\108\049\052\089\061\061","\113\113\109\084\067\072\061\061";"\072\077\054\116\112\070\090\077\075\119\119\080\097\066\056\081\078\089\061\061","\085\090\119\056\087\047\112\071\047\090\073\072\080\101\070\115\090\043\048\061","\069\075\076\068\065\066\061\061";"\113\102\116\048","\073\043\090\121\080\069\065\113\057\052\083\084";"\074\081\079\056\071\106\073\074\072\088\072\051";"\115\121\088\068\052\119\088\055\074\100\106\061";"\073\089\111\054\067\119\072\061","\054\077\114\074\113\077\108\121\117\121\072\067";"\113\114\115\070\050\108\065\078\067\066\061\061";"\110\100\070\085\055\066\061\061","\111\112\075\097\068\069\052\080\118\068\120\100\066\078\050\067\109\043\111\080\053\089\061\061";"\065\079\089\057\067\043\065\111\048\119\119\086\087\057\079\114\069\119\067\076\109\087\081\110","\052\119\110\071\099\086\097\110\048\081\089\057\088\082\079\065\118\109\080\083\084\052\074\111\105\109\079\048\066\073\108\119\077\049\078\108\110\075\043\097\080\052\105\108","\055\085\080\121\069\098\106\061","\081\112\115\116\086\084\101\061","\054\112\106\068";"\050\101\087\076\122\072\061\061","\053\099\099\055\078\104\101\086\055\110\073\073\118\110\047\052\049\066\106\061";"\090\067\112\048","\104\070\088\083\108\102\047\084\088\097\112\110";"\068\121\121\074\075\056\106\061";"\085\067\114\107\083\097\102\090\098\115\108\110";"\109\104\056\100\109\098\098\089\117\088\112\119\114\089\061\061","\104\077\101\069\057\054\072\101\080\100\061\061";"\043\117\088\071\122\067\109\061","\101\069\114\084\043\066\061\061";"\071\088\098\087\098\110\105\061";"\054\080\109\053\118\103\090\085\082\110\102\061","\086\088\048\086\114\089\061\061";"\099\056\056\090\111\074\074\047";"\070\114\103\089\108\047\099\075\102\118\117\061","\069\100\061\061";"\111\103\106\120\108\090\118\065\117\100\061\061","\075\085\108\107\050\054\049\053\099\115\070\049\085\079\080\102";"\075\111\102\050\082\078\068\097\115\102\117\052\073\103\107\099\112\081\069\061";"\119\112\097\119\087\086\121\102\105\086\074\078","\048\086\082\111\105\084\072\061";"\082\052\112\049\104\086\122\068\081\089\061\061";"\102\070\070\067\110\100\061\061","\120\056\103\097\075\098\069\061";"\076\084\067\067\077\080\099\078\072\105\056\047\050\090\117\061";"\121\107\088\083\099\119\083\105\075\107\051\085\082\050\114\061";"\100\102\065\098\069\065\074\080\108\085\069\061","\052\121\056\120\107\100\061\061";"\122\116\105\061";"\103\083\053\055\072\107\109\061";"\089\117\115\048\112\107\098\052\104\066\061\061","\115\090\111\083\122\119\048\061";"\090\053\106\076\121\054\050\118\109\103\109\098\101\104\104\085","\066\086\119\073\103\111\110\049\053\071\071\087\078\100\061\061";"\118\065\074\077\116\052\115\054\074\066\061\061";"\122\088\122\113\049\100\061\061";"\070\110\114\109\049\050\099\066\100\113\106\055\054\089\061\061","\112\070\053\071\119\116\054\085\105\119\111\066";"\109\122\083\072\057\114\100\079\051\049\115\052\069\066\101\114"}local function collectgarbage(hooks)return module[hooks-(630950-629189)]end for hooks,idx in ipairs({{398036-398035;-365125-(-367539)};{(-642689+((-451915-(139472+(232586+-1324771)))-(-885275)))-743383;-406996+(-234070+642972)};{-518926+((87737+(-382830-122941))+938867);-285489-(-287903)}})do while idx[-973604+(951676-(-21929))]<idx[-372671-(-372673)]do module[idx[508106-508105]],module[idx[495689+-495687]],idx[89757+-89756],idx[381510-381508]=module[idx[777050-777048]],module[idx[766394+-766393]],idx[-906693-(-906694)]+(-118588+118589),idx[1042655-1042653]-(-222293+222294)end end do local hooks=type local idx=math.floor local collectgarbage={X=970965-970959,T=771821-771810,R=282818-282795,Q=-346516-(-346546),f=-789804-(-789864),["\052"]=548437-548384,["\048"]=-73061-(-73117),["\055"]=110214-110163,["\050"]=386985-386928,e=(-58015+-148730)-(-206785);u=-839440-(-839468),V=(1035350+-226604)+-808708,v=741714+-741660;d=984187-984155;["\054"]=-48892-(-48947);H=((978433+-1602167)-(-780882))+-157100;n=-582669+582727,k=(974878-111236)-863630,C=(926514+-164915)+-761540;p=-469702+469763;D=-80830-(-80867);S=-727191+727205;t=100097+-100084,r=-425212-(-425220);x=(76431-(-377139+(801352-68922)))-(-278885);h=133716+-133689;B=552328+-552312;y=-272478+(1121774-849267),A=-844068+(627673+216398);s=-12321+12323,W=-894898+894944,J=468721+-468720,O=952627-952601;N=-781882-(-781892);j=(-1170210-(-1523065-(-769456)))-(-416653),o=104216+-104172;a=143011+-142948;U=800539+-800515,P=-96789-(-96851);E=-744225+744229,["\043"]=690151+-690142;K=156487+(828513-984953),L=-76810-(-76855);["\049"]=(-74864-(-932371))-857466;z=1031893-1031876,q=(155158+455184)+(-845450+235129);Z=-31704-(-31737),i=((211238+-401542)+-337145)+527485;m=-523445-(-523465),G=118272+-118253;["\047"]=(-885363-100617)-(-986014);l=43420+(-799962-(-756581)),Y=627115-627115,["\057"]=(-220019-502025)-(-722049);["\051"]=(771663-(390598-(-20444)))+-360599;b=564585-(236682+327885);I=(831396-394275)-437078,["\053"]=-345963-(-911620+565615),g=158218-158169,M=890506-890456;c=255964-255933,["\056"]=(-411952+547957)+-135998;w=145626+-145591;F=-241911-(-241926)}local double=module local m=string.char local data=string.sub local rawset=table.concat local seek=table.insert local roblox=string.len for module=746028+(-316709-429318),#double,(-1626602-(-689308))+937295 do local remove=double[module]if hooks(remove)=="\115\116\114\105\110\103"then local hooks=roblox(remove)local cls={}local create=709032+-709031 local rawequal=-754082-(-754082)local upvalueid=(-903550+285557)+617993 while create<=hooks do local module=data(remove,create,create)local double=collectgarbage[module]if double then rawequal=rawequal+double*(653614-653550)^(((711471-(854257-704963))+-562174)-upvalueid)upvalueid=upvalueid+(-503065+503066)if upvalueid==-616984-(-616988)then upvalueid=462847-462847 local hooks=idx(rawequal/(1008719+-943183))local module=idx((rawequal%(-687123+752659))/(525767+-525511))local collectgarbage=rawequal%((-230108+-454544)+684908)seek(cls,m(hooks,module,collectgarbage))rawequal=490368+-490368 end elseif module=="\061"then seek(cls,m(idx(rawequal/(-401311-(-466847)))))if create>=hooks or data(remove,create+(204396+-204395),create+(-418177-(-418178)))~="\061"then seek(cls,m(idx((rawequal%(-217792+(((793768-474360)-(-735394))-771474)))/(-601435-(-601691)))))end break end create=create+((504664-554010)-(-653701+604354))end double[module]=rawset(cls)end end end if _gmod_gfind_a_gmod_onload_iterator~=collectgarbage(75104+-71297)then return end do local hooks=true local idx=string[collectgarbage(1048471+-1045001)]local module=function()error(collectgarbage(-715860-(-51751+-667695)))end local double=false local m=pcall(function()double=true end)and double local data=math[collectgarbage(613311-(571116+40289))]local rawset=table[collectgarbage(-624787+628103)]local seek=table and table[collectgarbage(626304-622572)]or unpack local roblox=data(-41193+(217192-175996),(185586-(-292863))+-478384)local remove=((283786+((-377311-(-18543))+(-541848+706584)))-992053)+902299 local cls=922500+-922500 local create={pcall(function()local hooks=(4154644-881602)-collectgarbage(452012-449322)^(397943+12498479)return collectgarbage(-534836-(-536943))/hooks end)}local rawequal=create[34073+-34071]local upvalueid=tonumber((idx(tostring(rawequal),collectgarbage(-506400-(-508924))))())for module=-686649+(-213139+899789),roblox,42505-(-44100+(-836717+923321))do local double=math[collectgarbage(-219463-(-221369))](593131-593130,-99778+99878)local m=data((-533887+871714)+-337827,803947-803692)local rawset=data(876394-876393,double)local create=data(554116-554115,31585-31583)==-432822+432823 local os=rawequal:gsub(collectgarbage((264017+-15805)-245688),collectgarbage((-1002058+((862422+-213178)+-584763))+(-221138+1162139))..(tostring(data(15063-15063,-930675-(-940675)))..collectgarbage(-281934+285358)))local length={pcall(function()if data(500355+-500354,226780-226778)==-606614+606615 or module==roblox then local module=tonumber((idx(tostring(({pcall(function()local hooks=(2735545-(-380151))-collectgarbage(((-1824522-(-1046969))+1687832)+-906235)^(1497148-(-951111+564657))return collectgarbage(770093+-767803)/hooks end)})[34504-34502]),collectgarbage(-552945-(-555469))))())hooks=hooks and upvalueid==module end if create then error(os,187981-187981)end local remove={}for hooks=(-482931+(1558345-342512))+-732901,double,489266-489265 do remove[hooks]=data(((704380-382476)-172522)+-149382,880917+-880662)end remove[rawset]=m return seek(remove)end)}if create then hooks=hooks and(length[377716+-377715]==false and length[-24180+24182]==os)else hooks=hooks and length[104840-104839]remove=(remove+length[rawset+((-872790+404677)-(445828+-913942))])%(914662+-914406)cls=(cls+m)%(-268516-(-268772))end end hooks=hooks and remove==cls if hooks then else repeat return(function()while true do l1,l2=l2,l1 module()end end)()until true while true do l2=data((-309232+953009)-643776,(635256+-1393827)+(927791+-169214))if l2>-999900+999902 then l2=tostring(l1)else l1=l2 end end return end end local hooks,idx do local module=math[collectgarbage(366528-364710)]local double=math[collectgarbage((1092394-586217)-504271)]local m=table[collectgarbage(-220957-(-224547))]local data=string[collectgarbage(((25963-(-442705))+(((-147326+1058698)+-3357992)-(-961474)))+(449087-((-421243-(687182+-1155664))+-617532)))]local rawset=574964-574964 local seek=-365288+365290 local roblox={}local remove={}local cls=252341+-252341 local create={}for hooks=-702388+702389,744429-744173,-572988+572989 do create[hooks]=hooks end repeat local hooks=double(((-35126+(560842-((882539-367997)+-308603)))-(-356087))-(1259485-583622),#create)local idx=m(create,hooks)remove[idx]=data(idx-(-375687-(-1119692-(-744004))))until#create==(-1342138-(-582775))-(-759363)local rawequal={}local function upvalueid()if#rawequal==-924669-(-924669)then rawset=(rawset*(192397-192308)+((393021+-932556)+((188061+23262552108795)-(-822239+(2205532-900207)))))%(-1010796+(783913+(35184373092211-776496)))repeat seek=(seek*(-27929-(-27983)))%(((-7238+156779)-(-850697))+-999981)until seek~=424257-424256 local hooks=seek%((-1006708+1746538)-739798)local idx=(module(rawset/(((624528-242662)+-559463)-(-177599))^((-5721+5734)-(seek-hooks)/((-428932-(-288958))-(-140006))))%(455579+4294511717.0))/(211069+-211067)^hooks local double=module((idx%((-148844+390294)-241449))*(-494838+(4294937083.0-(-525051))))+module(idx)local m=double%(-559173-(-624709))local data=(double-m)/(290295-(((-406430+778817)-157030)+9402))local roblox=m%(346246-345990)local remove=(m-roblox)/(-79356+79612)local cls=data%(-980980-(-981236))local create=(data-cls)/(683327+-683071)rawequal={roblox;remove;cls;create}end return table[collectgarbage(-198496-(-202086))](rawequal)end local os={}idx=setmetatable({},{[collectgarbage(51495+-47845)]=os,[collectgarbage(-828109+832192)]=nil})function hooks(idx,module)local double=os if double[module]then else rawequal={}local hooks=remove rawset=module%(35184372627967-539135)seek=module%(240030-239775)+((-1746529-(-807991))+938540)local m=string[collectgarbage(80130-76143)](idx)double[module]=collectgarbage(815964-(1176532-362977))local data=729599+-729363 for m=(-565082+(654746-(-422526-90479)))+-602668,m,1004020-1004019 do data=((string[collectgarbage(184335+(359764-540673))](idx,m)+upvalueid())+data)%(-181933-(-840469-(562785+-1221065)))double[module]=double[module]..hooks[data+(-139932-(-139933))]end end return module end end return(function(module,m,data,rawset,seek,roblox,remove,rawequal,cls,require,pcall,number,create,upvalueid,double,loaders,error,lines,rawnew,length,loadfile,class,index,wrap,os)rawnew,loaders,number,require,error,double,upvalueid,wrap,pcall,class,cls,index,create,lines,loadfile,os,rawequal,length=function(hooks,idx)local module=os(idx)local collectgarbage=function(collectgarbage,m,data,rawset,seek,roblox,remove)return double(hooks,{collectgarbage,m,data,rawset,seek;roblox;remove},idx,module)end return collectgarbage end,function(hooks,idx)local module=os(idx)local collectgarbage=function(collectgarbage,m,data,rawset,seek,roblox,remove,cls)return double(hooks,{collectgarbage;m,data,rawset;seek,roblox,remove,cls},idx,module)end return collectgarbage end,function(hooks,idx)local module=os(idx)local collectgarbage=function(collectgarbage,m,data,rawset)return double(hooks,{collectgarbage,m;data;rawset},idx,module)end return collectgarbage end,function(hooks,idx)local module=os(idx)local collectgarbage=function()return double(hooks,{},idx,module)end return collectgarbage end,function(hooks,idx)local module=os(idx)local collectgarbage=function(collectgarbage,m)return double(hooks,{collectgarbage,m},idx,module)end return collectgarbage end,function(double,data,rawset,seek)local dir,onload,getmetatable,tostring,math,call,const,c,char,include,traceback,_G,Factory,game,new,float,object,type,bytecode,isLinux,newpath,sethook,setupvalue,close,yield,a,package,loadstring,void,dofile,pcall,open,coroutine,xpcall,gmatch,import,raise,loadlib,i,code,delete,parse,hookfunction,assert,packages,setmetatable,searchpath,select,size,getlocal,gmod,randomseed,loader,isWindows,imports,read,setlocal,remove,rawget,j,resume,upvalueid,gsub,tmpname,popen,byte,hasnext,create,getupvalue,tonumber,obj,next,os,print while double do if double<608464+7903240 then if double<(4407274-641522)-(-605145)then if double<-871864+3168620 then if double<753780-(-60024-339496)then if double<-455534+963583 then if double<884034-635547 then if double<-86788-(319890+-542396)then if double<48014-(-35390)then if double<-401039+447480 then if double<17997+25170 then if double<-707225-(-742968)then remove=idx[hooks(collectgarbage(-420204-(-422042)),(213370+291112)+6117428113015)]remove=create[remove]remove=remove(create)os=idx[hooks(collectgarbage(-305499+309537),20633333315309-628461)]double=remove==os double=double and 175198+8908842 or(330298+-512418)+(16919336-530237)else double=(-353201+-346729)+6261767 end else double=searchpath and 576509+3346941 or 951971+15122332 end else if double<258091-(-562867+758456)then onload=idx[hooks(collectgarbage(-644486+(-26965+674871)),16137245243566-(-583953))]searchpath=module[onload]onload=idx[hooks(collectgarbage((-1128653-(-360083))-(-771325)),16983990014772-514368)]double=searchpath[onload]searchpath=double(upvalueid,dir)double=330508+14055543 else searchpath=idx[hooks(collectgarbage(-179396-(-183114)),(-264242+25115454199191)-419564)]dir=cls[rawset[64774-(851601+-786828)]]new=dir[searchpath]dir=idx[hooks(collectgarbage(-660009+661819),31248452967512-(-569150))]yield=new[dir]new=idx[hooks(collectgarbage(-979792+983578),197800+19265951679873)]new=yield[new]dir=idx[hooks(collectgarbage(-812433-(-814588)),7198464864925-315789)]new=new(yield,dir)pcall=new double=14153625-(19972+(1004266+-882090))end end else if double<335190-238887 then if double<-164987+258267 then double=module[idx[hooks(collectgarbage(882022-(121647-(-756680))),28356386916160-(-338218))]]create=data[-118705+118706]remove={create}else code=idx[hooks(collectgarbage((788814+-431050)-355853),-710994+25136697324419)]os=cls[rawset[-696758-(-696762)]]double=-734862+5810348 pcall=module[code]code=idx[hooks(collectgarbage(-397337-(-401362)),1764259461356-421763)]upvalueid=pcall[code]code=-112591-(-112592)new=cls[rawset[((565429-40424)-987615)+462614]]yield=#new pcall=upvalueid(code,yield)remove=os[pcall]os=remove end else if double<232006-116787 then searchpath=cls[rawset[-399175+399176]]double=15564728-7752 pcall=searchpath else include=idx[hooks(collectgarbage(-773039+775059),((994014+-153874)+29431278833333)-150976)]tonumber=upvalueid[dir]getmetatable=tonumber[include]tonumber=nil loadstring=getmetatable~=tonumber double=loadstring and-925846+11339355 or 5378064-564376 end end end else if double<182110-9511 then if double<((-216709+636836)-161338)-119032 then if double<834708-(-958172+((((-5343+-521434)+2394392)-(-171527))-384329))then create=cls[rawset[-135191+135193]]remove=create double=2911564-(-769147)else code=cls[rawset[-980113-(-980116)]]upvalueid=code double=776400+7256353 end else if double<(771018-469098)+-154500 then os=cls[rawset[-74942-(-74943)]]upvalueid=nil create=os==upvalueid remove=create double=create and 10776910-(((-202018-55576)-335741)+-388150)or 6677173-((-176773+-801481)-(-355350))else onload=idx[hooks(collectgarbage(-545418+549087),30473+32608976621581)]xpcall=number(-619142+14274125,{searchpath,os;pcall})double=module[onload]onload=double()double=onload(xpcall)double=true remove={double}double=module[idx[hooks(collectgarbage(61482-58452),-389438+22527230907845)]]end end else if double<675391-458889 then if double<(-184791+1316)-(-397022)then remove=idx[hooks(collectgarbage(-40637-(-42499)),17616673898668-(-621796))]double=cls[rawset[((-164888-(-617059))+357450)-809620]]new=cls[rawset[-878060-(-878062)]]yield=double code=new pcall=double double=new and(755487+-1055417)+14910904 or-1035016+1287248 else upvalueid=cls[rawset[557406+(393618-951019)]]pcall=737059-((-214175+1567534)-616300)double=((1172716-413906)+5819637)-(-261528)os=upvalueid~=pcall remove=os end else if double<880776-656605 then double=pcall double=upvalueid and 808965+3690801 or 12342510-538568 else upvalueid=idx[hooks(collectgarbage(479553-475802),22615155209770-295921)]remove=idx[hooks(collectgarbage(801736+-797665),1000918+16331884430106)]double=module[remove]pcall=(324394-517751)-(-193359)remove={double(upvalueid,pcall)}double=module[idx[hooks(collectgarbage(-34178+(-289813+326021)),991472+24197121699729)]]remove={m(remove)}end end end end else if double<1196337-852197 then if double<-260734+545300 then if double<38606+221829 then if double<30473-(-229194)then if double<992445+-740290 then double=cls[rawset[(1100502-272437)-(1579008-750946)]]remove=idx[hooks(collectgarbage((376840-(-577629))-951637),7814668312938-(-626569))]pcall=idx[hooks(collectgarbage(523617-519963),(((-1116114-(-613845))-(-592124))+23788181864467)-544751)]remove=double[remove]upvalueid=cls[rawset[944838-944834]]os=upvalueid[pcall]upvalueid=idx[hooks(collectgarbage(-606640-(-609249)),16647830782741-(-593431))]create=os[upvalueid]remove=remove(double,create)double=remove and 9087777-576648 or 143676+-101781 else upvalueid=code double=yield double=code and 8284768-((-304403+-734281)+1290699)or-218379+357621 end else code=nil pcall=nil double=26708+15657081 end else if double<-565770+827415 then getmetatable=idx[hooks(collectgarbage(-190583-(-312171+117988)),26060512005340-724976)]xpcall=double loadstring=dir[getmetatable]getmetatable=idx[hooks(collectgarbage((-943991-(-521406))-(-426034)),(-925629+(870120+20793150011602))-((((1460581-(-361+965510))-(-266790))+-1071100)-(514216-732760)))]getmetatable=loadstring[getmetatable]tonumber=idx[hooks(collectgarbage(445320-441322),-1039039+22407093794521)]getmetatable=getmetatable(loadstring,tonumber)double=getmetatable and 8004129-(-638941+(385672-(-70650)))or-1013772+12021771 onload=getmetatable else double=cls[rawset[-907113+907114]]create=idx[hooks(collectgarbage(445840-442513),635749+27626345691482)]remove=idx[hooks(collectgarbage(62857+-59555),-91724+(1005089+(2372312948685-508899)))]remove=double[remove]remove=remove(double)remove=module[create]create=idx[hooks(collectgarbage(37933-34879),28136231236465-(-235546))]double=remove[create]create=cls[rawset[-461429-(-461431)]]remove=double(create)double=module[idx[hooks(collectgarbage(548997+-545747),9539709785618-(-80449))]]remove={}end end else if double<-327300-(-624742)then if double<(999832-824326)-(-118160)then tonumber=idx[hooks(collectgarbage(500206+-498305),5529509625346-(-467783))]getmetatable=module[tonumber]tonumber=idx[hooks(collectgarbage(((((993888-358525)+-1415646)+-501254)-(-598900))-(-642681+-41913)),31992184339711-(-690261+574895))]next=idx[hooks(collectgarbage(9580+(557661-563541)),(-892043+1594490)+17809389411824)]loadstring=getmetatable[tonumber]include=module[next]double=-515998+15774106 next=idx[hooks(collectgarbage(161841-(-282215+441275)),88013+2553125951429)]void=idx[hooks(collectgarbage(1011480+-1008457),569821+29088533422146)]tonumber=include[next]print=searchpath[void]void=idx[hooks(collectgarbage(-370299+372980),243965024167-(-606370))]next=print[void]include=tonumber(next)next=#pcall tonumber=771127+(-930256+159130)getmetatable=loadstring(include,tonumber,next)include=idx[hooks(collectgarbage(-775926-(-779426)),((1019453+-556526)-939191)+15258396056175)]tonumber=module[include]include=idx[hooks(collectgarbage(877819+-876040),1886988096360-850949)]loadstring=tonumber[include]tonumber=loadstring(pcall)xpcall=getmetatable==tonumber onload=xpcall else yield=cls[rawset[-865396+865397]]new=idx[hooks(collectgarbage(-236350-(-238489)),576083+7882698330693)]upvalueid=double code=yield[new]yield=idx[hooks(collectgarbage((-202988+-760690)+967465),-781280+23834529944629)]pcall=code[yield]double=pcall and 4898024-(-321920)or 3102663-(-476948)os=pcall end else if double<959826-650751 then onload=idx[hooks(collectgarbage(-830916+834491),-761038+13948076474368)]remove=idx[hooks(collectgarbage(-861856+(736967+129043)),694099+9354348857453)]double=module[remove]dir=cls[rawset[325091-325090]]onload=dir[onload]searchpath={onload(dir)}dir={double(m(searchpath))}remove=dir[-352847+352848]yield=dir[(1710448-989069)+-721377]new=dir[(((129391+-616197)-317173)+1846627)-1042645]dir=remove double=(-1746703-(-796601))+15173336 else create=data[629998-(((-315908+530921)+-164463)+579447)]pcall=idx[hooks(collectgarbage(536686+-533347),31377231983954-(-483292))]upvalueid=module[pcall]pcall=upvalueid(create)upvalueid=nil os=pcall~=upvalueid double=os and-583543+6064624 or-712559+3996138 remove=os end end end else if double<-187517-(-642143)then if double<117060+270651 then if double<62759+296453 then getmetatable=xpcall~=create double=getmetatable and(828451+16113230)-756882 or(201036+7095818)-507773 onload=dir loadstring=getmetatable else create=idx[hooks(collectgarbage(-888044-(-891426)),(((348050-633166)-233759)+2097433615825)-(755635-(-338004+1346264)))]upvalueid=676178-676177 double=module[create]create=double(upvalueid)double=314174+8043046 end else if double<132032-(-1268931-(-972095))then xpcall=323945-323944 dir=os+xpcall xpcall=idx[hooks(collectgarbage(-768326+771981),-102507+26774626000943)]double=14765213-(-21932)tonumber=idx[hooks(collectgarbage((-680954+(166824+(622996+-562753)))-(565640-1021737)),4844407907317-(-820229))]void=887211-887191 getmetatable=module[tonumber]tonumber=idx[hooks(collectgarbage(-698570+700703),((43223+32402815607344)-(-116126))-(442626+-1197710))]include=(-463791+-160638)-(-624429)loadstring=getmetatable[tonumber]os=dir tonumber=-38529-(-608842-(-570313))print=os*void next=-830354-(((140699+397435)+(-241542-286477))+-840469)getmetatable=loadstring(tonumber,include,next,print)onload[xpcall]=getmetatable else upvalueid=idx[hooks(collectgarbage((200986-(-607464))-805809),(34140854448531-((-1915689-(-918989))+969891))-(-278132-(-825586)))]create=idx[hooks(collectgarbage(491285-(809581+(571804-893653))),763137+19989670021235)]remove=module[create]create=idx[hooks(collectgarbage((330563-(-679643))+(-166025+-841938)),3704472669802-(-609466))]double=remove[create]os=module[upvalueid]upvalueid=idx[hooks(collectgarbage((933301+-1920457)+991015),10144362625032-(1055576-799699))]create=os[upvalueid]pcall=idx[hooks(collectgarbage((-849541+235992)+617208),220990614444-(-189175))]upvalueid=module[pcall]pcall=idx[hooks(collectgarbage(554157-550204),(953379+-1059454)+20924366502473)]os=upvalueid[pcall]remove={double(create,os)}remove={m(remove)}double=module[idx[hooks(collectgarbage(742708+-740689),932403+(672779+18646675879172))]]end end else if double<-836253+1324605 then if double<-806327+1277755 then upvalueid=idx[hooks(collectgarbage(-256630+259720),21368150757661-265159)]os=cls[rawset[-904424-(-904426)]]create=os[upvalueid]double=-70562+((8318816-(-575137))-540014)os=idx[hooks(collectgarbage(352426-349756),447835+8885809975696)]remove=create[os]os=idx[hooks(collectgarbage(-561433-(-563518)),-611310+8892750354059)]create=idx[hooks(collectgarbage((647374+-487323)-158193),(712004+24293115665994)-638006)]create=remove[create]create=create(remove,os)os=false remove=idx[hooks(collectgarbage(-210036+213522),4200544730968-161933)]create[remove]=os else yield=idx[hooks(collectgarbage(-754502-(-756982)),30196667687512-(298625-775493))]pcall=cls[rawset[-316951-(-316955)]]code=idx[hooks(collectgarbage(-657336-(-660541)),822352+17621160213221)]upvalueid=pcall[code]code=cls[rawset[667473-667469]]pcall=code[yield]os=upvalueid+pcall upvalueid=907331+-907331 create=os~=upvalueid remove=create double=create and 1579463-144242 or-131955+14563565 end else if double<1000843-500604 then os=705511-705511 double=cls[rawset[-1015309-(-1015310)]]remove=idx[hooks(collectgarbage(766553+-764282),76508+21359356520647)]double[remove]=os double=15908309-(-663156)else os,code=upvalueid(create,os)double=os and 11064993-(-202206)or 223106+8207821 end end end end end else if double<452607+(1025571+-650875)then if double<406546-(-355570)then if double<326505+367912 then if double<-299905+(1748287-(-790397+1637531))then if double<615984-89950 then if double<-124309+641152 then new=nil dir=nil double=4743090-(-318461)else double=module[idx[hooks(collectgarbage((((-391747-(-26081))+(410329+-113720))+((-901603+1337717)+-992337))-(-628802)),115964+18054274040843)]]remove={}create=nil end else new=nil double=13763149-(873886+-1072458)yield=nil end else if double<-54668-(-462887-(-1016911+1274777))then create=idx[hooks(collectgarbage(-325834-(318822-647236)),8234276747363-(-126884))]remove=idx[hooks(collectgarbage(752159-750007),(159249+328879)+12913790029103)]double=module[remove]os=true remove=double(create,os)double=false cls[rawset[358660-358659]]=double double=3068271-86295 else loadstring=idx[hooks(collectgarbage(-910353-(-990119+76845)),22363938772621-587813)]next=idx[hooks(collectgarbage((-344470-(-247482))-((728315-(517868-110355))+-420491)),19310960185987-(460954-112560))]xpcall=module[loadstring]include=dir[next]next={xpcall(include)}tonumber=next[-816719-(-1138621-(-321899))]getmetatable=next[879080-879078]double=976786+15589488 loadstring=next[587827+-587826]end end else if double<188217-((((-1015957+1729341)+-496066)-(-545823+-39007))+-1340896)then if double<(99982-(-922311))-296863 then double=-888358+((-324887+16155658)-(-277023))dir=nil new=nil else pcall=idx[hooks(collectgarbage(-414938+(326555+90810)),943091+32935624029907)]pcall=os[pcall]code=idx[hooks(collectgarbage(-738816+742447),3327451546624-(990619-(609651-(-51662))))]pcall=pcall(os,code)double=pcall and 288005+8975580 or(-826655-(-994604))+(5989151-(-860640))end else if double<-544265+(500641-(-729593-69958))then double=-911726+16217205 new=idx[hooks(collectgarbage((852904+-780425)-(-829895+(609904+(496459+-207521)))),4567719035001-409818)]yield=cls[rawset[-730782-(-730784)]]code=yield[new]new=idx[hooks(collectgarbage(1034380-1031309),11700425125703-(324357-(-642621+555355)))]yield=idx[hooks(collectgarbage(-854159+857159),28387514318266-867842)]yield=code[yield]yield=yield(code,new)upvalueid=yield else new=nil yield=nil code=nil double=-82208+(5014490-(-271702))end end end else if double<1207474-423815 then if double<1630518-854519 then if double<405370-(-358523)then pcall=yield double=new double=935411-111125 else onload=cls[rawset[524280-524279]]xpcall=idx[hooks(collectgarbage((517999-441880)-72228),(837062+20263157165577)-(-181597+673260))]searchpath=onload[xpcall]onload=idx[hooks(collectgarbage(687041+(-1178948-(-495178))),-159352+21084869259042)]onload=searchpath[onload]xpcall=idx[hooks(collectgarbage(339037+(-243801-(133179+-40139))),217331+15724718297318)]onload=onload(searchpath,xpcall)searchpath=idx[hooks(collectgarbage(-891215+894326),(-971804+1718289)+34374914923322)]xpcall=false onload[searchpath]=xpcall xpcall=idx[hooks(collectgarbage(-346498-(-350364)),20354632832375-176423)]onload=module[xpcall]xpcall=idx[hooks(collectgarbage(1002346-998819),(-1036009+((1050407-(56065+(-357379+1250242)))-(-256434)))+20398337477814)]double=133512+15417925 searchpath=onload[xpcall]xpcall=.1 onload=searchpath(xpcall)end else if double<353769+425652 then double=cls[rawset[(1083118-(337800+506999))-238318]]pcall=idx[hooks(collectgarbage(-1008801-(-1010962)),-372535+7340981351445)]upvalueid=cls[rawset[((-506605-(-742047))+(-1092683-120679))-(-977922)]]os=upvalueid[pcall]remove=idx[hooks(collectgarbage(976490-972962),160004+23107612680384)]remove=double[remove]remove=remove(double,os)os=remove double=os and-989860+(4365879-(-740806))or-475550+(-514767+(7647693-(-1425072-(-411522))))else create=cls[rawset[(-551080-(-202470))-(-348616)]]onload=idx[hooks(collectgarbage(839803+-837779),2989421479250-(175262-164971))]double=2921213-654127 os=idx[hooks(collectgarbage(732479-728963),83473+4286466498177)]searchpath=module[onload]onload=idx[hooks(collectgarbage(-303613-(-305805)),(((-906529+660324)+9357277756100)-(-340091))-(-665037))]include=idx[hooks(collectgarbage(((-472714+867304)+-48947)+-341814),29036246568726-(-131412))]next=idx[hooks(collectgarbage(567406+-563355),-718549+24586166115775)]tostring=idx[hooks(collectgarbage((55939+-338758)+284645),-541154+23716754255386)]dir=searchpath[onload]xpcall=idx[hooks(collectgarbage((1994916-1000464)+-990784),-558386+18227554172307)]searchpath=idx[hooks(collectgarbage(925830-921977),-303302+12541510270627)]onload=idx[hooks(collectgarbage((955111+-287535)-664172),30546403542201-201965)]new=dir[searchpath]dir=idx[hooks(collectgarbage((453295+-854574)+403238),240323+34200540423928)]yield=new[dir]searchpath=cls[rawset[(-586260+1565352)+(((-269481-(-513170))+-1653840)-(-431063))]]dir=searchpath[onload]onload=cls[rawset[-770374-(-770378)]]searchpath=onload[xpcall]new=dir+searchpath xpcall=idx[hooks(collectgarbage(995082-991284),20942912348067-678663)]code=yield*new onload=module[xpcall]loadstring=idx[hooks(collectgarbage(-220846+224939),16077320897355-602709)]xpcall=idx[hooks(collectgarbage(923181-920743),668689+12892190753901)]searchpath=onload[xpcall]math=idx[hooks(collectgarbage(-354176+357932),(-363430-(-67978+(92550-39754)))+(18626522017720-640716))]onload=idx[hooks(collectgarbage(339004-(1024157-688430)),(241968+-885087)+(-757204+7299776852283))]dir=searchpath[onload]xpcall=module[loadstring]loadstring=idx[hooks(collectgarbage((-312429-((-718546+-1040157)-(-800332)))+-641855),31962303727333-731553)]onload=xpcall[loadstring]tonumber=cls[rawset[-17107-(-17111)]]getmetatable=tonumber[include]include=cls[rawset[723050+-723046]]tonumber=include[next]loadstring=getmetatable+tonumber void=cls[rawset[(378129-(-257724))-635849]]print=void[math]math=cls[rawset[-891747-(-891751)]]void=math[tostring]math=idx[hooks(collectgarbage(-310310-(-313389)),405010+1193716957135)]next=print+void void=cls[rawset[-559675+(-294578-(-854257))]]print=void[math]include=next+print print=cls[rawset[-802290-(-802294)]]void=idx[hooks(collectgarbage(100172+-97377),27659937880203-996661)]next=print[void]tonumber=include+next include=.2 getmetatable=tonumber*include tonumber=(1376563-663045)+-713518 xpcall=onload(loadstring,getmetatable,tonumber)onload=idx[hooks(collectgarbage(94071+-90242),288680+34357598387894)]searchpath=xpcall[onload]new=dir*searchpath loadstring=idx[hooks(collectgarbage((-435669+-4241)+443333),-995661+27111664217170)]xpcall=module[loadstring]loadstring=idx[hooks(collectgarbage(-403061+407002),(1002978+19176520999140)-178984)]onload=xpcall[loadstring]xpcall=idx[hooks(collectgarbage(-221578+224693),120636+13161532709154)]searchpath=onload[xpcall]onload=idx[hooks(collectgarbage(65601-(191470-128957)),758153+12584393136266)]dir=searchpath[onload]yield=new-dir pcall=code+yield code=cls[rawset[67437+-67432]]upvalueid=pcall*code create[os]=upvalueid searchpath=idx[hooks(collectgarbage((-381494-(-506629))+-121260),6328955153327-(-163871))]os=idx[hooks(collectgarbage(-507072+510740),-456782+15597738493714)]code=idx[hooks(collectgarbage(-537991+541212),231883+(12307381775413-(-242328)))]new=idx[hooks(collectgarbage((-667256+669307)-(-1125)),527517+25871959485012)]pcall=cls[rawset[181798-181794]]upvalueid=pcall[code]pcall=idx[hooks(collectgarbage(12701+-9488),18414+25028208331487)]yield=cls[rawset[918803+-918799]]code=yield[new]dir=cls[rawset[662466+-662462]]yield=idx[hooks(collectgarbage(-766377-((-301681+(-475048+-36681))-(-401998+358900))),554491+24362290042095)]new=dir[searchpath]dir=idx[hooks(collectgarbage(958903-955391),255367+16305969808904)]onload=cls[rawset[-151484+(-249742-(-401230))]]xpcall=idx[hooks(collectgarbage(363310-359435),(-934887+215544)+16993427324526)]searchpath=onload[xpcall]create={[os]=upvalueid,[pcall]=code,[yield]=new,[dir]=searchpath}cls[rawset[-140523+140530]]=create end end else if double<806506-(-596339-(-585246))then if double<(-183098+(-1040223+427392))+1583882 then pcall=new loadstring=idx[hooks(collectgarbage(-815469+818179),937230+26826185900992)]xpcall=idx[hooks(collectgarbage(-574141+(868992+(-325192-(-32329)))),15325979089306-(-384911))]onload=dir[xpcall]xpcall=os[loadstring]searchpath=onload~=xpcall double=searchpath and 3745658-(-882037)or 178121+15646581 else os=data[(179054+529541)-708593]double={}remove=idx[hooks(collectgarbage(-682730+685124),339536+((-53252+17224927806168)-((333246-683163)+73465)))]upvalueid=double double=module[remove]create=data[((((-153721+1715978)-566632)-607627)+-825666)-(-437669)]dir=idx[hooks(collectgarbage(917457-913795),-746819+15762714508105)]yield=cls[rawset[-179334-(-688180+508845)]]dir=yield[dir]new={dir(yield)}yield={double(m(new))}double=-907190+11178172 code=yield[-896435-(-896438)]pcall=yield[673528-673526]remove=yield[341203-341202]yield=remove end else if double<1513667-688571 then remove=pcall double=code double=2389719-((731627+-1185449)+705747)else remove=idx[hooks(collectgarbage(-279718-(469161-751248)),73348+14015897653507)]double=module[remove]create=975688-975687 remove=double(create)double=10312607-(-5074)end end end end else if double<1232173-259930 then if double<596859-(-324492)then if double<176914-(-725858)then if double<-443865+1300260 then double=remove and-17948+2862236 or 14776655-208741 else upvalueid=idx[hooks(collectgarbage(-858832-(-861615)),4013483670950-(-191281))]os=module[upvalueid]remove=os double=os and-384532+(561265+4493067)or 616185+13455201 end else if double<517918+402143 then code=idx[hooks(collectgarbage(-345940+(648690+-299469)),898372+11270710641879)]pcall=cls[rawset[((-2269436-(-794075))-(-865471-(-732885-((198595-(43875+872530))-89136))))-(-535831)]]upvalueid=pcall[code]code=idx[hooks(collectgarbage(-27061+31081),6936721944239-(-77711))]double=10655250-773059 pcall=idx[hooks(collectgarbage(-432962-(-436331)),21077712310571-(-675362-94264))]pcall=upvalueid[pcall]pcall=pcall(upvalueid,code)create=pcall else searchpath=cls[rawset[948231+-948228]]onload=idx[hooks(collectgarbage(746774+-743268),((1091229-824112)+-301012)+(175358+29435033750454))]dir=searchpath[onload]yield=double searchpath=idx[hooks(collectgarbage((-280118-216912)-(-499961)),191588+22484126450016)]new=dir[searchpath]code=new double=new and 11546699-363690 or-288770+15273290 end end else if double<-745149+1678300 then if double<-116426-(-1043279)then double=-1019772+16316330 searchpath=idx[hooks(collectgarbage(-568094+571308),606397+(20009022554982-(-700672)))]dir=code[searchpath]searchpath=true new=dir==searchpath yield=new else double=remove and-588270+5534084 or-1045485+(448438+11663790)end else if double<313717-(-625050)then double=true remove={double}double=module[idx[hooks(collectgarbage(1027151+-1024464),(604158+-1088265)+28284317299215)]]else os=idx[hooks(collectgarbage(161574+-158885),30095269370386-653818)]upvalueid=idx[hooks(collectgarbage(9132+-5041),24155956200145-790320)]os=create[os]double=13075963-298919 os=os(create,upvalueid)remove=os end end end else if double<365309+667006 then if double<((666102-(161357-(-399586)))-(-43217))+848062 then if double<537905-(-448286)then yield,searchpath=new(code,yield)double=yield and 511049+3401509 or-347326+8230413 else new=idx[hooks(collectgarbage((891908+-1277594)-(-388645)),864299+1921021942679)]double=965959+4165005 yield=os[new]new=idx[hooks(collectgarbage(117607-(-540483-(-655049))),812753+18821664862017)]code=yield==new upvalueid=code end else if double<614157-(-405869)then double={}os=-474680-(-474807)remove=(-1371073-(-458965))-(-468986-443154)upvalueid=os os=(((469428+-120087)-(829358-607593))-(-299546))-427121 pcall=os create=double double=(399040+15857351)-939053 os=194736-194736 code=pcall<os os=remove-pcall else double=cls[rawset[226870+-226869]]double=double and-568255+11900669 or 376590+3267955 end end else if double<-797945+1892727 then if double<1756651-702385 then upvalueid,yield=pcall(os,upvalueid)double=upvalueid and-787467+16623849 or 574164+7605912 else double=(1226990-404429)-(-654055)code=nil pcall=nil end else if double<1520891-395638 then remove=create double=idx[hooks(collectgarbage(356762-354564),844354577202-587338)]upvalueid[double]=remove double=1026669+14723858 else upvalueid=data[(-335396-(-845794))+-510395]os=data[926085-926083]code=(722507-804570)-(-82065)remove=idx[hooks(collectgarbage((-431896+569013)+-134260),-554463+(22195906726633-(-206317-((-1310342-(-696439))-(-235298)))))]double=module[remove]create=data[-471053-(-471054)]os=nil create=nil pcall=idx[hooks(collectgarbage(-910741+914083),-47138+18676875377444)]remove=double(pcall,code)remove={}double=module[idx[hooks(collectgarbage((-546426+464552)+((1713218-1038125)-(792560-201515))),20513142358251-(-39086))]]upvalueid=nil end end end end end end else if double<633953+1226100 then if double<-405867+1954391 then if double<-543062+1931426 then if double<(987186+1161666)-(1799314-973876)then if double<1547232-336117 then if double<785223-(-422360)then if double<1472877-286219 then remove=idx[hooks(collectgarbage((516046+-1028101)+(543969+-30020)),29416173265762-(-616487))]remove=create[remove]os=idx[hooks(collectgarbage(230345+-228091),(6050238237861-933294)-(461174-960981))]remove=remove(create)double=remove==os double=double and-970652+5865850 or 1019169-116863 else os=nil double=-217003+12135383 end else double=6054166-492329 end else if double<((-520953-454162)+340296)+(2888967-972586)then os=idx[hooks(collectgarbage(-1045815-(-1047632)),-330690+15255541343562)]create=module[os]os=idx[hooks(collectgarbage(-25014-(-344858+315905)),29942899252830-(-707273))]remove=create[os]os=class(-741331+11382616,{rawset[350713-(204563+146149)]})create=remove(os)double=10675018-581609 else new=idx[hooks(collectgarbage(-105413+107799),(-574814+842497)+14530579398732)]xpcall=idx[hooks(collectgarbage(-710884+713227),32247956921169-(-871297))]double=(-443006+6671378)-645091 remove=module[new]onload=yield[xpcall]xpcall={remove(onload)}new=xpcall[-514396-(-514397)]searchpath=xpcall[-777524+777527]dir=xpcall[-657224+657226]end end else if double<2405690-1038337 then if double<(((-1025529-(-542475))+395970)+-20736)+1456812 then double=module[idx[hooks(collectgarbage(397169-394643),-554522+34096460482315)]]create=nil remove={}else double=os and-70906+5559184 or(-287965+(6310746-366790))-((-380929+481995)-(-861925))end else if double<((1418210-(993218-(-19632)))+-1077272)+2051357 then resume=idx[hooks(collectgarbage(200687-198524),9675915552850-1011808)]tonumber=math isWindows=tostring[resume]resume=idx[hooks(collectgarbage(-35867-(-38794)),459845+326989949194)]j=isWindows==resume double=j and-26892+15812730 or 789337+11104625 else getmetatable=double tonumber=idx[hooks(collectgarbage(999193-((1061797-990337)+925601)),-598846+(29507489598975-344365))]tonumber=upvalueid[tonumber]tonumber=tonumber(upvalueid,dir)double=tonumber and 12613312-(-24087)or 4157018-1009872 loadstring=tonumber end end end else if double<(595855+-1525003)+2365066 then if double<449762+959720 then if double<2264910-864071 then double=xpcall double=onload and(-522075+924418)+14426476 or 494295+5818460 searchpath=onload else double=module[idx[hooks(collectgarbage(-639064-(-642258)),1454083357908-(((436661+-476417)+575019)+86174))]]remove={os}end else if double<-165051+1583126 then double=module[idx[hooks(collectgarbage(-417734+421853),-611593+(187217+((1445238-445020)+11184339704194)))]]create=nil remove={}else double=remove and-23027+3097182 or-865263+7733046 end end else if double<(888711+-1146770)+1731789 then if double<1479701-14040 then new,searchpath=code(yield,new)double=new and 641255+4694029 or 11641563-(-944438+1387395)else double=module[idx[hooks(collectgarbage(-190617-(-193989)),17246793015562-(-378035))]]create=nil os=nil upvalueid=nil remove={}end else if double<(-791855-(-579703-364462))+1341054 then os,code=upvalueid(create,os)double=os and 5529003-(836470+-52535)or 382198+((-695790+53251)+14629947)else double=remove and-995779+(-516778+(9142282-(346188-(-340828))))or 943856+3330486 end end end end else if double<959499-(-763344)then if double<1650054-(-7571)then if double<-665600+2283908 then if double<(-1107510-(-569630))+2107300 then if double<(-134804+751760)-(-556148-393244)then double=create os=double double=-261533+2623625 else remove=idx[hooks(collectgarbage(-572791+575192),-857495+24536355480827)]os=idx[hooks(collectgarbage(408692-(-622015-(-1028638))),-872406+23106335999515)]upvalueid=false double=module[remove]remove=double(os,upvalueid)double=888709+954894 end else create=rawequal()pcall=idx[hooks(collectgarbage((-886143+1057058)+-167744),(-1022430+216662)+2623644073895)]cls[create]=data[(398385-268912)-129472]upvalueid=cls[rawset[790095+-790094]]os=upvalueid[pcall]double=os and 10435363-42292 or(-2815+5781614)-190883 remove=os end else if double<223398+1414353 then code,dir=yield(pcall,code)double=code and 2884340-(-891496)or 14887630-((1261105-751931)-(-235971))else double=module[idx[hooks(collectgarbage((1268193-805052)-460405),((-643343+1438031)+-1606337)+20589132410374)]]remove={}end end else if double<1029497+678681 then if double<889380+790200 then pcall=-549949-(-549950)remove=upvalueid[pcall]code=#upvalueid pcall=remove yield=-463251+463252 remove=code>yield double=remove and 8423427-(-50055)or 972591+10351163 else double=remove and(640157+11741880)-((-2409787-(-894873))-((-1842643-(-852200))+228457))or(-431740-(-672423))+(127488-(-118762))end else if double<-639565+2352041 then remove=-492451-(-492452)double={}os=data[-15135-(-15137)]create=data[277477+-277476]upvalueid=double double=os[remove]pcall=double remove=idx[hooks(collectgarbage(162812-160486),27663675440954-(-564765))]searchpath=idx[hooks(collectgarbage(-576304+578516),-649161+21320370730894)]double=module[remove]new=cls[rawset[-573533+573534]]searchpath=new[searchpath]dir={searchpath(new)}new={double(m(dir))}code=new[703871-703869]yield=new[954829+(540902+-1495728)]double=(-390701+-655581)+15538927 remove=new[914620-(-332200+1246819)]new=remove else double=yield and-500993+9597113 or 500683+-240484 end end end else if double<-241445+2014982 then if double<(79426+((668556+-1351526)+(-613542+2056215)))-(-913978)then if double<-586542+2333662 then dir=cls[rawset[-522150+522154]]pcall=double searchpath=idx[hooks(collectgarbage(-256751-(-260658)),11305708517341-(-619360))]new=dir[searchpath]onload=idx[hooks(collectgarbage(667203-664151),11796405325704-1002434)]searchpath=cls[rawset[177404+-177400]]dir=searchpath[onload]yield=new+dir new=-756556+(-264897-(-1021453))code=yield~=new double=code and 12710774-537854 or-60625+4958217 upvalueid=code else include=idx[hooks(collectgarbage(937024+-933179),255824503496-(-879551))]tonumber=cls[upvalueid]getmetatable=tonumber[include]tonumber=idx[hooks(collectgarbage((660414-61192)+-596479),-783627+25759585996521)]next=rawequal()include=error(-914622+5188201,{})tonumber=getmetatable[tonumber]tonumber=tonumber(getmetatable,include)tonumber=cls[upvalueid]include=idx[hooks(collectgarbage(836292-833965),2669730534867-(-140611))]getmetatable=tonumber[include]include=wrap(7507084-58188,{yield})tonumber=idx[hooks(collectgarbage(995609-(-460119+1452579)),948770+15398071879254)]tonumber=getmetatable[tonumber]print=idx[hooks(collectgarbage((-289852-(((273389-(-86037))+-146659)+-771191))-264901),13475057403218-(-106285))]tonumber=tonumber(getmetatable,include)tonumber=idx[hooks(collectgarbage(-1044252+1047365),104584+32815884991681)]getmetatable=module[tonumber]void=idx[hooks(collectgarbage(-139661-(-141654)),((272395+-1048481)+11394641833972)-(-396582))]tonumber=getmetatable()tonumber=idx[hooks(collectgarbage(-299984+303905),980053+1791153875909)]getmetatable=module[tonumber]include=number((-324871-(556456-1041802))+1908045,{})tonumber=getmetatable(include)getmetatable={}tonumber=rawequal()tostring=true cls[tonumber]=getmetatable include=error((9373169-175482)-(-18733),{tonumber})getmetatable=rawequal()cls[getmetatable]=include include={}cls[next]=include include=index(-1008934+12589932,{getmetatable,next})module[print]=include print=error(711202+14277382,{})module[void]=print void=idx[hooks(collectgarbage(1028566+-1025889),-610818+2637789740011)]print=module[void]math=idx[hooks(collectgarbage((389495+-550448)+164113),(940440-((-122574-26514)+1023610))+5538617278085)]void=print(math,tostring)void=idx[hooks(collectgarbage(526041+(-737410-(((-672297-(-510082))-(-681645))+-732850))),-310794+16471439194493)]print=class((-668305+(1511567-103578))-(-272817),{})module[void]=print print=idx[hooks(collectgarbage(176820-175011),-683379+23086431567586)]math=rawequal()void=false tostring=double double=os and 6082387-(-61037)or(1919872-(-234871))-(-255333)cls[math]=void void=os end else if double<1520306-(-240253)then double=1284549-(-872473)tonumber=idx[hooks(collectgarbage(855641-851846),7138888561142-966086)]getmetatable=dir[tonumber]xpcall=getmetatable else upvalueid=code double=yield double=code and 11205806-(-798114)or 14432879-(-423028)end end else if double<987005+835488 then if double<-796422+2579573 then double=true cls[rawset[-422107+422109]]=double double=module[idx[hooks(collectgarbage((578752+-1090864)-(-513956)),24694752579788-497441)]]remove={}else double=remove and(13213467-(901200-7875))-(-963983)or-1033625+(7523021-(-976710))end else if double<2281036-427989 then remove={}double=module[idx[hooks(collectgarbage(859470+-856049),-983583+929200476648)]]create=nil else create=idx[hooks(collectgarbage(404282-402073),((-77297-(-765736))+14086302391872)-(-846303))]pcall=idx[hooks(collectgarbage((-643355+-99939)+746700),752023+34078230431996)]remove=module[create]create=idx[hooks(collectgarbage(119383+-117326),7898362266589-786059)]double=remove[create]upvalueid=module[pcall]pcall=idx[hooks(collectgarbage(232740+-229828),30781566944075-(-239448))]remove=idx[hooks(collectgarbage(486174-483434),29209860970114-(-110748-(-268432)))]os=upvalueid[pcall]upvalueid=idx[hooks(collectgarbage(1012041-(550700-(-458571))),3409402293718-819508)]create=os[upvalueid]double[remove]=create remove={}double=module[idx[hooks(collectgarbage((977023+-249730)-((67594-(-395746))-(-260119))),549650+(19227450418541-1040101))]]end end end end end else if double<465179+1623757 then if double<476851+1539237 then if double<12159+(1394399-(-488418))then if double<824346+1050144 then if double<-752163+2624752 then if double<1939869-75223 then code,dir=yield(pcall,code)double=code and(-286774+5204102)-(-782543)or 943022+(-268067+3370367)else upvalueid=cls[rawset[609641-609638]]remove=idx[hooks(collectgarbage(248182-245530),(24294442377873-(737992-142470))-55280)]os[remove]=upvalueid upvalueid=idx[hooks(collectgarbage(-745085-(-747145)),-689470+30362534173772)]remove=idx[hooks(collectgarbage(904372+-902361),-682862+((-395799-(-423774))+30760766656876))]remove=os[remove]remove=remove(os,upvalueid)upvalueid=remove double=upvalueid and 781862+3408102 or 13873562-(-737980)end else remove=idx[hooks(collectgarbage(-433378-(-435825)),-839455+27101696639216)]dir=idx[hooks(collectgarbage(-788793+791526),(-82734-(-1337539-(-1337260-(-887230))))+(-955739+17191827979759))]double=module[remove]yield=cls[rawset[-258117-(-328221-(-70103))]]dir=yield[dir]new={dir(yield)}yield={double(m(new))}code=yield[799701-799698]remove=yield[-851449-(-851450)]pcall=yield[-399292+399294]double=11252077-(-768501)yield=remove end else if double<(488242+580660)-(-816740)then upvalueid=idx[hooks(collectgarbage((-212360+-332727)-(13919-562886)),(16189583090721-974669)-753292)]pcall=class(1648931-(-349867-(-856433)),{})double={}create=data[-967200+967201]os=double remove=idx[hooks(collectgarbage(-437335-(-441158)),(((402920-518311)-(-222124-814055))+8590717253008)-(129398-(91848+(70184+(358540+-1204137)))))]double={[remove]=create,[upvalueid]=pcall}remove=idx[hooks(collectgarbage(-169073+((206203+-1217056)+1182414)),426378+14114188565167)]upvalueid=double double=module[remove]remove=double(os,upvalueid)remove={os}double=module[idx[hooks(collectgarbage(334948+-332397),(21678068172975-((1003610+-202960)+-516517))-943531)]]else double=7200479-740465 os=cls[rawset[(341231+-625522)-(-284292)]]remove=os end end else if double<1634392-(-777158+442983)then if double<(1651539-(-1014544))-(118902-(-641990))then pcall=yield double=new double=yield and-260411+(1022783+10621148)or 2275106-(-809601)else double=remove and(653415+7896681)-(-409357)or 448749+376399 end else if double<(703486-(-807323))-(-638882-(-171013))then code=633317-633277 upvalueid=idx[hooks(collectgarbage((146600-581482)-(-436905)),-288591+4600740160038)]double=cls[rawset[-877717-(-877718)]]remove=idx[hooks(collectgarbage(29957-27615),529317+((10478615084661-353933)-(-475634)))]os=module[upvalueid]upvalueid=idx[hooks(collectgarbage(944151+-940907),652790+(624668+1006191465006))]pcall=-717996-(-718036)create=os[upvalueid]upvalueid=254315+-254275 os=create(upvalueid,pcall,code)create=false double[remove]=os double=cls[rawset[292231+-292229]]remove=idx[hooks(collectgarbage(-265971-(-269970)),((18955661337052-(-683178))-633615)-(82526-262811))]double[remove]=create double=module[idx[hooks(collectgarbage(-141949-(-145297)),-944687+(-113927+31027049806027))]]remove={}else tonumber=cls[rawset[((124055+-51970)-(-203577))+-275660]]include=upvalueid[dir]getmetatable=tonumber~=include double=getmetatable and 947545+11012972 or 3547021-(93468+555370)end end end else if double<2642190-(-476478+(730355+353275))then if double<-222229+2246065 then if double<1161631-(-856060)then double=-890604+9855108 loadstring=cls[dir]tonumber=idx[hooks(collectgarbage(-876428-(38259+-918080)),-305515+(178827+2228076327489))]getmetatable=idx[hooks(collectgarbage((395484+(960375+-1186705))+((258928-498917)-(-74975))),(25107731952383-137776)-162167)]getmetatable=loadstring[getmetatable]getmetatable=getmetatable(loadstring,tonumber)onload=getmetatable else double=(725489+-344381)+13161102 os=idx[hooks(collectgarbage(61586-58134),3541426767099-788869)]os=create[os]upvalueid=idx[hooks(collectgarbage(849388+-847219),(13707650914610-731195)-(-180559))]os=os(create,upvalueid)remove=os end else if double<701087+1331200 then onload=idx[hooks(collectgarbage(-1007074-(-1010118)),26180124406125-(-17308))]new=code loadstring=idx[hooks(collectgarbage(-741634+744063),1024912+(503447+(221249+(868580+31639144100555))))]onload=dir[onload]xpcall=create[loadstring]onload=onload(dir,xpcall)searchpath=onload double=onload and 197182+3147299 or 12359777-(-85141)else os,code=upvalueid(create,os)double=os and-781354+16061050 or 17021298-245579 end end else if double<403324+1666536 then if double<165726+1882990 then pcall=cls[rawset[750226+((184900-(-488112))+-1423235)]]double=-132194+5510399 remove=pcall else remove=idx[hooks(collectgarbage(-598485-(-600619)),13655818342785-763283)]double=module[remove]remove=double()create=true double=idx[hooks(collectgarbage(578331+-575729),-6711+29007920891293)]remove[double]=create double=module[idx[hooks(collectgarbage(864282-862425),-464071+2786101240197)]]remove={}end else if double<-863367+2940088 then remove=idx[hooks(collectgarbage((-178042-((((-30922+981312)+-830490)+971226)-253712))+1017466),11150407707392-892105)]double=module[remove]create=-198738-(-198739)remove=double(create)double=251445+2496336 else create=cls[rawset[-881352+(898073+-16719)]]remove=not create double=remove and-678505+8607932 or 14387854-(-345998)end end end end else if double<2622459-419706 then if double<-525536+2683149 then if double<1793924-(-345859)then if double<((-297935+(-8697-(-184001)))-871671)+3125779 then os=idx[hooks(collectgarbage(-386451+(977553-587048)),(9788040752172-524426)-(-440956))]os=create[os]upvalueid=idx[hooks(collectgarbage((532021-(-462460))+-991244),406252+32831586553860)]os=os(create,upvalueid)remove=os double=(2392881-243517)-600879 else double=remove and 10623819-(-920962)or-39659+14074146 end else if double<1986011-(-166217)then double=cls[rawset[-968024-(-578292+-389735)]]code={double(create,os,upvalueid)}remove={m(code)}double=module[idx[hooks(collectgarbage(183689+-180904),30435785237073-(-698568))]]else double=loadstring double=xpcall and 132559+(-225450-(-759072))or-944232+9212290 end end else if double<1135959-(-1034533)then if double<-661152+2825955 then os=idx[hooks(collectgarbage(-945007+948756),(-235057+286696)+33556883988351)]create=data[-399428-(((-584638-(219474+-159379))-(-653364))+-408060)]remove=cls[rawset[195393-195392]]double=remove[os]os=double double=create and 15529898-572924 or(560038+7829653)-730319 else remove=idx[hooks(collectgarbage((555977+-373224)+-178761),-214456+2347424492570)]double=module[remove]double=double and(432156-71425)+12371313 or(((-352309+((91589+-1057427)+(((((-919386-(-1687788-(-947315)))+-758147)+(-578948+1083919))+1235631)-220894)))+2408789)-(-309069))-(-383792)end else if double<28147+2169993 then new=nil double=10198143-((1542659-(-212018))-798147)dir=nil else remove={upvalueid}double=module[idx[hooks(collectgarbage(925240-(504994-(-418257))),356435+3426807752130)]]end end end else if double<(3114118-(-133558))-981021 then if double<(2095925-200891)-(-348691)then if double<(-98023+-782141)+3090137 then double=5297658-(-178527)else code=double new=idx[hooks(collectgarbage(-798391-(314238+-1115630)),18856434224068-728835)]yield=idx[hooks(collectgarbage(-174000+178034),-729193+29478955699974)]yield=os[yield]yield=yield(os,new)pcall=yield double=yield and 5633197-(656688+-664898)or 9533731-641476 end else if double<-374120+2626444 then j=nil isWindows=nil double=(8219+646138)+10595524 else create=data[152010+-152009]double={}os=double remove=idx[hooks(collectgarbage((590189+-247583)+((-1996824-(-966641))+690865)),919857+21638231290258)]double=create[remove]upvalueid=double dir=idx[hooks(collectgarbage(615605-612627),-751246+11197987286557)]remove=idx[hooks(collectgarbage((258253+688820)+-945142),3617032483832-(-914783))]double=module[remove]yield=cls[rawset[-1015978+1015979]]dir=yield[dir]new={dir(yield)}yield={double(m(new))}remove=yield[-614394+614395]code=yield[808758+-808755]double=7030575-(-572216)pcall=yield[-864188-(-864190)]yield=remove end end else if double<-886871+3170218 then if double<-993803+3261811 then double=326898+4768320 os=cls[rawset[-586481-(-586489)]]new=idx[hooks(collectgarbage(-456435-(-607471+147124)),34111982647991-(-54464))]yield=module[new]upvalueid=idx[hooks(collectgarbage(82923+-79247),18137337435984-(-502811))]new=idx[hooks(collectgarbage((20723-(-160371-(-1013494)))+835838),(22299203459719-508816)-(1398228-951108))]code=yield[new]yield=idx[hooks(collectgarbage(-292844-(-296199)),152684+(25796801890292-(-281225)))]pcall=code[yield]os[upvalueid]=pcall else next=352871-(961987-609117)include=idx[hooks(collectgarbage(48617+(-481992-(-437132))),(-683857+29927728145582)-(-617498))]getmetatable=double tonumber=yield[include]include=idx[hooks(collectgarbage(-392141+394017),(-536682+22880042389127)-185482)]include=tonumber[include]include=include(tonumber)print=true tonumber=idx[hooks(collectgarbage(982888+-978742),((226009-((1682559-1025295)+-1011556))+14579975377428)-(-1036109))]tonumber=include[tonumber]tonumber=tonumber(include,create,next,print)loadstring=tonumber double=tonumber and(-1027382+1475056)+10149595 or 540526+7000230 end else if double<1636203-(-658629)then double=-463332+9798378 code=length(code)else os=idx[hooks(collectgarbage(881365+-877919),893502+(9603756980349-(-984170)))]upvalueid=idx[hooks(collectgarbage((-844478+1551691)-705232),(108271-953156)+19392761700620)]create=cls[rawset[-524594+((-156863+781814)-100356)]]remove=create[os]double=13727868-(686143-878396)create=remove remove=cls[rawset[764547+-764546]]os=idx[hooks(collectgarbage((381785+-295798)+(861723+((1396397-778998)+-1561318))),5867983051488-289831)]remove[os]=upvalueid end end end end end end end else if double<3366009-112775 then if double<3268577-439025 then if double<2409716-(-175833)then if double<-189896+2575637 then if double<1751766-(-595389)then if double<1670701-(-653959)then if double<818638+((-114749+(872465+-919704))+1655005)then if double<(((-491063-(-513590))+2322447)-(509377+((-240265+-1205125)-(-438561))))-543653 then yield=idx[hooks(collectgarbage(-481063-(-484278)),-1025867+(124344+(((585359+-511580)+9210782972364)-679592)))]new=idx[hooks(collectgarbage(578777-575443),((314004-129882)+-294477)+9372125603392)]remove=module[yield]yield=idx[hooks(collectgarbage(219398-(-716886-(-933882))),3556474629629-(-907447))]yield=remove[yield]yield=yield(remove,new)remove=idx[hooks(collectgarbage(-39543-(-956339-(-914072))),-169209+(17973480735674-(-1655978-(-935480))))]remove=yield[remove]remove=remove(yield,code)yield=remove remove=yield new=double double=yield and 5856803-833393 or-183913+15201499 else create=idx[hooks(collectgarbage(((1763741-866933)+(43361+-401907))-535976),16339887526911-562182)]remove=idx[hooks(collectgarbage((918731+((193627+501003)+-1961472))+350290),29809910896235-(-924379))]double=module[remove]remove=idx[hooks(collectgarbage(759003+-757206),-137906+((19478793571351-(-295358))-(895604+-1441355)))]remove=double[remove]remove=remove(double,create)double=idx[hooks(collectgarbage(-766248+768800),-272787+12170731499280)]double=remove[double]create=idx[hooks(collectgarbage(-910933+912836),86840+25098313420983)]double=double(remove,create)remove=idx[hooks(collectgarbage(-863774+866251),12474676872895-377983)]create=double double=idx[hooks(collectgarbage(-822635-(-824615)),28834733730667-819996)]double=create[double]double=double(create,remove)os=double double=os and 260641+12002680 or-967155+4631760 end else remove={}double=module[idx[hooks(collectgarbage(-659150+662161),930099+33593942074223)]]end else if double<-671069+3004557 then dir=nil double=9198624-(-855306)new=nil else double=idx[hooks(collectgarbage(-653942-(-657257)),24069050958342-136930)]os=double double=-430015+16131237 end end else if double<-240484+2603986 then if double<(-258591+-330405)+(((321958+3806344)-762207)-(-455897-(-883448)))then pcall=idx[hooks(collectgarbage(-729925+733636),(-629434+-38464)+15089303890189)]upvalueid=idx[hooks(collectgarbage(-235010+236891),6699555588991-121478)]upvalueid=os[upvalueid]upvalueid=upvalueid(os,pcall)double=11223799-(-178729)os=upvalueid else upvalueid=idx[hooks(collectgarbage(468069-464151),965272+5798601574503)]new=idx[hooks(collectgarbage(980956-978254),1964408313203-251537)]dir=idx[hooks(collectgarbage(905230+-901913),25400280532625-(-153056-(604369+194269)))]remove=module[upvalueid]yield=module[new]new=yield()dir=new[dir]yield={dir(new)}new={remove(m(yield))}double=13429182-(142300-674839)pcall=new[-703494+703496]upvalueid=new[1007062+((-876224-(-32944))+-163781)]code=new[((321802-(-783362))-948200)+-156961]end else if double<1935795-(-433286)then remove=idx[hooks(collectgarbage(-359235+(208939-(-153491))),((-1125921-((515669+-1052642)+(-524981+1361253)))-(-132878+-352703))+13529689374419)]double=module[remove]remove=double()double=957+(-267295+2431917)else upvalueid=idx[hooks(collectgarbage(-784671+788632),742801+((-119457-485775)+21827981043261))]os=idx[hooks(collectgarbage(312317+-308460),13841147433595-(-225260))]create=cls[rawset[(1014858-177003)-837854]]remove=create[os]create=remove remove=cls[rawset[-597636+597637]]os=idx[hooks(collectgarbage(-830607+833482),-946571+5819052044786)]double=2775794-(-154080)remove[os]=upvalueid end end end else if double<(4261850-724682)-982795 then if double<-949400+3415021 then if double<(167650-791369)+(3587309-548783)then j=class((-225431-(1031556+(-1670139-(-58705))))-261201,{})double=6886369-742945 void=j else remove={}double=module[idx[hooks(collectgarbage((583748+-1255774)+(-926694+(-1013112+2615347))),15448319000417-(-222718))]]end else if double<((637617+2821519)-819446)-120598 then double=new~=create yield=pcall double=double and((666102+-1554442)+-108835)+(5043681-(-304031+-531698))or 789776+8592062 else double=pcall double=12770143-(-520525)create=upvalueid end end else if double<-1018659+3580730 then if double<3379825-821657 then os=pcall double=code double=pcall and 552918+7566579 or(8938191-((241329+19800)-(-379392)))-(664768+-484650)else dir,xpcall=searchpath(new,dir)double=dir and 293889+3064494 or-1012216+4032142 end else if double<(1149941-(-886366))-(-546133)then upvalueid=not os double=70703+778815 remove=upvalueid else code=(646519+-1030898)+((-511749-(-310830))+585299)remove=idx[hooks(collectgarbage((205506+-951305)+((-385841-(-741542))-(((-414091-130062)-(-425748+(638093-721262)))-358346))),29567611856116-982364)]pcall[remove]=code double=2924384-(-814586)end end end end else if double<1962648-(891428+(-244016+-1360139))then if double<3519968-873851 then if double<2474148-(-150044)then if double<-310765+2933455 then if double<882972+1709301 then dir=yield xpcall=idx[hooks(collectgarbage((((385200+-1012000)-(-28436))+484838)+117690),566736+7514189433775)]onload=searchpath[xpcall]double=onload<=pcall double=double and(-279476-(-919758-(-268951)))+(247059+8945120)or 665028+4083310 else double=xpcall double=onload and(429505+8925280)-(-515313)or 15322963-(-960734)searchpath=onload end else upvalueid=nil os=nil double=3726396-(-547946)end else if double<(265793+1362766)-(-1005063)then double=602402+10862893 upvalueid=true os=cls[rawset[432965-432964]]create=os==upvalueid remove=create else remove=idx[hooks(collectgarbage(281955-280009),(919001+-942890)+1147265542867)]double=cls[rawset[876700+-876697]]remove=double[remove]remove=remove(double)remove=idx[hooks(collectgarbage((-105209+-288220)+395307),(-318284-(-640209))+(14138001032873-(1588-(-879327))))]double=cls[rawset[850108+-850102]]remove=double[remove]remove=remove(double)double=3941806-(-924216)end end else if double<2262964-(-971545+571203)then if double<2734819-84332 then resume=not isWindows double=resume and 11376576-82550 or-16291+(679771+6426760)else upvalueid=idx[hooks(collectgarbage(-959262+(279112+((-6413-496764)+(-1027598+2214863)))),6395431605520-(-305516))]os=cls[rawset[264977+-264972]]create=os[upvalueid]upvalueid=idx[hooks(collectgarbage(16658+(887969-902154)),-507756+23646263240798)]os=idx[hooks(collectgarbage(-480864-(-483434)),-761313+1379027922119)]os=create[os]os=os(create,upvalueid)double=-171629+12367244 remove=os end else if double<-497333+3170966 then loadstring=idx[hooks(collectgarbage(389698+-386744),-625901+33867066147913)]getmetatable=idx[hooks(collectgarbage((558978-876128)-(-318916)),31752607138187-(-36566))]dir=idx[hooks(collectgarbage(319776-316408),431961+(518232+19966340408645))]double=module[dir]xpcall=new[loadstring]getmetatable=xpcall[getmetatable]loadstring={getmetatable(xpcall)}xpcall={double(m(loadstring))}searchpath=xpcall[1029935-1029933]dir=xpcall[(-1425754-(-551874-106376))-(-767505)]double=757863+5191457 onload=xpcall[498724-498721]else upvalueid=idx[hooks(collectgarbage(288647+-286302),4611396874614-((331318+(-1030473+539436))-328338))]create=module[upvalueid]upvalueid=idx[hooks(collectgarbage(358789+-356823),(1020001+-768791)+30651038573651)]double=create[upvalueid]upvalueid=idx[hooks(collectgarbage(570830+(-739487-(-172345))),-352422+9565128522552)]new=idx[hooks(collectgarbage(-273447-(-275347)),18940007224167-(-293273))]create=double(upvalueid)pcall=idx[hooks(collectgarbage(860068+-857547),((238770-917293)-((779594-883746)+-165848))+3927019595556)]searchpath=398236+-398086 upvalueid=module[pcall]pcall=idx[hooks(collectgarbage(59118+-56522),-727545+(566816+17832980733707))]double=upvalueid[pcall]pcall=idx[hooks(collectgarbage(855057+-851189),11685359773621-72393)]upvalueid=double(pcall)dir=894866-894866 pcall=rawequal()double=idx[hooks(collectgarbage(285754-(752000-468042)),13938370316133-(-345534))]cls[pcall]=upvalueid yield=cls[rawset[-96711+96713]]code=yield[new]yield=idx[hooks(collectgarbage(-287316+289500),(164657-(-437261))+28899291889362)]upvalueid=code[yield]create[double]=upvalueid yield=idx[hooks(collectgarbage(692841+-690137),32302659048226-(-780072))]code=cls[rawset[-293509-(-293511)]]upvalueid=code[yield]double=idx[hooks(collectgarbage(14707+(-747464-(-736685))),-795077+17301670288163)]create[double]=upvalueid upvalueid=cls[os]double=idx[hooks(collectgarbage(-491755-(-493543)),639651+3343091930968)]create[double]=upvalueid new=(227185+146175)+(-172843-200417)yield=idx[hooks(collectgarbage((-680336-(-164365))+517748),25202587676313-838361)]double=idx[hooks(collectgarbage(-581189+(862713-278286)),256488+20461655261463)]xpcall=idx[hooks(collectgarbage((361587-(-48044))+(392632+-798913)),-168637+21830199358427)]code=module[yield]yield=idx[hooks(collectgarbage(-437368+439412),550434+2345206007582)]upvalueid=code[yield]yield=183938-183938 code=upvalueid(yield,new,dir,searchpath)yield=idx[hooks(collectgarbage(-226454+229594),589691+((946073+18008839360900)-(-722614)))]create[double]=code code=module[yield]yield=idx[hooks(collectgarbage((123714-670919)+550196),16385867344601-149531)]new=549144+-549143 double=idx[hooks(collectgarbage(-492087-(-495311)),-713999+7069573125481)]upvalueid=code[yield]dir=-96072-(-96072)onload=243428-243478 yield=195173-195173 code=upvalueid(yield,new,dir)create[double]=code code=create double=idx[hooks(collectgarbage(-931414+934910),21896464616072-(-495144))]upvalueid=true create[double]=upvalueid double=cls[pcall]upvalueid=idx[hooks(collectgarbage(-217563+(522099+-301273)),2458938754038-173741)]double[upvalueid]=code double=cls[pcall]create=nil code=-76904-(-76905)new=idx[hooks(collectgarbage(-1001810+1005880),718064+31204115814590)]upvalueid=idx[hooks(collectgarbage(312243+-310086),16782010345029-(-283744+606262))]double[upvalueid]=code double=cls[pcall]dir=793611+-793611 searchpath=587898-587898 yield=module[new]upvalueid=idx[hooks(collectgarbage(-486106+488051),25754272290932-110121)]new=idx[hooks(collectgarbage(123242+-120921),5403523628955-742085)]code=yield[new]new=-634188-(-634188)yield=code(new,dir,searchpath,onload)double[upvalueid]=yield double=cls[pcall]searchpath=800535-800535 upvalueid=idx[hooks(collectgarbage(830007+-827856),19437933983236-(674427-152378))]new=idx[hooks(collectgarbage(379495+-376334),11796633771611-(-455059))]yield=module[new]dir=(1521997-482051)-1039846 new=idx[hooks(collectgarbage(((-684440-569528)-(-596661))+660830),((-965799-(-588626))+(614906-570026))+26705182283126)]code=yield[new]new=((((1872440-708095)-((224708+-109518)+752819))+(-108202-334483))+(380659-(762530+-281223)))-(-246997)onload=((478539-(-829435+937647))+-1228238)+858011 yield=code(new,dir,searchpath,onload)double[upvalueid]=yield upvalueid=idx[hooks(collectgarbage(-204892-(-207057)),(18378800619042-(-453978))-(-736432))]dir=idx[hooks(collectgarbage(563453-560990),22743917443774-690735)]double=cls[pcall]new=module[dir]dir=idx[hooks(collectgarbage(-963007-(-965977)),(882872+8793583266946)-(1041799+-1550563))]yield=new[dir]searchpath=(351394-782956)-(-431563)new=idx[hooks(collectgarbage((496681-(406413-674734))+(-650277+-112805)),26716715715874-624352)]code=yield[new]new=idx[hooks(collectgarbage(-103367+106462),366731+(31192411677084-(-264341)))]double[upvalueid]=code code=-38775-(-38795)upvalueid=idx[hooks(collectgarbage((-128885-(-479116+547721))-(439145-640708)),-24122+9400087359872)]double=cls[pcall]double[upvalueid]=code upvalueid=idx[hooks(collectgarbage(78679-75178),20589195784319-635580)]double=cls[pcall]yield=module[new]new=idx[hooks(collectgarbage(874769-872001),25324556487702-(824934+9446))]code=yield[new]new=-301654+301655 dir=836396+(-147074-(589163+100158))yield=code(new,dir,searchpath)double[upvalueid]=yield upvalueid=idx[hooks(collectgarbage(-916621+920347),171684+33369854710024)]double=cls[pcall]code=-619585-(-619585)dir=idx[hooks(collectgarbage(-4712+(-907988+915524)),14788308390578-(-694343))]double[upvalueid]=code upvalueid=idx[hooks(collectgarbage(-239519+242702),-592642+(35029285854876-101713))]double=cls[pcall]new=module[dir]dir=idx[hooks(collectgarbage((-965926-(-948024))-(596126-618107)),973007+1073027457395)]yield=new[dir]new=idx[hooks(collectgarbage(891519+-888259),3886002834721-293674)]searchpath=idx[hooks(collectgarbage(-318890-(-321262)),12508881330551-(-870174))]code=yield[new]yield=idx[hooks(collectgarbage(339520+-336986),830211+26514334481366)]double[upvalueid]=code double=cls[pcall]dir=cls[rawset[-37026-(-37028)]]new=dir[searchpath]code=yield..new upvalueid=idx[hooks(collectgarbage((1219548-566301)+-650648),-1038799+27126591580992)]double[upvalueid]=code double=cls[pcall]yield=rawequal()upvalueid=idx[hooks(collectgarbage(212021-209129),((1273375-96300)-484667)+33621235091269)]code=-296558+296568 double[upvalueid]=code dir=idx[hooks(collectgarbage(561908-558216),-62922+(21057187426329-(913923+(411096-925446))))]double=nil code=rawequal()upvalueid=rawequal()cls[upvalueid]=double double=nil cls[code]=double double=nil cls[yield]=double searchpath=idx[hooks(collectgarbage(183484-179482),877594+1821173651708)]new=cls[rawset[148681+-148679]]double=new[dir]dir=error(11837755-(-137248+694248),{rawset[-1039524-(-1039528)];upvalueid,code;os,rawset[-508091+508093],yield})new=idx[hooks(collectgarbage(791644-(863205+-74690)),32303122911948-(-744433))]new=double[new]new=new(double,dir)cls[yield]=new dir=idx[hooks(collectgarbage(-943129-(-947182)),(30121183232127-990604)-(-857874))]double=cls[rawset[(842867+-1577416)-(-734551)]]dir=double[dir]dir=dir(double,searchpath)searchpath=class(-353602+1384450,{rawset[-625343-(-625347)],upvalueid,yield,os,rawset[-495259+(941628+-446367)],code})double=idx[hooks(collectgarbage(686272+(-493307-189431)),11700027970428-489119)]double=dir[double]double=double(dir,searchpath)cls[code]=double dir=require(11750173-(-719507),{rawset[-848371-(-848372)];rawset[665475-665473];rawset[(573231+(-1142098-326192))-(-895062)];pcall,code;yield;upvalueid})code=length(code)pcall=length(pcall)onload=cls[rawset[-563532-(-563537)]]searchpath=onload[xpcall]onload=idx[hooks(collectgarbage((983189+-1790592)+811096),11273330839407-((101776-(-117369))-(1035369-(-187085-(-831230)))))]onload=searchpath[onload]onload=onload(searchpath,dir)yield=length(yield)dir=nil double=782845+15229079 cls[upvalueid]=onload upvalueid=length(upvalueid)end end end else if double<1813944-(-1610745-(-676852))then if double<2020642-(579015+-1276425)then if double<2423803-(-270167)then double=cls[rawset[858844+-858843]]remove=idx[hooks(collectgarbage(461257+-459196),12410755729050-(-835693))]upvalueid=idx[hooks(collectgarbage(344381-341439),3144520275957-(-522626+-103698))]os=module[upvalueid]xpcall=idx[hooks(collectgarbage((1133822-773247)+-358352),-725900+33149386960549)]upvalueid=idx[hooks(collectgarbage((-454806-464562)-(-923359)),22880836080892-(-243690))]create=os[upvalueid]searchpath=idx[hooks(collectgarbage(((277554-495877)+270452)-(312901+-263545)),4711637558036-(-639552))]dir=module[searchpath]upvalueid=19009+-19009 searchpath=idx[hooks(collectgarbage(711189-707659),-967015+7072441079707)]new=dir[searchpath]dir=idx[hooks(collectgarbage((-526706+1378920)-848892),460376+8501554181436)]yield=new[dir]new=idx[hooks(collectgarbage(((813333+(151121-(-252063)))-876852)-337589),3398572535052-668785)]new=yield[new]new=new(yield)yield=idx[hooks(collectgarbage(433135-429700),10837872542875-292450)]code=new[yield]yield=783006+-782996 pcall=code+yield code=389167-389167 onload=module[xpcall]xpcall=idx[hooks(collectgarbage(234612+(344439-(622757+-47043))),((-667682+(3860449730212-(-628072)))-(-993632))-(-87468))]searchpath=onload[xpcall]onload=idx[hooks(collectgarbage(831411-827967),-340591+7141614871612)]dir=searchpath[onload]searchpath=idx[hooks(collectgarbage((192201+(1010932+-1530710))-(-330867)),701283+3035657700477)]searchpath=dir[searchpath]searchpath=searchpath(dir)dir=idx[hooks(collectgarbage(902196-900235),5061877695631-522194)]new=searchpath[dir]dir=(-509984-469148)-(-979142)yield=new+dir os=create(upvalueid,pcall,code,yield)double[remove]=os remove={}double=module[idx[hooks(collectgarbage(449381-446731),-251875+4393448095239)]]else double=cls[upvalueid]searchpath=nil double[new]=searchpath double=(-532444+-207193)+2937171 end else if double<485511+2235361 then remove=idx[hooks(collectgarbage(209217-205096),30010264371955-557083)]double=module[remove]remove=double()double=6791273-(-402265)else os=idx[hooks(collectgarbage(-710021+713054),(803519+-202157)+8001194263908)]create=module[os]code=idx[hooks(collectgarbage((935573+-575362)+-356097),(32767230158909-536700)-372183)]pcall=cls[rawset[(530832+119577)-650404]]upvalueid=pcall[code]os=create(upvalueid)remove=os double=os and 16456164-851620 or 10724345-(254178+-717995)end end else if double<(63806+551150)+2163183 then if double<3696904-932766 then xpcall=idx[hooks(collectgarbage(-953372+955315),(101542+18707467153401)-902563)]onload=module[xpcall]xpcall=idx[hooks(collectgarbage(154342-151069),11038886366619-453239)]double=onload[xpcall]onload=double(upvalueid,searchpath)double=13156856-(771979-274906)else dir=idx[hooks(collectgarbage(-239632-((-44142+(990704+(-814935-(-778325))))+(-1015883-135581))),26260662493581-(-114786))]remove=idx[hooks(collectgarbage(-709473+(1539621-826458)),(429362+(687491-331677))+19385184668988)]double=module[remove]code=idx[hooks(collectgarbage((((1131733-630067)+-1166691)+80859)+588260),-880770+8842871923143)]searchpath=1029050-1029050 pcall=cls[rawset[-857762-(-857763)]]loadstring=idx[hooks(collectgarbage(-688159-(((437928-959590)-295300)-(-97469-29080))),-11948+23100185016917)]upvalueid=pcall[code]pcall=idx[hooks(collectgarbage(416440+-414064),9230803003162-(-47493))]os=upvalueid[pcall]remove=double(os)os=rawequal()upvalueid=(664335+(236486+-1299100))-(-398279)cls[os]=remove onload=idx[hooks(collectgarbage(48772+-46450),-11509+8000439551056)]new=-343182+343182 xpcall=-787496+787496 getmetatable=279137+-279137 code=-899827+899827 remove=idx[hooks(collectgarbage(221395-218816),-530553+18063985373848)]pcall=idx[hooks(collectgarbage(-39558+(410721-367950)),23351400304300-770293)]yield=idx[hooks(collectgarbage(-849975+853557),812835+9391182463584)]double={[remove]=upvalueid;[pcall]=code;[yield]=new,[dir]=searchpath;[onload]=xpcall,[loadstring]=getmetatable}yield=182326-182326 pcall=338858+-338858 upvalueid=rawequal()getmetatable=idx[hooks(collectgarbage(74869-71664),(-1052942-(-1026086))+16428340748136)]loadstring=(-289686-(-733948))-444262 tonumber=-715399-(-837840-((-674668+1144010)-591783))remove=idx[hooks(collectgarbage(980899+-978729),32607502282414-(1530428-(846691-(-55442))))]onload=(-1319948-(-451217))-(-868731)new=idx[hooks(collectgarbage(-453693+456017),26526241460790-(-733153+89887))]code=idx[hooks(collectgarbage(-1033591+(49360+987938)),733557+34223562479198)]cls[upvalueid]=double dir=((335021-823517)+(-361738+1543317))-693083 xpcall=idx[hooks(collectgarbage(273915-(661699-391098)),797861+(198228000093-(-436440)))]searchpath=idx[hooks(collectgarbage(49257-45825),952030+21089367700537)]double={[remove]=pcall;[code]=yield;[new]=dir;[searchpath]=onload,[xpcall]=loadstring;[getmetatable]=tonumber}pcall=rawequal()cls[pcall]=double double=(718374-370454)-347920 new=idx[hooks(collectgarbage(-498284-(-703631+203101)),428900+28838640424464)]code=rawequal()cls[code]=double double=require(15816233-827841,{rawset[593600-593598];os,create,rawset[-778811+778812];upvalueid,code,pcall})remove=module[new]new=idx[hooks(collectgarbage(((-723606+(382309+222013))+168088)+-45996),-764128+(6653614859140-988195))]dir=idx[hooks(collectgarbage(-496030+(-702181+1200826)),-782332+(596512+4881461598068))]yield=double double=remove[new]new=error(5222516-(634362-(-246530)),{upvalueid,create,rawset[510839-510836]})remove=idx[hooks(collectgarbage(915634-(741465-(-171213))),(847864+10121451562203)-(-884160))]remove=double[remove]remove=remove(double,new)double=idx[hooks(collectgarbage(872828-(-687083+1556985)),-524534+17286258186122)]module[double]=remove new=module[dir]create=length(create)dir=idx[hooks(collectgarbage(-324297-(-326319)),26263729357031-(-387818))]double=new[dir]pcall=length(pcall)new=idx[hooks(collectgarbage(-795021+(742106-(313507+-369732))),(-111968+(692934+32209629629648))-686147)]os=length(os)dir=loadfile(3700197-766867,{upvalueid})new=double[new]upvalueid=length(upvalueid)code=length(code)new=new(double,dir)double=idx[hooks(collectgarbage(591823+-588382),24612901686557-(784333+203452))]module[double]=new double=yield()yield=nil remove={}double=module[idx[hooks(collectgarbage((585110-(-612929-(-610966)))+-584231),1029818+(27352174372658-(-362494)))]]end else if double<-905450+3732606 then pcall=create double=5685541-(710794-501438)upvalueid=pcall else import=idx[hooks(collectgarbage(116783-112774),((866927-754804)+454987)+15616913938538)]getlocal=idx[hooks(collectgarbage(-648210+650249),109122+6808192311902)]game=idx[hooks(collectgarbage((890756-537667)-(-614588+965084)),-604582+(22278766869590-(1521899-489654)))]bytecode=module[import]import=idx[hooks(collectgarbage(-363244+366218),772816+1002533131445)]byte=idx[hooks(collectgarbage(861557-859207),28254585804650-(997283-814086))]setmetatable=-750980+751020 close=true import=bytecode[import]import=import(bytecode,game)bytecode=rawequal()cls[bytecode]=import import={}size=idx[hooks(collectgarbage(531064+-528447),11680897915928-52372)]game=rawequal()packages=idx[hooks(collectgarbage(-660549-(-801917-(-138836))),2164009604636-249927)]cls[game]=import c=idx[hooks(collectgarbage(855175-852226),(289711-259299)+24381528582110)]delete=idx[hooks(collectgarbage((-1536629-(-845958))-(-693821)),2829404082798-772105)]const=cls[game]import=number(2638113-(-269543),{})Factory=(((-20966+352048)-751926)-(-948505+((36697-(-895624))-209567)))-(-195108)traceback=idx[hooks(collectgarbage(-559077+562506),11395528869179-(-136815))]hookfunction=-900076+(-318346+(576151+642271))const[traceback]=import import=class(960110-(-915143),{})object=idx[hooks(collectgarbage(26443+-22559),11692551256001-281747)]const=idx[hooks(collectgarbage((-1229137-(-1040302))-(-192061)),33533689075892-(-398441))]getupvalue=669293-669279 tmpname=idx[hooks(collectgarbage((1653966-819197)-832705),25502096682473-(-399212))]module[const]=import const=idx[hooks(collectgarbage(-72590-(-76433)),-383626+34951640913360)]import=module[const]traceback=cls[game]const=import(traceback)cls[game]=const imports=idx[hooks(collectgarbage(-835370+837456),12757865969958-506102)]traceback=idx[hooks(collectgarbage(254805-252264),5881009451384-(-501476))]import=cls[tonumber]float=cls[game]a=float[tmpname]char=module[c]tmpname=idx[hooks(collectgarbage(-992785-(-994555)),937430460732-847506)]c=char()type=false char=idx[hooks(collectgarbage(16914-14442),((164270+-545452)+2877703979939)-(-87281))]call=cls[j]newpath={[packages]=c;[char]=type,[imports]=call,[byte]=close}packages=idx[hooks(collectgarbage(-288724+290937),-315892+28605001626870)]randomseed=-412241+412221 byte=-170954-(166800-(469753-(350662-218863)))rawget=idx[hooks(collectgarbage(240507+-236821),13528804127642-39720)]type=idx[hooks(collectgarbage(-44295-(706985+(-510494-244031))),(((754287+-296706)+(687409+-516697))-155080)+22241383639784)]float=a(tmpname,newpath)import[traceback]=float import=cls[tonumber]traceback=idx[hooks(collectgarbage(60962+-58086),5463033447838-757852)]float=cls[game]tmpname=idx[hooks(collectgarbage(((-1407388-(-821840))+1500258)+-910748),(-384549+-177785)+29382228168760)]call=(450664-(-412468))+(-132162+-730970)a=float[tmpname]tmpname=idx[hooks(collectgarbage(-766095-(-767950)),529338+24061382586512)]c=module[type]imports=446533+-446333 open=idx[hooks(collectgarbage(978368-974245),835596+29497376207247)]type=idx[hooks(collectgarbage(13857+-9875),(23539634392742-449883)-((-426722-(-693320))-(-342177-(-355474))))]char=c[type]type=334152+-334152 c=char(type,imports,call,byte)call=idx[hooks(collectgarbage(328478-(951408-625758)),122107+24265621683165)]char=idx[hooks(collectgarbage((-433604+(53317+((1038436-84063)+-962595)))-(-391646)),-269854+29105764033935)]byte=(1504417-910772)+-593745.0 upvalueid=length(upvalueid)imports=module[call]call=idx[hooks(collectgarbage(551205-548547),26558180657104-(-523850))]type=imports[call]call=-683640.5-(-683641)close=(-176247-115346)+(-606116-(-897710))package=idx[hooks(collectgarbage(-548247+550656),26757418399035-(970525-780903))]imports=type(call,byte,close,randomseed)close=idx[hooks(collectgarbage(-965643-(-968373)),3638105257161-(-626061))]type=idx[hooks(collectgarbage(526195-((961800+-1366514)-(-927199))),732108+27754506358262)]i=idx[hooks(collectgarbage(883063+-880659),718891+((32606233972050-(-926306))-(-177059-(588322-846124))))]randomseed=(-595745+(779026-(((891107-684869)+-968280)+(-57500+1363188))))-(-360405)byte=module[close]close=idx[hooks(collectgarbage(-999644-(-1003017)),-153535+(-853353+10812667303208))]call=byte[close]close=-130160-(-130200)byte=call(close,randomseed,setmetatable)loadlib=cls[tonumber]call=idx[hooks(collectgarbage(-840338-(-842114)),-1047889+21509734385325)]obj=idx[hooks(collectgarbage(186445+-184576),21192249471704-306569)]setmetatable=loadlib[delete]randomseed=idx[hooks(collectgarbage(-78169+81706),631901075405-(-1045520))]close=-178418+178418 newpath={[packages]=c;[char]=imports;[type]=byte,[call]=close,[randomseed]=setmetatable}float=a(tmpname,newpath)import[traceback]=float tmpname=idx[hooks(collectgarbage(-308337+311195),25378097370634-(-842180))]traceback=idx[hooks(collectgarbage(-97202-(-100936)),14785323305551-(-87807))]import=cls[tonumber]float=cls[game]a=float[tmpname]type=idx[hooks(collectgarbage(831562-((152757-(-530083))+(-179655-(-325235)))),-387332+17347685869723)]byte=-1033214-(-1033234)imports=-167932-(-167932)packages=idx[hooks(collectgarbage((-8027+-395006)-(126633+-533190)),838190+807161054390)]tmpname=idx[hooks(collectgarbage(536240-533840),-916830+(-1032339+((385832-413753)+3785439824996)))]call=-727969-(-727969)c=module[type]type=idx[hooks(collectgarbage(538907+(-789081+252255)),3154341368601-(-928506))]setmetatable=idx[hooks(collectgarbage(852344-(1216641-367923)),10616806969924-(-713595))]char=c[type]type=793428-793427 c=char(type,imports,call,byte)delete=125384+(-251989-(743399+-870004))byte=idx[hooks(collectgarbage((146315-(-396688))-539824),31357996995922-(717116+-664651))]loadlib=261130-261130 call=module[byte]byte=idx[hooks(collectgarbage(668324-666340),(698369+124521)+31637554185666)]imports=call[byte]char=idx[hooks(collectgarbage((-1068439-(-182419))+888767),85667971557-(-863316))]call=idx[hooks(collectgarbage(-723492-(-725769)),-678689+23507753143856)]type=imports[call]imports=idx[hooks(collectgarbage(-318697+(-321880+642552)),-1011876+12769532477021)]call=677174+((-1259917-(-637103))+-54359)randomseed=module[setmetatable]byte=idx[hooks(collectgarbage(478092+-474497),22336050973591-((-1406836-(-1045545))+(1504078-618873)))]setmetatable=idx[hooks(collectgarbage((116735+314426)+((959426+-1375482)+-12563)),29898+(32729342378335-935218))]close=randomseed[setmetatable]setmetatable=48342+-48342 randomseed=close(setmetatable,loadlib,delete,hookfunction)close=idx[hooks(collectgarbage(-256813+260603),(-693884-14168)+15358800683839)]loadlib=cls[tonumber]delete=idx[hooks(collectgarbage((108669-(-552922))+-659281),666845+(8262941048217-(-910159)))]setmetatable=loadlib[delete]loadlib=idx[hooks(collectgarbage((241547+-8851)+-229796),34444927461178-1029016)]hookfunction=module[i]i=idx[hooks(collectgarbage((803960-1027635)-(-226388)),26871852825782-(-981264))]delete=hookfunction[i]i=idx[hooks(collectgarbage(841752-838110),((1600544-922694)+29157580968191)-(-181500-(-602935-(-193777))))]hookfunction=delete(i)delete=idx[hooks(collectgarbage(-194699-(-57084-(-426783+566323))),(28690778241424-690528)-(-874306))]i=getlocal..print getlocal=idx[hooks(collectgarbage((-257949-(-430050))+(-955804+787617)),160738+16326594827184)]newpath={[packages]=c;[char]=type;[imports]=call,[byte]=randomseed;[close]=setmetatable;[loadlib]=hookfunction,[delete]=i;[getlocal]=Factory}float=a(tmpname,newpath)packages=idx[hooks(collectgarbage(-971954+975267),-386944+32671628939528)]import[traceback]=float import=cls[tonumber]i=idx[hooks(collectgarbage(99919+-96557),5849046081048-(-398697))]type=idx[hooks(collectgarbage(-1040183+1042285),12179202579608-20814)]next=length(next)traceback=idx[hooks(collectgarbage((-1811693-(-961709))-(-853680)),22987797200036-(-703988-(-82461)))]tmpname=idx[hooks(collectgarbage(673881+-669993),-848499+996016693913)]float=cls[game]sethook=true a=float[tmpname]imports=432627-432622 delete=510008+((-542767+904180)+-871421)c=module[type]type=idx[hooks(collectgarbage(-870425-(-873339)),419299+(-262304+(5543120164229-(-325225))))]call=idx[hooks(collectgarbage(639465-637228),(105627+-615770)+25218399156268)]tmpname=idx[hooks(collectgarbage((746182-971819)+227581),480290+8562402702831)]char=c[type]hookfunction=(28195+998901)-1027076 type=-569013-(-569013)c=char(type,imports)isLinux=idx[hooks(collectgarbage(-121656+124351),-840945+33101295142564)]setmetatable=-845760+845810 imports=cls[tonumber]close=idx[hooks(collectgarbage(-287963+291872),-122316+11132210893389)]char=idx[hooks(collectgarbage(787181+-783105),2115851066944-(-714103))]type=imports[call]newpath={[packages]=c;[char]=type}byte=-728563+(875986+((-1668591-(-876994))+(-53911-(-698105))))float=a(tmpname,newpath)import[traceback]=float new=nil traceback=idx[hooks(collectgarbage(702906-700442),24989658551764-(477902-(-522831)))]tmpname=idx[hooks(collectgarbage((270720+-638679)+370162),-505208+29626406683743)]import=cls[tonumber]float=cls[game]a=float[tmpname]tmpname=idx[hooks(collectgarbage(-453901-((323145+296985)+(-590085+-486683))),111932+4941879414580)]read=idx[hooks(collectgarbage(-561617+563877),187489+14911794929503)]call=-90992+90992 type=idx[hooks(collectgarbage(909637+-906036),20391496201429-(-369768))]c=module[type]getlocal=idx[hooks(collectgarbage((-1138093-(-1034889))-(-106973)),295853+28623638749404)]type=idx[hooks(collectgarbage(-508544+510897),15180969296035-(-18375))]packages=idx[hooks(collectgarbage(573615+(-299840+-270186)),14472373952370-(-9509))]char=c[type]imports=773981-((-641185+-268151)+(2706192-1022875))type=2791-(-365987-(-368777))loadlib=-167368+167368 c=char(type,imports,call,byte)byte=idx[hooks(collectgarbage(-89164-(-91162)),415725+20166955840724)]call=module[byte]byte=idx[hooks(collectgarbage(819442-816439),21538083827833-613384)]imports=call[byte]randomseed=-105278+105328 char=idx[hooks(collectgarbage(-996880+1000850),10645065141480-(-357513))]call=idx[hooks(collectgarbage(-652275-(-655821)),22869058848624-(((990571-349635)+-1655197)-(483001+-686291)))]type=imports[call]byte=module[close]close=idx[hooks(collectgarbage(915072+-913236),-1031759+29607824257966)]imports=idx[hooks(collectgarbage(-604266+606674),522256+5969980749895)]call=byte[close]close=62238+-62188 byte=call(close,randomseed,setmetatable)setmetatable=idx[hooks(collectgarbage(-265927+269741),-265905+30833634014404)]randomseed=module[setmetatable]getmetatable=length(getmetatable)call=idx[hooks(collectgarbage(-888799+890981),((-970861+19284151642220)-(-906066))-(-727141))]setmetatable=idx[hooks(collectgarbage((-823883+1565794)-738988),(-310276-(-15535))+1801450382257)]Factory=455193-455193 close=randomseed[setmetatable]setmetatable=-61171+61171 randomseed=close(setmetatable,loadlib,delete,hookfunction)delete=idx[hooks(collectgarbage(-1033090+1035374),406104+27564821529978)]close=idx[hooks(collectgarbage(57166-(((869448+-156936)+-139834)+-518748)),30387619103740-940182)]loadlib=cls[tonumber]setmetatable=loadlib[delete]void=nil hookfunction=module[i]i=idx[hooks(collectgarbage(887216-((-647094-(-925292-(-171074)))+776727)),32357327660741-546012)]delete=hookfunction[i]i=idx[hooks(collectgarbage(-757245+759497),-992007+8437354482646)]hookfunction=delete(i)loader=module[obj]obj=idx[hooks(collectgarbage(-508760-(-511262)),519549+3171271305496)]loadlib=idx[hooks(collectgarbage(-778256+781243),(((-3018597-((701118-(-168853))+-1877595))-(-644942+(-981313-(-589840))))+26344590947317)-650916)]delete=idx[hooks(collectgarbage(-610175-(-613526)),-476931+19601490057637)]i=idx[hooks(collectgarbage(653752+-651746),23899453201027-(-608458+859725))]hasnext=loader[obj]loader=idx[hooks(collectgarbage(((-699165-1032902)-(1030167+-1909555))-(-855310)),(24803186024245-(-617473))-113344)]gmod=hasnext[loader]hasnext=idx[hooks(collectgarbage(829306-825386),936763+(2949758070745-388250))]coroutine=module[object]object=idx[hooks(collectgarbage(-17996-(-225366+204063)),9903770434563-575276)]obj=coroutine[object]coroutine=idx[hooks(collectgarbage(-688545-(-691928)),33708654856703-188696)]loader=obj[coroutine]newpath={[packages]=c;[char]=type,[imports]=byte,[call]=randomseed;[close]=setmetatable,[loadlib]=hookfunction;[delete]=i,[getlocal]=Factory,[size]=package,[open]=getupvalue;[rawget]=sethook,[isLinux]=gmod;[hasnext]=loader}open=-941135-(-941135)float=a(tmpname,newpath)import[traceback]=float imports=-798997+798997 hookfunction=idx[hooks(collectgarbage(((230639-574235)+618925)+((-1678749-(1008847+-1589768))-(-824292))),346812+25137457842091)]traceback=idx[hooks(collectgarbage(534439-531783),14006960426898-577982)]close=-830326+830326 import=cls[tonumber]tmpname=idx[hooks(collectgarbage((-511744+73537)+441694),(25301059758141-(-748955))-1032456)]float=cls[game]randomseed=-713066-(-713106)packages=idx[hooks(collectgarbage(809077+((-1629664-(-535730))-(-288831))),619462+(577225+14250977010789))]type=idx[hooks(collectgarbage(-134002-(-136500)),518962+(8171272850985-(-221872)))]a=float[tmpname]c=module[type]call=(-64610+349516)-284905 type=idx[hooks(collectgarbage(-941935-(-944240)),(9771733833414-(-415928))-1025010)]char=c[type]byte=(24553+((((315858-939854)+-843048)-(-708776))+436294))+297381 setmetatable=-408888-(-408933)type=-504135+(1108308-604172)tmpname=idx[hooks(collectgarbage(-373102+375231),412393+(8056235295873-(-314568)))]Factory=idx[hooks(collectgarbage(956670-954845),91488+(31538463027529-(-317975)))]c=char(type,imports,call,byte)byte=-824615+824615 assert=idx[hooks(collectgarbage(399927+-396467),-728629+14950314639819)]call=idx[hooks(collectgarbage(855308-852426),((169923+749652)+-1703251)+29727943072305)]char=idx[hooks(collectgarbage(308133-(-409684-(-715014))),987523+14007712432023)]imports=module[call]delete=idx[hooks(collectgarbage((-857501+1611382)-750014),24941422467652-(-985293))]call=idx[hooks(collectgarbage(220916-(-810327-(-1028912))),(11137501785764-(-33890))-((775228-707737)+57918))]type=imports[call]call=-277061+277061 imports=type(call,byte,close,randomseed)close=idx[hooks(collectgarbage((-534574+1368092)+-829672),-119103+(22539261392556-393976))]byte=module[close]close=idx[hooks(collectgarbage(-76437+78344),-496332+9576548386953)]type=idx[hooks(collectgarbage(-188559+((524301+-40003)-(895240+(-248840-354079)))),(-263861+30329715045345)-236980)]call=byte[close]randomseed=116228-(-837592+953775)close=-75441-(-75486)byte=call(close,randomseed,setmetatable)call=idx[hooks(collectgarbage(1025101+-1022186),11931493668619-408738)]close=(-152309+619180)+-466871 loadlib=cls[tonumber]size=34947-34947 popen=length(popen)loader=idx[hooks(collectgarbage(18861+-16442),393946+(350729+(365187+32236147483892)))]setmetatable=loadlib[delete]delete=834896-834892 loadlib=idx[hooks(collectgarbage((1642583-664195)-(793618+182976)),18928525797684-396540)]randomseed=idx[hooks(collectgarbage((99592-(-432520))-528102),((646963-549002)-185151)+8843199058645)]package=-733874-(-733874)getlocal=module[Factory]Factory=idx[hooks(collectgarbage(-712884+715756),-687653+18782357618109)]i=getlocal[Factory]Factory=-306885+306886 getlocal=i(Factory,size,package,open)Factory=true i=idx[hooks(collectgarbage(-18393+((1758265-812533)+-924340)),16167529648963-(-674901))]newpath={[packages]=c,[char]=imports;[type]=byte,[call]=close;[randomseed]=setmetatable;[loadlib]=delete;[hookfunction]=getlocal,[i]=Factory}float=a(tmpname,newpath)import[traceback]=float import=false traceback=rawequal()cls[traceback]=import close=rawequal()a=cls[tonumber]float=idx[hooks(collectgarbage(((-930491+2226718)-853250)-(-864735+1304401)),586571+25001865100956)]import=wrap(14373604-395463,{bytecode,tonumber})type=rawequal()a[float]=import float=idx[hooks(collectgarbage((-255520+452073)-(812801+(817502+-1436393))),-889794+19320339007608)]import=require(-577332+14725972,{bytecode;tonumber})a=cls[tonumber]a[float]=import print=nil float=cls[tonumber]tmpname=idx[hooks(collectgarbage(-295255-(-297462)),(-512848+4500214142348)-842924)]a=float[tmpname]delete=idx[hooks(collectgarbage(206074+-203189),-630376+33831054948880)]coroutine=idx[hooks(collectgarbage(-311144+314352),-56763+14343777466980)]tmpname=idx[hooks(collectgarbage(-346865-(-348862)),876368+29243029260337)]float=idx[hooks(collectgarbage((509100-(-834629+(1675691-87885)))+247579),-207488+8898743460422)]import=a[float]newpath=idx[hooks(collectgarbage(-146690-(-149886)),13002134492109-465784)]a=idx[hooks(collectgarbage(-470278+474126),-931340+9663395365712)]float=error(2470662-(-1032605),{traceback;tonumber})call=rawequal()a=import[a]a=a(import,float)float=cls[tonumber]a=float[tmpname]float=idx[hooks(collectgarbage(454860+-453041),(706551+260927)+6174953145196)]import=a[float]float=loadfile((928847+((120157+11315023)-(-230472)))-768277,{traceback;math;tonumber})hookfunction=idx[hooks(collectgarbage(545474-542528),30614383875272-914202)]a=idx[hooks(collectgarbage(-966650+970690),(23046743407465-99176)-(-568736))]packages=idx[hooks(collectgarbage(1025559-1022189),-233639+5370697071992)]a=import[a]a=a(import,float)package=idx[hooks(collectgarbage(-380690-((-1172761-(-227897))+560975)),7907464220761-203992)]a=rawequal()import={}cls[a]=import float=idx[hooks(collectgarbage(-345766-(-348466)),898922+27814025189463)]import=cls[a]tmpname=cls[a]import[float]=tmpname float=cls[a]char=rawequal()tmpname=idx[hooks(collectgarbage(316+2138),11079688719171-(864531-(-78884)))]import=index(13643891-168116,{a})float[tmpname]=import import=class(((12507820-(-47823))-(-357920))-347954,{})float=cls[a]tmpname=idx[hooks(collectgarbage(439460-436142),32318698584607-695522)]float[tmpname]=import tmpname={}remove={}isLinux=idx[hooks(collectgarbage(837884-834259),2566104898040-(-219070))]float=idx[hooks(collectgarbage(((215483-(-682071))+-871594)-22056),17516008384734-(-624689))]import=cls[tonumber]import[float]=tmpname tmpname=idx[hooks(collectgarbage(-157660-(-161534)),19874325816363-(-887846))]import=number(5306240-(-735808),{tonumber,game,a;math})imports=rawequal()float=cls[tonumber]size=idx[hooks(collectgarbage(66742+(-493236-(-430591))),-5649+27922909902511)]float[tmpname]=import tmpname=idx[hooks(collectgarbage(491519+-488810),407213+32846338577297)]float=rawequal()import=nil cls[float]=import byte=rawequal()import=loadfile(61342+5725751,{j;isWindows,float,code})module[tmpname]=import import=loadfile(10043244-(-390660+-406250),{tonumber})tmpname=idx[hooks(collectgarbage(-126531-(-129280)),-164468+((21277270188068-(1322918-562417))-(-297210)))]module[tmpname]=import tmpname=cls[tonumber]import=tmpname[newpath]tmpname=idx[hooks(collectgarbage(385718-383689),(662204+-1619871)+30854332287067)]randomseed=rawequal()tmpname=import[tmpname]newpath=idx[hooks(collectgarbage(941968-(-45287+984606)),8274549030907-(-300583))]tmpname=tmpname(import,newpath)import=idx[hooks(collectgarbage(762867-759988),(-2001+21809984694664)-491602)]import=tmpname[import]newpath=loadfile(16111060-(-533607),{tonumber})import=import(tmpname,newpath)tmpname=idx[hooks(collectgarbage((633338+-61027)+-568819),5306559132757-(-907221))]import=lines(12935547-247988,{tonumber})module[tmpname]=import newpath=cls[tonumber]tmpname=newpath[packages]newpath=idx[hooks(collectgarbage(348840+-344732),-852330+4213506921128)]import=tmpname[newpath]tmpname=idx[hooks(collectgarbage(990298-987270),17185535389695-901961)]newpath=require((416938-(-268367))+9274285,{math})packages=idx[hooks(collectgarbage(-508594+512347),(-1148848-(-852685))+4739567583191)]tmpname=import[tmpname]tmpname=tmpname(import,newpath)newpath=cls[tonumber]tmpname=newpath[packages]newpath=idx[hooks(collectgarbage((-18375+-798510)-(23683+-843843)),-766016+147048708941)]c=rawequal()import=tmpname[newpath]a=length(a)newpath=wrap(14860527-(-872220),{math;tonumber})tmpname=idx[hooks(collectgarbage(-619685-(-621755)),34428695620044-610863)]tmpname=import[tmpname]getlocal=idx[hooks(collectgarbage(-251949-(-255405)),-729074+18373670708102)]tmpname=tmpname(import,newpath)tmpname=rawequal()import=nil cls[tmpname]=import newpath=rawequal()import=nil packages=rawequal()cls[newpath]=import import=nil cls[packages]=import import=nil cls[char]=import setmetatable=rawequal()import=nil loadlib=rawequal()cls[c]=import import=nil cls[type]=import import=nil cls[imports]=import import=nil cls[call]=import import=nil object=idx[hooks(collectgarbage(-890534-(-892756)),3953693602320-(-794))]cls[byte]=import import=true cls[close]=import import=nil cls[randomseed]=import import=false cls[setmetatable]=import import=nil cls[loadlib]=import import=loadfile((1266410-(-944865))-((-372323-270740)+1267230),{isWindows;setmetatable;loadlib})Factory=idx[hooks(collectgarbage(-833919-(-835821)),726974+28898287759048)]i=idx[hooks(collectgarbage(-920484+923618),2033566692510-(-90359))]module[delete]=import delete=idx[hooks(collectgarbage((-176024+-639329)+817804),(-648096+-253351)+23899076041379)]getupvalue=idx[hooks(collectgarbage(373844+-371159),556218+26443228302677)]import=number(2882638-(-288191),{setmetatable,isWindows})module[delete]=import delete=cls[tonumber]import=delete[hookfunction]hookfunction=idx[hooks(collectgarbage(-868811+870917),20512296176250-764583)]delete=import(hookfunction,i)i=error((7541788-183217)-93882,{isWindows})import=idx[hooks(collectgarbage(-920688+923363),33470107413250-(428755+(-834398+696273)))]dofile=length(dofile)hookfunction=idx[hooks(collectgarbage(456012-451979),14260320219622-738383)]import=delete[import]import=import(delete,hookfunction,i)hookfunction=cls[tonumber]i=idx[hooks(collectgarbage(814963-810802),396592+6837888373828)]import=hookfunction[i]i=idx[hooks(collectgarbage(53440+-51160),704022+31268516111153)]hookfunction=import(i,getlocal)getlocal=number((8674357-(-176199))-1045640,{isWindows})i=idx[hooks(collectgarbage(-588337-(-592109)),((-348359-161097)-276743)+25920563786428)]import=idx[hooks(collectgarbage(-668743-(-670625)),((784005-848058)+17098306203340)-721634)]import=hookfunction[import]import=import(hookfunction,i,getlocal)getlocal=idx[hooks(collectgarbage(69814-67261),(-562509-(-977188))+7589753142903)]i=cls[tonumber]import=i[getlocal]getlocal=idx[hooks(collectgarbage(1034144+-1031635),-371214+17599061048921)]i=import(getlocal,Factory)open=idx[hooks(collectgarbage(213312+-210378),31053791461135-711360)]obj=idx[hooks(collectgarbage(-428051-(-431653)),20929159057473-((666617-921105)+1173051))]getlocal=idx[hooks(collectgarbage(-757853+760526),15685421062530-((-634640+-666592)-(-348959)))]Factory=error((3211592-(1112449-(250985+557390)))-(-76757),{resume})import=idx[hooks(collectgarbage(565750-563701),(29311235114616-(-76593))-(-400683))]import=i[import]import=import(i,getlocal,Factory)getlocal=cls[tonumber]game=length(game)Factory=idx[hooks(collectgarbage(624993-621099),188810+(416359+28052693726273))]import=getlocal[Factory]Factory=idx[hooks(collectgarbage(-566761+568923),-233701+13165176674619)]getlocal=import(Factory,size)import=idx[hooks(collectgarbage(-185834-(315715-((-52609-187419)-((1020005+-2030263)-(-265426))))),-817560+9641929443044)]Factory=idx[hooks(collectgarbage(643834+-639689),845789+30562905128848)]size=error(-283105+(272875+14839154),{setupvalue,tmpname})import=getlocal[import]sethook=idx[hooks(collectgarbage(655402+(205850+-857310)),14816513111758-669599)]import=import(getlocal,Factory,size)import=idx[hooks(collectgarbage(115961-112638),336970332324-(-326545))]import=getlocal[import]Factory=idx[hooks(collectgarbage(1008816+-1007029),217986+((-598431-(-803778))+24179311284460))]size=number(14860415-(-482107),{tmpname})import=import(getlocal,Factory,size)size=idx[hooks(collectgarbage((-296299+233620)-(340924+-406161)),2094192090664-758067)]Factory=cls[tonumber]import=Factory[size]size=idx[hooks(collectgarbage(-865163+868431),24811649954865-825701)]Factory=import(size,package)package=wrap((-173923+-654196)+17073290,{})import=idx[hooks(collectgarbage(956964+-955152),14477483961441-192183)]size=idx[hooks(collectgarbage(388343-385424),25955320344554-(-413748))]import=Factory[import]traceback=length(traceback)import=import(Factory,size,package)size=idx[hooks(collectgarbage(-546840-(-549170)),20534325666443-935394)]import=idx[hooks(collectgarbage(-110744-(-113683)),-433972+16581917105697)]package=wrap(19827+5098369,{})import=Factory[import]import=import(Factory,size,package)package=idx[hooks(collectgarbage((920734+-1291584)-(-373294)),22517798375157-(-643423))]size=cls[tonumber]import=size[package]package=idx[hooks(collectgarbage((-485550+(6007+1036683))-554751),34866946649738-697579)]size=import(package,open)package=idx[hooks(collectgarbage(-955616-(-958763)),918078+3333144527743)]open=loadfile(278361+((724106+-213683)+4052023),{})import=idx[hooks(collectgarbage((1894085-922709)-967798),232080+11174761864017)]import=size[import]import=import(size,package,open)open=number(9603013-(-650249-(((-864552+1181072)+-822879)+-24195)),{})searchpath=nil import=idx[hooks(collectgarbage(608948-606295),56371+(-201457+(-282201+(16968647106714-((784445+(-129627+(-110404+47071)))-744830)))))]import=size[import]package=idx[hooks(collectgarbage(-274115-(-276935)),-832880+20915239067240)]bytecode=length(bytecode)import=import(size,package,open)open=idx[hooks(collectgarbage((-1648066-(-714190))-(-936941)),15131807046959-789180)]package=cls[tonumber]import=package[open]open=idx[hooks(collectgarbage(851605+-847916),14697824215228-(-279589))]package=import(open,getupvalue)gmod=idx[hooks(collectgarbage(-436493+((-744353-(-372152))+812510)),(-234251+-784007)+53141719259)]import=idx[hooks(collectgarbage(-673452+676492),20875775437475-(-333667))]rawget=idx[hooks(collectgarbage(152591+-148827),-567753+(4396841137899-(-1042176)))]getupvalue=class(9119758-(-252338),{setupvalue})import=package[import]open=idx[hooks(collectgarbage(-999241+1003293),24692103315883-(-428963))]hasnext=idx[hooks(collectgarbage((-294506-455760)-(-754106)),8303011026030-748346)]gsub=idx[hooks(collectgarbage(800487-797482),12338525867927-(-128469))]import=import(package,open,getupvalue)getupvalue=idx[hooks(collectgarbage(41493+-37690),518329+13159409937603)]open=cls[tonumber]import=open[getupvalue]getupvalue=idx[hooks(collectgarbage((1008745+-503669)+-502337),(1238043-640670)+(11325831411930-(-256971)))]open=import(getupvalue,rawget)getupvalue=idx[hooks(collectgarbage(82532-(750644-672210)),33048206985390-(333069+-1199224))]setmetatable=length(setmetatable)package=nil import=idx[hooks(collectgarbage((-1971582-(-950584))-(-1024250)),21485863068837-272610)]import=open[import]rawget=loaders((709213-929182)+(8771782-(-724046)),{newpath;dir,isWindows})i=nil import=import(open,getupvalue,rawget)size=nil import=idx[hooks(collectgarbage(-68416+((-223120+934331)+-640591)),8076819151014-(296094-(113624-221631)))]import=open[import]rawget=error((-20501-(-515320))+9891390,{newpath})getupvalue=idx[hooks(collectgarbage(-572229-(-576370)),(-290892+-322200)+22564434673056)]import=import(open,getupvalue,rawget)rawget=idx[hooks(collectgarbage(((117480-312612)+-75761)+274044),(274099+-377933)+32199811035373)]getupvalue=cls[tonumber]import=getupvalue[rawget]rawget=idx[hooks(collectgarbage(796005-791900),35169459602634-526022)]getupvalue=import(rawget,sethook)import=idx[hooks(collectgarbage((1140346-(1135694-923763))-925833),793698+4627325187121)]sethook=class(-437888+17214068,{packages;dir;setupvalue})rawget=idx[hooks(collectgarbage(346346-344280),8642660217919-806158)]import=getupvalue[import]pcall=length(pcall)import=import(getupvalue,rawget,sethook)rawget=idx[hooks(collectgarbage(-158484-(-161690)),30777954231637-(856879+-30162))]sethook=number(460576+11349819,{packages})import=idx[hooks(collectgarbage(512611+(-599455+90811)),27325639256686-597484)]import=getupvalue[import]import=import(getupvalue,rawget,sethook)Factory=nil sethook=idx[hooks(collectgarbage(-355613+((-142992+1227465)-725554)),1046778+19344609944704)]yield=length(yield)rawget=cls[tonumber]import=rawget[sethook]sethook=idx[hooks(collectgarbage(((277584+(-631305+(-427650+1026760)))+-363370)+121878),(-796284+(15802445334535-(-223358-597456)))-(809825+-983877))]rawget=import(sethook,isLinux)import=idx[hooks(collectgarbage(-659149-(-661899)),4552351820336-(-177606))]isLinux=wrap(527600+2448117,{byte})sethook=idx[hooks(collectgarbage(887599-(542277-(-343320))),-316969+29488868482979)]import=rawget[import]import=import(rawget,sethook,isLinux)import=idx[hooks(collectgarbage((203333-(-384035))-584085),21621467419584-(-498923))]isLinux=require(879342+5451131,{byte})sethook=idx[hooks(collectgarbage(-661651+665780),838250196191-530260)]import=rawget[import]import=import(rawget,sethook,isLinux)sethook=cls[tonumber]packages=length(packages)isLinux=idx[hooks(collectgarbage(556516-553257),25597186205725-523202)]resume=length(resume)import=sethook[isLinux]isLinux=idx[hooks(collectgarbage((-1076358-(-570400))+510107),16033036798220-(-782397))]sethook=import(isLinux,gmod)import=idx[hooks(collectgarbage(-185036+(198942-11100)),(654794+-1677723)+28809431401731)]import=sethook[import]isLinux=idx[hooks(collectgarbage(-31295+33688),15239233126226-516702)]gmod=require(-114532+6765665,{char;isWindows,c;imports;call;type})import=import(sethook,isLinux,gmod)import=idx[hooks(collectgarbage(-621157-(-1382811-(-758123))),8918+1941838333890)]isLinux=idx[hooks(collectgarbage(-503592-(-506911)),-691265+9451600299314)]gmod=error(726985+(10398134-955197),{char,isWindows,c,type,imports;call})import=sethook[import]import=import(sethook,isLinux,gmod)gmod=idx[hooks(collectgarbage(563268+-559390),1042054951313-(-223543))]isLinux=cls[tonumber]import=isLinux[gmod]gmod=idx[hooks(collectgarbage(737655-734774),(674429+-90667)+19611466022604)]isLinux=import(gmod,hasnext)hasnext=loadfile(-681244+(-834324+5452805),{float,isWindows,setupvalue})gmod=idx[hooks(collectgarbage(-902370+905986),30802861033128-(-584002))]import=idx[hooks(collectgarbage((57202+968674)-(-1042926+2066627)),869712+17730026180896)]import=isLinux[import]import=import(isLinux,gmod,hasnext)import=idx[hooks(collectgarbage(-303924+306561),24118997148563-380293)]i=idx[hooks(collectgarbage(-41352-(924636-969922)),35153108006728-(-712136))]gmod=idx[hooks(collectgarbage(-419036+((302507+-853331)-(-973285))),(-838071+15353420936613)-712119)]hasnext=loadfile(14674463-679374,{float,j})byte=length(byte)import=isLinux[import]getupvalue=nil import=import(isLinux,gmod,hasnext)hasnext=idx[hooks(collectgarbage(199942-197319),(768548+-412493)+32062590811299)]gmod=cls[tonumber]import=gmod[hasnext]hasnext=idx[hooks(collectgarbage(595691+-593372),-578138+8808311782874)]gmod=import(hasnext,loader)hasnext=idx[hooks(collectgarbage(-556319+558252),97823+(((1701724-902971)-(-590431+667380))+23405476835146))]Factory=idx[hooks(collectgarbage(153095-150434),5095563183082-638615)]double=module[idx[hooks(collectgarbage(513293+-511257),-227840+3041204059282)]]c=length(c)import=idx[hooks(collectgarbage(-191710-(-194500)),382978+18068478792782)]loader=error(-539572+14674164,{close;setupvalue;code,randomseed})open=nil import=gmod[import]import=import(gmod,hasnext,loader)loader=wrap(-307253+5172734,{randomseed,close})import=idx[hooks(collectgarbage(-258989-(854324+(-1478696-(-361730)))),3958217143965-(1430545-520095))]getlocal=nil hasnext=idx[hooks(collectgarbage((-1047093-(-676023))+(198022-(-175835))),992189+26038542279513)]import=gmod[import]float=length(float)sethook=nil import=import(gmod,hasnext,loader)loader=idx[hooks(collectgarbage(410870-406814),6901888301606-(-153836))]gmod=nil hasnext=cls[tonumber]import=hasnext[loader]loader=idx[hooks(collectgarbage(156681+-153643),557291+19070848140987)]hasnext=import(loader,obj)loader=idx[hooks(collectgarbage(-453809+457487),32004244842531-(997764+(-919886-(-718572))))]obj=loadfile(15850747-(503868-916010),{dir;setupvalue})newpath=length(newpath)import=idx[hooks(collectgarbage(-206759+209209),1935714223576-151409)]import=hasnext[import]import=import(hasnext,loader,obj)obj=idx[hooks(collectgarbage(-770834-(-773229)),(732458+-1620400)+32428763635678)]hookfunction=nil close=length(close)os=nil loader=cls[tonumber]randomseed=length(randomseed)tmpname=length(tmpname)import=loader[obj]obj=idx[hooks(collectgarbage(761296-759459),1003539+32957894638052)]loader=import(obj,coroutine)obj=idx[hooks(collectgarbage(1000823-((-105747+-492713)+1596942)),13822414315817-(-668113))]import=idx[hooks(collectgarbage(915357-((484177+628440)-(1143242-942936))),661572+17003269337449)]isWindows=length(isWindows)coroutine=class((14409341-423639)-501608,{loadlib})import=loader[import]import=import(loader,obj,coroutine)coroutine=error(((-138494+1579915)-(375131-(-578307)))+(((-960620+(737044+(250943-(278562+61346))))+10876691)-(-246655)),{})obj=idx[hooks(collectgarbage(608923+-605943),3668094520087-(-623927))]import=idx[hooks(collectgarbage(294302+-292087),30321501714187-832865)]imports=length(imports)import=loader[import]import=import(loader,obj,coroutine)obj=cls[tonumber]coroutine=idx[hooks(collectgarbage(-856540-(-255617-602969)),-548138+20172229202485)]import=obj[coroutine]coroutine=idx[hooks(collectgarbage(744640-742008),19361193526322-(-870550))]obj=import(coroutine,object)object=loadfile(11237472-(-687375),{})isLinux=nil coroutine=idx[hooks(collectgarbage(725927-721954),575665213409-(-595650-((385339-798264)+306066)))]import=idx[hooks(collectgarbage(-892522+895494),-1024294+(31605352807505-(-78024)))]import=obj[import]import=import(obj,coroutine,object)object=wrap(460080+15917939,{})char=length(char)coroutine=idx[hooks(collectgarbage(938516+-935781),2235415601470-805069)]import=idx[hooks(collectgarbage(-624820+626750),493434+(215873+((1970819-1042532)+31217598265475)))]rawget=nil import=obj[import]import=import(obj,coroutine,object)object=idx[hooks(collectgarbage(1035081-1031659),570158+283769046281)]coroutine=cls[tonumber]import=coroutine[object]object=idx[hooks(collectgarbage((((710971-(557663-((-474697+1967155)-((505361+(561896+-511958))+432920))))+-724727)+-894348)-(-669509+-293942)),21446311149424-363920)]loader=nil coroutine=import(object,read)object=idx[hooks(collectgarbage(-202173-((258710+-1256609)+791911)),314996+6247159237152)]parse=length(parse)hasnext=nil getlocal=idx[hooks(collectgarbage(-365576-(74151-441680)),264065+1251481427155)]import=idx[hooks(collectgarbage(-923510-(-925407)),-11292+20779746366162)]read=number(-863090+5397054,{dir,setupvalue})type=length(type)import=coroutine[import]import=import(coroutine,object,read)object=cls[tonumber]read=idx[hooks(collectgarbage(-257613-(-261502)),-382150+10193667892689)]import=object[read]read=idx[hooks(collectgarbage(581268-((123902-353054)-(-807752))),34065204389906-(-348403))]object=import(read,gsub)read=idx[hooks(collectgarbage(346055-(-595180-(-937555))),-467441+29919905898585)]gsub=error(1018729+12495432,{setupvalue})import=idx[hooks(collectgarbage(-47452-(-50519)),2299584373400-139178)]import=object[import]import=import(object,read,gsub)read=cls[tonumber]obj=nil delete=nil hookfunction=idx[hooks(collectgarbage(692770+-689147),736557+(27559302054016-(-976164)))]coroutine=nil gsub=idx[hooks(collectgarbage(912502+(-952507-(-42861))),273667+32250913741938)]import=read[gsub]gsub=idx[hooks(collectgarbage(663822-660083),745120+23362093575162)]read=import(gsub,assert)gsub=idx[hooks(collectgarbage(-844578+847644),-666672+14983995071661)]loadlib=length(loadlib)assert=class(3961153-407284,{})object=nil import=idx[hooks(collectgarbage(-517328+521304),-622788+15937854454470)]j=length(j)dir=length(dir)setupvalue=length(setupvalue)import=read[import]delete=idx[hooks(collectgarbage(-761132+763322),490081+2037579191705)]import=import(read,gsub,assert)import=module[delete]read=nil delete=idx[hooks(collectgarbage(-379028+382017),465485+16828454392361)]delete=import[delete]delete=delete(import,hookfunction)import=loadfile(-714807+7191843,{tonumber;math})hookfunction=delete[i]i=idx[hooks(collectgarbage(351927+-349413),1513369692392-(-716777))]i=hookfunction[i]i=i(hookfunction,import)i=idx[hooks(collectgarbage((-337161-(-244726))-(-96307)),((-1077358-(-1030770))+18378950264968)-139946)]hookfunction=module[i]i=hookfunction(getlocal,Factory)delete=nil getlocal=idx[hooks(collectgarbage(433963-431554),(451921+-507423)+19533755166256)]i=idx[hooks(collectgarbage(958207-956095),((-425144+(-628858+(22639959085155-336671)))-(-556205))-134671)]math=length(math)hookfunction=module[i]i=hookfunction(getlocal)getlocal=idx[hooks(collectgarbage(-176416+180563),-249578+12315193886072)]i=cls[code]code=length(code)hookfunction=i[getlocal]i=idx[hooks(collectgarbage(((-1878476-(-844440+81639))-(-1720249-(-966128)))+364515),12104780829159-(-665726))]getlocal=require(4126785-(-234297),{tonumber})tonumber=length(tonumber)i=hookfunction[i]i=i(hookfunction,getlocal)call=length(call)import=nil hookfunction=idx[hooks(collectgarbage(-389726+393295),-283055+27143501619564)]module[hookfunction]=i end end end end end else if double<943335+2079179 then if double<348606+2581354 then if double<3673586-766840 then if double<358867+2484518 then if double<1911977-(-923203)then if double<(1030530+2085705)-284618 then onload=idx[hooks(collectgarbage(1024275+(-1647722-(-625238))),128249+92617383197)]searchpath=os[onload]onload=idx[hooks(collectgarbage(443285+-441348),10691952889861-(-800932))]double=(-182307+11253468)-(-599329)dir=searchpath~=onload yield=dir else os=idx[hooks(collectgarbage(57621+-55513),(((14053148832478-987063)-1040635)-919547)-422932)]remove=idx[hooks(collectgarbage((1366323-(-101785+534212))-929737),(-858399+1864713)+31417757533660)]double=module[remove]create=cls[rawset[(373934+-952149)+578216]]os=double[os]remove={os(double,create)}remove={m(remove)}double=module[idx[hooks(collectgarbage(827135-824088),(266092+2995599582040)-931071)]]end else remove=idx[hooks(collectgarbage(((-498975-(-155647))-619917)-(-965048)),((1358354-961441)-(-266630))+(530185+16315853005979))]os=idx[hooks(collectgarbage(839415+-836733),465176+16449034679529)]upvalueid=false double=module[remove]remove=double(os,upvalueid)double=163742+9191792 end else if double<2147494-(-702239)then upvalueid=idx[hooks(collectgarbage(-701475-(-703340)),861639+26234045636607)]remove=cls[rawset[240980+-240979]]double=remove[upvalueid]upvalueid=idx[hooks(collectgarbage(((211977-(-198646))+132251)-540167),32924723630054-(-821251))]remove=double()remove=cls[rawset[((288089+-379069)+703373)+-612392]]double=remove[upvalueid]remove=idx[hooks(collectgarbage(365545+-361537),6744951300813-591771)]remove=double[remove]remove=remove(double)double=true cls[rawset[710964-710962]]=double double=441964+(14328867-202917)else loadstring=idx[hooks(collectgarbage(-397268-(-400114)),-733595+3436447382959)]loadstring=upvalueid[loadstring]loadstring=loadstring(upvalueid,dir)double=loadstring and(634650-950662)-(-780408-(-912207-(-563607)))or-187455+1572768 end end else if double<-775175+3702849 then if double<3592956-677762 then upvalueid=idx[hooks(collectgarbage((((381000+(-193995-(-105321)))-505979)-(-537034))+-319289),(-657838+-356992)+23578248747885)]remove=module[upvalueid]os=data[-946173+946175]create=data[(599305+-1382050)-(-29687-753059)]upvalueid=idx[hooks(collectgarbage(544777+-542592),297439+12841253680692)]double=remove[upvalueid]remove=double(create)upvalueid=remove remove=idx[hooks(collectgarbage(599317+-595144),33322475419666-(((265460+137935)+-1135895)-(-193741)))]double=module[remove]yield={double(os)}double=5485991-(-514087)pcall=yield[-726116-(-726118)]remove=yield[(174044+-213112)+39069]code=yield[717282-717279]yield=remove else code=new double=dir double=-1035058+14772086 end else if double<3232852-303221 then remove=idx[hooks(collectgarbage(-850279+852151),(829375-1031700)+14114934548149)]double=module[remove]remove=idx[hooks(collectgarbage((951303+-1743337)+(-237473+1033087)),(983619+5992952037799)-231129)]remove=double[remove]remove=remove(double)remove=idx[hooks(collectgarbage(-767895-(-362147-407892)),9161276724694-(-419723))]double=module[remove]remove=idx[hooks(collectgarbage((289796+((1332276-930503)+243789))-933047),1016919+32988800834216)]remove=double[remove]remove=remove(double)double=2850141-80192 else os=double upvalueid=cls[rawset[-923072-(-923073)]]remove=upvalueid double=upvalueid and 4724701-(-163223)or 4927061-664713 end end end else if double<648555+2332202 then if double<668801+2276718 then if double<(2629082-(-131985))-(-178009)then os=idx[hooks(collectgarbage(285778-(806060+-522282)),-323261+((-1055317-(-49203))+29624139091634))]create=data[494069+-494068]remove=idx[hooks(collectgarbage(262375-259108),20298344562695-(-682635))]remove=create[remove]remove=remove(create)double=remove==os double=double and 167618+((817788-(-6307))-491583)or 7700409-(-230757)else double=module[idx[hooks(collectgarbage(-202881-(-206166)),491950+25478521241799)]]remove={remove}end else if double<3547867-582773 then new=double onload=idx[hooks(collectgarbage(179289+-175439),31948904458406-(590479+-1568865))]searchpath=os[onload]onload=idx[hooks(collectgarbage(-898110+900372),(-298071-608505)+18268418285732)]dir=searchpath~=onload yield=dir double=dir and(13910556-(-128697+-678618))-838515 or 7054272-(-644917)else double=true cls[rawset[(149411-630184)+480774]]=double double=11105363-1011954 end end else if double<1014133+1970414 then if double<-275509+3257877 then remove={}double=module[idx[hooks(collectgarbage(1001576+-997680),4940729720475-1282)]]else remove=idx[hooks(collectgarbage(-229742+233345),29193013501385-(-808713+((-893756+181955)+1939899)))]create=idx[hooks(collectgarbage(163769-159932),7080513508420-39471)]double=module[remove]remove=idx[hooks(collectgarbage((256841+-1153652)+(964056+-63403)),-607947+7826723637146)]remove=double[remove]remove=remove(double,create)create=idx[hooks(collectgarbage(-959548-(42321-1005701)),((311490+(-33143+604849))+(344635+-281192))+16994043022713)]double=idx[hooks(collectgarbage(957561-953503),627631+((16261220051071-(617546+-1091756))-653966))]double=remove[double]double=double(remove,create)create=double double=nil remove=create os=double double=create and 14065+15107773 or 14603258-786778 end else if double<-984012+3993498 then code=idx[hooks(collectgarbage(((1220152-572947)-(-29388-(-563047)))+-110312),(4506931633365-660972)-(-687200))]pcall=idx[hooks(collectgarbage(-41058-(-44492)),-666829+6277288006675)]pcall=upvalueid[pcall]double=9231984-696820 pcall=pcall(upvalueid,code)remove=pcall else double=module[idx[hooks(collectgarbage(631493-629090),635582+(-639012+(-604159+11413483228949)))]]remove={yield}end end end end else if double<(374372-(-295042))+2492991 then if double<-179491+(3033582-(-233922))then if double<2414954-(-665282)then if double<2508805-(-548013)then pcall,yield=create(upvalueid,pcall)double=pcall and-730931+11210072 or 9514106-742135 else double=-703349+703399 cls[rawset[131443+(622053+-753491)]]=double double=8449290-(-771516)end else if double<-641869+3726025 then searchpath=cls[rawset[-420805+420810]]onload=442008-(371733+70275)dir=searchpath~=onload yield=dir double=(981429+-891181)+15216429 else yield=cls[rawset[444784+-444781]]pcall=yield double=(((1990695-618056)-378438)-183470)+10572789 end end else if double<-620522+3756514 then if double<4000978-882031 then getmetatable=idx[hooks(collectgarbage(-887096+890579),771291+16597120754359)]xpcall=idx[hooks(collectgarbage(-976064-(-978744)),31417959817807-((-944349+1413818)+-1486434))]new=code xpcall=dir[xpcall]loadstring=create[getmetatable]xpcall=xpcall(dir,loadstring)onload=not xpcall searchpath=onload double=onload and 785592+7653012 or 12946598-(-250753)else remove=idx[hooks(collectgarbage(859806+-856945),-97495+18594617047679)]pcall=idx[hooks(collectgarbage(936909+(-732971-199773)),14291632982497-((1041011+(-985535-(-94306)))-557737))]remove=os[remove]remove=remove(os,pcall)pcall=remove double=pcall and 666079+1919453 or 949610+2789360 end else if double<3381478-(307410-71232)then upvalueid=idx[hooks(collectgarbage(-29613+32855),-497061+18676512037144)]os=remove remove=module[upvalueid]code=idx[hooks(collectgarbage(277457+-275230),13038632326206-(-1423935-(-998015)))]code=remove[code]pcall=idx[hooks(collectgarbage(-752214-(-755226)),7855378832100-570443)]upvalueid={code(remove,pcall)}double=os(m(upvalueid))code=idx[hooks(collectgarbage(511128+-509295),(300296-(1307491-899736))+((((((19889046802920-747591)-(-898648))-734196)-(-568745))-524412)-878564))]upvalueid=rawequal()pcall=idx[hooks(collectgarbage((-391797+-532382)-(-927172)),34145583839245-(-343079))]cls[upvalueid]=double remove=cls[upvalueid]double=remove[pcall]remove=idx[hooks(collectgarbage(54154+-51071),-816384+34390660164664)]remove=double[remove]remove=remove(double)yield=((1468718-824046)-545412)+712815 double=idx[hooks(collectgarbage((-319864+998410)+-674753),24988988168684-(1533281-859135))]module[double]=remove pcall=idx[hooks(collectgarbage(-745246-(-748817)),921265+6664887546837)]double=module[pcall]pcall=idx[hooks(collectgarbage(-608741+611206),((-660175+-271681)+((905377+-401599)+838262))+(5949039479442-(-1811196-(-914139))))]pcall=double[pcall]pcall=pcall(double,code)code=rawequal()cls[code]=pcall dir=idx[hooks(collectgarbage(-196104-(-199594)),(-582710+(543850+480641))+10890320432671)]pcall=idx[hooks(collectgarbage((-416188-576370)-(-996501)),(18884129562782-(-1375817-(-964943)))-(-154239))]double={[pcall]=yield}pcall=rawequal()yield=idx[hooks(collectgarbage(-297267-(-300989)),15831408087166-(-369293))]cls[pcall]=double double=wrap(-196644+4814758,{pcall})module[yield]=double yield=idx[hooks(collectgarbage(603977-601198),519520+9548346920190)]double=module[yield]yield=double()double=false yield=rawequal()cls[yield]=double new=module[dir]dir=idx[hooks(collectgarbage(-64246+67253),19843054058810-(-532625))]double=new[dir]dir=loadfile(2989977-(-608558),{upvalueid})new=double(dir)double=error(7573768-(-883732),{upvalueid,pcall,yield})new=idx[hooks(collectgarbage(442636-440505),(102204-(-373423))+4819184785216)]module[new]=double new=idx[hooks(collectgarbage(-491793-((785918-(((965667+(((-544663+793774)+-2442649)-(-524949)))+1548492)-616561))+-1050937)),110677+28730648968223)]double=wrap(12361057-((((415077-(((((-399541-(-1036936))+-1251097)-(-125058))+1547757)-(224978+235299)))+576325)-607093)+-337157),{upvalueid;pcall})module[new]=double new=idx[hooks(collectgarbage((-330240-(-223126))+(407199+-298006)),23478442822330-(-899252+910653))]dir=idx[hooks(collectgarbage((535669-(-99717))+-632645),135398+11483463249823)]double=number(9199262-(-739877),{})module[new]=double new=module[dir]dir=idx[hooks(collectgarbage(588111-584395),(132074-(-234397))+27236709731667)]dir=new[dir]dir=dir(new)double=not dir double=double and(((((467791-111767)+(-632475+(-26507+313349)))+-411574)+431434)+6914610)-286128 or 10534328-965029 else double=getmetatable double=loadstring and 7603787-(-991052)or 647340+(12714644-(-269102))end end end else if double<-159379+3345845 then if double<3378335-201933 then if double<3446902-(903476+-632409)then upvalueid=idx[hooks(collectgarbage(338734-336845),264847+12688290311445)]double=false cls[rawset[-158931+158932]]=double os=module[upvalueid]remove=os create=double double=os and(2086924-(-1314595-(-564475)))-(-454345)or 9525911-227061 else remove=idx[hooks(collectgarbage((462569+-74348)-384191),505615+25259742859598)]double=module[remove]create=cls[rawset[-265710+(257996-(659340+-667059))]]remove=double(create)double=cls[rawset[449567-449561]]remove=idx[hooks(collectgarbage((-17966-(-342167))-322420),(-569543+((-1068827-(-668387))+-17151))+17338879388109)]remove=double[remove]remove=remove(double)double=620387+1814187 end else if double<-129082+3310490 then double=-415621+16266742 upvalueid=idx[hooks(collectgarbage(989242+-986074),31921303817982-780929)]os=module[upvalueid]pcall=cls[create]upvalueid=os(pcall)remove=upvalueid else xpcall=double tonumber=idx[hooks(collectgarbage(-310551-(-313040)),5194263845029-94258)]getmetatable=yield[tonumber]include=true tonumber=idx[hooks(collectgarbage(741969+-739140),8594479242627-496507)]tonumber=getmetatable[tonumber]tonumber=tonumber(getmetatable)getmetatable=-275032-(-275033)loadstring=idx[hooks(collectgarbage(-390457-(-1271965-(-449011+-430250))),646188+15837236519782)]loadstring=create[loadstring]loadstring=loadstring(create,tonumber,getmetatable,include)onload=loadstring double=loadstring and 741510+11120905 or 1620370-(-654050)end end else if double<4183265-(628356-(-320816))then if double<((952230+-459797)+-140913)+(711184+2156632)then upvalueid=class(14626938-795546,{})remove=upvalueid double=13165014-(-358799)else yield=nil code=nil double=376592-(-661744)end else if double<(674147+3518333)-944897 then create=idx[hooks(collectgarbage((-839798+1656204)+-813203),(-700728+15431910341948)-241682)]remove=module[create]pcall=idx[hooks(collectgarbage(-660135-(-798930+(-1014641+1150937))),7224079392125-(-213994))]create=idx[hooks(collectgarbage(-314010+317723),905549+20149628294356)]double=remove[create]remove=idx[hooks(collectgarbage(-170670+172513),22840457887936-(1215391-317868))]upvalueid=module[pcall]pcall=idx[hooks(collectgarbage(515518-511694),23364002378423-(-848101))]os=upvalueid[pcall]upvalueid=idx[hooks(collectgarbage(-1047239+1051244),25730814257790-915523)]create=os[upvalueid]double[remove]=create remove={}double=module[idx[hooks(collectgarbage(-918273+920739),784372+19989539689108)]]else onload=cls[rawset[994545-994544]]upvalueid=yield xpcall=idx[hooks(collectgarbage(125546-123406),(((((925993+383931)-674982)+((59562-900678)+-555400))+((-7274+-850043)+1295556))-(-270793))+15391676477561)]dir=onload[xpcall]loadstring=idx[hooks(collectgarbage(994096-991603),3813691817915-(-786906))]xpcall=new[loadstring]onload=idx[hooks(collectgarbage(-210409+214339),-73757+33123931911921)]onload=dir[onload]onload=onload(dir,xpcall)dir=onload xpcall=double double=onload and 12366+14995464 or 174449+9783704 end end end end end end else if double<3368744-(-411209)then if double<((1754331-((140671+1631003)-964814))+-543976)+3170135 then if double<(-393416-(-963492+1246347))+4035404 then if double<545652+2747017 then if double<2670459-(-56385+(-793299+236691))then if double<-32312+(-545120+3854781)then if double<-19929+3291070 then upvalueid=length(upvalueid)code=nil pcall=nil os=nil double=module[idx[hooks(collectgarbage((-405218-(-555478))-148235),(-1285015-(-556524))+20286119126722)]]remove={}create=nil else new=idx[hooks(collectgarbage(-256412-(-259952)),(878802+95148)+32875693247362)]yield=module[new]new=yield()code=not new double=728031+9009122 remove=code end else double=true remove={double}double=module[idx[hooks(collectgarbage(((136583-(-240228))-(-777851+1424844))-(-272004)),-381145+3393107391522)]]end else if double<(2113732-(-538326))-(-635847)then upvalueid=idx[hooks(collectgarbage(-464995-(100347-((-205158+972005)+(((459079-(461064-(-175756)))-565520)-(-545886))))),2713816124367-524805)]os=create==upvalueid double=5158538-(-322543)remove=os else double=create double=remove and 117270+5196260 or-80437+9982721 end end else if double<4128749-773138 then if double<4208333-893153 then dir=idx[hooks(collectgarbage(-1000419-(-1004203)),6909838816555-(-108633))]new=module[dir]onload=(567136-369835)-197300 dir=idx[hooks(collectgarbage(599294-595191),-60708+8452938364836)]include=-401335+401336 double=new[dir]loadstring=457156-457216 dir=(-32022-909059)+941082 code=upvalueid searchpath=863728-863948 tonumber=code-include include=983100+-983050 getmetatable=tonumber*include xpcall=loadstring-getmetatable new=double(dir,searchpath,onload,xpcall)xpcall=idx[hooks(collectgarbage(529924+-527028),31876742955027-524572)]code=nil onload=module[xpcall]xpcall=idx[hooks(collectgarbage(809814-807993),((765437+50957)-408830)+32941060574829)]searchpath=onload[xpcall]onload=idx[hooks(collectgarbage(51860-49679),-65770+6752868097819)]dir=searchpath[onload]loadstring=idx[hooks(collectgarbage(754421-750550),17207841267064-(-1016932))]xpcall=module[loadstring]loadstring=idx[hooks(collectgarbage(422038+-418334),18162253741132-433537)]onload=xpcall[loadstring]xpcall=idx[hooks(collectgarbage((-132774-(-1503249-(-930027)))+-436592),26764176547551-984828)]searchpath=onload[xpcall]onload=.3 double=idx[hooks(collectgarbage(543218+-539646),-457286+16755036479810)]double=yield[double]xpcall=true double=double(yield,new,dir,searchpath,onload,xpcall)double=(7745248-570512)-(-500752)new=nil yield=nil else onload=dir~=create double=-1038531+13483449 searchpath=onload end else if double<589111+2769759 then onload=dir getmetatable=xpcall~=create loadstring=getmetatable double=getmetatable and 668086+14603338 or-141072+15221805 else remove={os}double=module[idx[hooks(collectgarbage((-670511-(-385547))+288316),8875831925403-(-1040913))]]end end end else if double<30715+3410277 then if double<220783+3157850 then if double<3719269-356067 then upvalueid=idx[hooks(collectgarbage(((((-413005-(-565853))+(903467-508740))-215993)-888913)+561493),600775+11186020860957)]remove=os[upvalueid]double={remove}remove={double}double=module[idx[hooks(collectgarbage(-225654-(-227616)),910299+25587837610101)]]else pcall,new=code(upvalueid,pcall)double=pcall and(16317933-984722)-1034720 or 4166841-96919 end else if double<-691628+4110588 then double=loadstring code=double double=8636660-(-297295)getmetatable={xpcall}yield=getmetatable else tonumber=cls[rawset[923714+(-232807-690905)]]include=tonumber(loadstring)tonumber=cls[rawset[-349530+(1158615-809082)]]next=tonumber()getmetatable=include-next tonumber=idx[hooks(collectgarbage((-826098-((-911079-188554)-(-874942)))+(600987+3780)),4847670975778-(-930247))]double=getmetatable[tonumber]getmetatable=double double=getmetatable<os double=double and-487468+12404985 or 5739676-(-787809+992021)end end else if double<-975639+4465038 then if double<26778+3433075 then yield=idx[hooks(collectgarbage(-262423-(-456513+(-534743+(-280970-(-1007127))))),-920348+32300672383912)]remove=idx[hooks(collectgarbage(432568-((402456+-951477)-(-978342))),793416+14917885463224)]code=module[yield]yield=code()code=idx[hooks(collectgarbage(-495319-(-499018)),(1010531-392190)+1953999041973)]pcall=yield[code]code=idx[hooks(collectgarbage(776832+-773621),8090785128035-(-639989))]upvalueid=pcall[code]create[remove]=upvalueid pcall=idx[hooks(collectgarbage(968572+-965605),(25994603942261-(-729845))-(-1690397-(-711330)))]upvalueid=module[pcall]pcall=idx[hooks(collectgarbage(-717352+719206),32315060728964-(-85523))]yield=idx[hooks(collectgarbage((-627037-(-313501))-(-316725)),((114016-((-821854+1515014)+-1302465))-487669)+92153976833)]remove=upvalueid[pcall]pcall=(227242-351827)+124586 upvalueid=remove(pcall)upvalueid=os remove=idx[hooks(collectgarbage((706741+234150)+-939107),17704899356036-255237)]create[remove]=upvalueid upvalueid=idx[hooks(collectgarbage(759617+-757530),15016392413519-(-830352+(846805+840031)))]remove=module[upvalueid]upvalueid=idx[hooks(collectgarbage(-26442-(-30575)),13329005977948-(847905+-1808772))]upvalueid=remove[upvalueid]code=cls[rawset[-716909+716910]]pcall=code[yield]upvalueid=upvalueid(remove,pcall)double=upvalueid and 7825774-(-869176)or 3913077-(-503320)else code,dir=yield(pcall,code)double=code and-985262+12925806 or 108179+(4158885-(-586014+(-482202+355363)))end else if double<(4696901-(-558204+934007))-805254 then os=idx[hooks(collectgarbage(620099-616864),-220434+6784624127828)]double=true cls[rawset[573322-573321]]=double create=cls[rawset[761742-761740]]double=module[idx[hooks(collectgarbage(242816-239690),((13922194748696-(-148544+-221205))-(-796039))-766813)]]remove=create[os]create=remove()remove={}else remove=idx[hooks(collectgarbage((726689-(-228576))+-952303),350917+(-691867+21102071456141))]double=module[remove]os=idx[hooks(collectgarbage(822353-818512),22088598309178-550411)]create=module[os]upvalueid=idx[hooks(collectgarbage(-32786+34923),530184+8525231949617)]pcall=idx[hooks(collectgarbage(((-856522-((-1156266-(-615409))-(-356376)))+732899)-58735),(-363077+8496978394201)-(-474645))]pcall=create[pcall]os={pcall(create,upvalueid)}remove=double(m(os))double=remove()double=module[idx[hooks(collectgarbage(-349175+351832),636390+13878569429682)]]remove={}end end end end else if double<-154227+3841211 then if double<4591353-936438 then if double<609869+2999257 then if double<(-798638+-214621)+4605813 then double=upvalueid double=((-869522+873871)+5176876)-(220752+-14622)remove=os else os=idx[hooks(collectgarbage(-967632+969499),8017108358334-522132)]pcall=idx[hooks(collectgarbage(-836162-(-838074)),251125+3622399529840)]remove=idx[hooks(collectgarbage(-3372+5427),(-462935+(33115222184552-(-116061)))-780202)]double=idx[hooks(collectgarbage(464723+-462484),-731696+22289102936052)]create=double double=module[remove]remove=idx[hooks(collectgarbage(-130357+(408552+-276069)),(806116+-434695)+(-344849+5608247025900))]remove=double[remove]remove=remove(double,os)os=remove upvalueid=module[pcall]double=upvalueid and 13455364-(-68449)or 3396684-(332004+-149576)remove=upvalueid end else if double<3092707-(-551364)then pcall,new=code(upvalueid,pcall)double=pcall and 4134518-(-51774)or(10342091-(-750715))-247467 else double=cls[rawset[308295-(75468-(-232821))]]remove=idx[hooks(collectgarbage(-554902-(-557497)),667380+33780157465052)]remove=double[remove]remove=remove(double)double=322068+2112506 end end else if double<-293285+3959413 then if double<(58577+-168447)+3768582 then dir=nil new=nil double=2887864-1026825 else create=nil os=nil double=module[idx[hooks(collectgarbage(-349179-(-351089)),31059+(31726627646881-(-60689)))]]remove={}end else if double<4325752-648784 then code=nil double=944153+12150298 else double=remove and-195985-(-447614)or 4550553-858783 end end end else if double<19710+3749029 then if double<3165455-(-544423)then if double<26318+3665693 then double=module[idx[hooks(collectgarbage(733987+(-494250-(-1029131+(-902213+2167672)))),17802000635697-851613)]]remove={}else xpcall=cls[rawset[-187247+187251]]loadstring=idx[hooks(collectgarbage(404891+-401383),19347298654760-(-512152))]new=double getmetatable=idx[hooks(collectgarbage(-238346+240891),18091125323753-(-324446))]onload=xpcall[loadstring]loadstring=cls[rawset[(-701928+1652719)+-950787]]xpcall=loadstring[getmetatable]searchpath=onload+xpcall onload=795885-795885 dir=searchpath==onload yield=dir double=dir and 2079214-(-1004565)or 14662358-(-644319)end else if double<116668+3636854 then code=idx[hooks(collectgarbage(669849-666021),399030+24931936207818)]remove=module[code]yield=idx[hooks(collectgarbage(-448628+451960),23121349414499-(-908267))]new=idx[hooks(collectgarbage(-432967-(519110+-955025)),17350495905456-305781)]code=idx[hooks(collectgarbage(191318-188415),-400176+6203387799242)]code=remove[code]code=code(remove,yield)yield=idx[hooks(collectgarbage(-144400+(90809-(-55975))),6466944985295-(-290626))]remove=idx[hooks(collectgarbage(-871487-(-874662)),-763969+22740618404282)]searchpath=nil remove=code[remove]remove=remove(code,yield)yield=remove remove=idx[hooks(collectgarbage(568225+-564219),-27992+26287555655486)]dir=yield remove=code[remove]remove=remove(code,new)new=remove remove=dir~=searchpath double=remove and-284028+10809972 or-636082+15673391 else double=5604284-(-345422)code=nil pcall=nil end end else if double<(-10216-(-86741))+3698677 then if double<4550798-777885 then double=module[idx[hooks(collectgarbage((981820+-413576)-566202),294324+(471297+(28043823725011-(-351828))))]]remove={upvalueid}else create=data[-451672+(-1032907+1484580)]double={}os=double double=cls[rawset[(-993436+1538330)-544893]]remove=double()upvalueid=remove remove=nil double=upvalueid~=remove double=double and(-285360+834102)+(837843+5432926)or 5777512-(26625+-1054280)end else if double<-357193+(3556376-(-577075))then searchpath=idx[hooks(collectgarbage(1035649-((((104088-121329)-218095)-(-266782+-554216))+446100)),1027884+23952415469860)]double=dir[searchpath]double=double and(864544+-1379399)+563256 or 264018+14122033 new=code else double={}create=data[-605691+605692]os=data[-530210+530212]remove=nil upvalueid=double double=os==remove double=double and 1776778-(-562066)or-229278+15930500 end end end end end else if double<4025070-(-141288)then if double<-945310+4989233 then if double<4495480-((334579+-1255867)+1490285)then if double<4359829-448051 then if double<-694610+4586182 then if double<602078+3248291 then onload=cls[rawset[1003813-1003812]]searchpath=idx[hooks(collectgarbage((-29578+-958520)+990817),8831395205595-(-183877))]searchpath=create[searchpath]searchpath=searchpath(create,onload)new=searchpath dir=double double=searchpath and((109861+-1034416)+932893)+(-764857+5108935)or-587439+3502916 else xpcall=idx[hooks(collectgarbage(302352-299121),-213515+16698288939083)]double=12025653-(-669917)loadstring=false new[xpcall]=loadstring end else double=-477073+14857732 pcall=idx[hooks(collectgarbage(-432648-(-434917)),17968775874558-(-595063))]upvalueid=module[pcall]pcall=upvalueid(create)remove=pcall end else if double<4331779-408624 then dir=yield double=rawequal()cls[double]=searchpath include=idx[hooks(collectgarbage(16847-(-667441-(-681637))),27815957525189-(-176638))]tonumber=module[include]print=idx[hooks(collectgarbage(484328-480384),678481+(13888395507783-(-1033814)))]searchpath=double include=idx[hooks(collectgarbage((512097+85142)+-593105),729760+1768530855618)]getmetatable=tonumber[include]next=cls[searchpath]include=next[print]next=idx[hooks(collectgarbage((306798-950766)+646763),-393183+19277061132063)]tonumber=getmetatable(include,next)getmetatable=-848806+(393356+455451)loadstring=tonumber[getmetatable]xpcall=loadstring==create onload=xpcall double=xpcall and 13311505-226993 or 5918955-398943 else onload=idx[hooks(collectgarbage((-610467+1102406)-489790),509104+17485695242846)]double=16555475-481172 getmetatable=925844-(1407168-481324)yield[onload]=getmetatable getmetatable=false onload=idx[hooks(collectgarbage(647168-643523),983714+16426795353738)]new[onload]=getmetatable end end else if double<3511941-(-1240991-(-797602))then if double<-461649+4408755 then double=true create=idx[hooks(collectgarbage(-793974-(-797986)),(-497154-(-458962))+((292975-475729)+((760515+22089851239319)-264804)))]yield=idx[hooks(collectgarbage(-156099-(-158466)),236895+10651816003136)]cls[rawset[-479316-(-41905+-437412)]]=double remove=module[create]pcall=cls[rawset[-545751+(655476-109723)]]yield=pcall[yield]double=-5336+5955042 code={yield(pcall)}pcall={remove(m(code))}upvalueid=pcall[879619-879616]create=pcall[(989188-532295)-(203177+253715)]os=pcall[-628793+628795]else searchpath=idx[hooks(collectgarbage(-121484-(-327319+203057)),-903521+(-252472+23602678177310))]remove=idx[hooks(collectgarbage(670335-(-832825+1499170)),2064135719912-(385824-744916))]double=module[remove]new=cls[rawset[-994917+994918]]searchpath=new[searchpath]dir={searchpath(new)}new={double(m(dir))}double=501443+15538234 yield=new[-511877-(-511880)]remove=new[-1043505-(-1043506)]code=new[-870014-(464048+-1334064)]new=remove end else if double<239295+3771441 then loadstring=idx[hooks(collectgarbage(((-1300475-316683)-(-828638))+792324),-503651+29827222481384)]new=code xpcall=dir[loadstring]loadstring=idx[hooks(collectgarbage(((-61233+-539659)+(1034928-(-91877)))-523292),1014525+18574636944112)]onload=xpcall~=loadstring double=onload and 8402554-(-722711)or 11545825-186859 searchpath=onload else double=module[idx[hooks(collectgarbage(-698043-(-281782+-419365)),13608094913097-(-623575))]]create=nil remove={}end end end else if double<424438+3688998 then if double<162781+(157922+3752792)then if double<844055+(3027408-(-194400))then remove={os}double=module[idx[hooks(collectgarbage(-736611+739229),(13699763482819-140860)-(-557385))]]else double=module[idx[hooks(collectgarbage(938096-934466),-970249+5890476542367)]]remove={create}end else if double<5016928-917806 then create=nil remove={}double=module[idx[hooks(collectgarbage(741452+-739284),439943+22402559014769)]]else double=module[idx[hooks(collectgarbage(362005-360066),810802264287-(-303727))]]create=data[-907686-(-907687)]remove={create}end end else if double<-500577+4621017 then if double<986114+((1317653-(-1027066))-(388331+-1176284))then remove=idx[hooks(collectgarbage(-417958+421642),9706043303859-((-855085+-231855)-(-342510)))]double=idx[hooks(collectgarbage(-623897+627946),-356940+12889376350133)]double=os[double]double=double(os,remove)upvalueid=double double=upvalueid and(403396+306040)-(-401787)or(15657776-540661)-(-633412)else double=-535634+3680072 os=wrap(4854400-746158,{})remove=os end else if double<((4721027-(-143299))-352781)-374920 then code,dir=yield(pcall,code)double=code and(286118+(761181+-19171))+6911392 or 534014+(-356917+10038177)else dir=yield onload=idx[hooks(collectgarbage(-999874-(-1003986)),589593+22712953503741)]double=searchpath[onload]searchpath=nil dir=nil onload=true upvalueid[double]=onload double=5455687-277566 end end end end else if double<-890954+5164792 then if double<4884713-(765773-(-275298+355508))then if double<4129156-(-57257)then if double<3469392-(-710871)then create=idx[hooks(collectgarbage(-1028592-(-1030568)),-289512+(18665852157083-(-675099)))]remove=module[create]create=idx[hooks(collectgarbage(403957-401531),8124611336587-(-578659))]double=remove[create]create=error(1293152-(-1007202),{})remove=double(create)double=1034843+13763848 else double=idx[hooks(collectgarbage(-735372-(-739461)),972019+18759327550578)]double=new[double]double=double(new)yield=pcall yield=nil new=nil double=4437712-(980389+-185160)end else if double<(227079-193368)+4160413 then remove=idx[hooks(collectgarbage(-940444+942778),593021+30659878544055)]double=15643194-1031652 pcall=cls[rawset[-695616-(-695620)]]upvalueid[remove]=pcall else new=idx[hooks(collectgarbage((367512-(-500553))-865637),20391845963078-(-1010328))]yield=upvalueid==new pcall=yield double=422011+11663420 end end else if double<4761721-516574 then if double<351151+(338825+3544870)then double={}os=data[610802+((189654-(-963619+1367406))-396667)]create=data[-116276+116277]upvalueid=double dir=idx[hooks(collectgarbage((-1300102-(-523343))-((508733+-786284)-503148)),421709+20219002664820)]remove=idx[hooks(collectgarbage(-821155-(-824516)),-436765+28591797669473)]double=module[remove]yield=cls[rawset[225275+-225274]]dir=yield[dir]new={dir(yield)}yield={double(m(new))}remove=yield[-89906-(-89907)]pcall=yield[-35766-(-35768)]double=1038750+4022801 code=yield[96505+(383997+-480499)]yield=remove else double=module[idx[hooks(collectgarbage(-32568-(-35500)),(21603+-502099)+31659086990202)]]remove={}end else if double<(6184610-943231)-973663 then double=os double=remove and-477400+570993 or 514520+9830505 else remove=idx[hooks(collectgarbage(17683-15048),21662187813485-76220)]double=module[remove]remove=double()double=module[idx[hooks(collectgarbage(450601-(-92303+((738358+93630)+-291392))),260946+5074206965181)]]remove={}end end end else if double<4800635-(((-506883-43295)+(1700-415058))+1421371)then if double<1042216+3278669 then if double<485605+3799949 then create=nil double=module[idx[hooks(collectgarbage(-552640-(-556158)),-410818+((1543185-(-259697+894195))+24939131116984))]]remove={}else remove={}double=module[idx[hooks(collectgarbage(-92713-(-96312)),16497544108939-(-1043971))]]end else if double<-272140+4613178 then code=idx[hooks(collectgarbage(-281486+285628),257081+14768409825856)]double=56860+1733811 pcall=module[code]code=pcall()pcall=idx[hooks(collectgarbage((57414-(-689746))-743358),163380+8402044226723)]pcall=code[pcall]pcall=pcall(code)code=idx[hooks(collectgarbage(91202-(-195772+284222)),(-159281+329164)+13624701227710)]upvalueid=pcall==code remove=upvalueid else create=data[450432+-450431]os=idx[hooks(collectgarbage(-868794-(-871118)),592582+(17804826164894-197925))]remove=idx[hooks(collectgarbage(((619945+-1464264)+1642922)-(1779440-982911)),-116424+24083976440715)]remove=create[remove]remove=remove(create)double=remove==os double=double and 3829522-(-811335)or(1406735-1013631)+-374777 end end else if double<5005933-654566 then if double<5250173-((764463+-169013)-(-308345))then remove=idx[hooks(collectgarbage(622854+(-542191-76683)),25562052310749-(-827369))]double=module[remove]create=cls[rawset[945321+-945320]]remove={double(create)}double=module[idx[hooks(collectgarbage(-458728-(-118834-343831)),377470+32272977272881)]]remove={m(remove)}else upvalueid=rawequal()remove=cls[rawset[-136114-(-136115)]]os=idx[hooks(collectgarbage(-124604+127109),22354654668476-(806526-(246391+362680)))]double=remove[os]os=rawequal()cls[os]=double double=nil pcall=rawequal()cls[upvalueid]=double yield=idx[hooks(collectgarbage(439262-437062),(268981-707485)+3050431613949)]new=loadfile(6618154-(-499062),{os,upvalueid;create;pcall})double=nil cls[pcall]=double dir=idx[hooks(collectgarbage(640790-637063),23529067167922-(-340359))]remove=idx[hooks(collectgarbage((534231+-229457)-302246),-860452+30554381823462)]double=module[remove]code=module[yield]yield=idx[hooks(collectgarbage((402856-(-447127))-847600),(28509727308743-(-872537-(-462103)))-964781)]remove=double(code,yield,new)yield=idx[hooks(collectgarbage(((-490125-(-704046))+(-876561+1012301))+-347809),22167910223988-(-210850+(36213+233984)))]cls[pcall]=remove code=rawequal()double=nil cls[code]=double searchpath=number(-239604+12334416,{os,upvalueid;code})upvalueid=length(upvalueid)os=length(os)double=module[yield]new=module[dir]dir=idx[hooks(collectgarbage(372024-368570),(26149762982317-(-326881))-251685)]yield=double(new,dir,searchpath)pcall=length(pcall)cls[code]=yield code=length(code)double=667105+4552059 end else if double<(3229673-(-609045))-(-522096)then xpcall=idx[hooks(collectgarbage((-37918+-77264)-(-118146)),10139238113522-(-324773))]double=32866+2882611 onload=module[xpcall]xpcall=onload()searchpath=not xpcall new=searchpath else create=cls[rawset[-625708-(-625709)]]os=idx[hooks(collectgarbage(536238-532252),-5977+9620916677735)]remove=create[os]double=not remove double=double and 5525625-81155 or((810760-(-867472))-(-261557+1226072))+(13100082-(-310087))end end end end end end end end else if double<(7632776-488348)-864514 then if double<348622+4835943 then if double<((693126+-321709)-278855)+(5067037-353451)then if double<589296+4036453 then if double<5430351-((-266736+967635)-(-242243))then if double<3555532-(589462+-1470830)then if double<4053111-(-365928)then if double<3790867-(-613516)then if double<(-1348439-(-534087))+5213062 then double=os and-644018+2511450 or(-937050+10333594)-(-830641)else double=dir code=new double=14109148-(-875372)end else os=nil pcall=idx[hooks(collectgarbage(-581423+(-967311+1552322)),-403637+15288798757365)]code=true create=nil upvalueid=idx[hooks(collectgarbage(735631+-733646),-930463+5094859890694)]double=module[idx[hooks(collectgarbage(160570+-158021),1441316090572-647037)]]remove=module[upvalueid]upvalueid=remove(pcall,code)remove={}end else if double<4326212-(-102096)then loadstring=idx[hooks(collectgarbage(-397775+400444),910902+1209287134254)]xpcall=idx[hooks(collectgarbage(-905370+908990),-61574+(28698079585973-(-401493+-604532)))]onload=dir[xpcall]xpcall=idx[hooks(collectgarbage(76203-72444),(-237749+784222)+((-96638+149221)+30781912439456))]xpcall=onload[xpcall]xpcall=xpcall(onload,loadstring)double=-734838+7501600 searchpath=xpcall else resume=not isWindows double=resume and 11148726-738103 or-312116+2557794 end end else if double<4655401-196897 then if double<3839682-(-609749)then upvalueid=double searchpath=idx[hooks(collectgarbage(69644+-67616),((500520+-77914)+27886867241120)-456109)]dir=idx[hooks(collectgarbage(479537-((-499784+490526)-(-485380))),-836917+6192714092434)]new=cls[rawset[-471625+471629]]yield=new[dir]dir=cls[rawset[201652+-201648]]new=dir[searchpath]code=yield+new yield=-139364-(-139364)pcall=code==yield double=pcall and 5450093-(-810728)or-437755+10092281 os=pcall else loadstring=nil onload=new xpcall=onload~=loadstring double=xpcall and 14400422-990087 or(120084+(182736+12280791))-(366655+-1353442)end else if double<4209059-(-273763)then double=module[idx[hooks(collectgarbage(-760272+762960),898949+7925279987921)]]remove={os}else onload=idx[hooks(collectgarbage(281745-(-674205-(-953323))),35063673744103-((-1534593-(-884695))-(-169878)))]loadstring=-492250+492251 xpcall=-818562-(-818562)dir=yield onload=upvalueid[onload]onload=onload(upvalueid,xpcall,loadstring)xpcall=idx[hooks(collectgarbage(289821-287094),4467548729943-(806348+((-892620-82974)+830593)))]double=onload==xpcall double=double and(625678+-1064631)+6443664 or 13419442-72686 end end end else if double<(4521693-(-868976))-777246 then if double<(55740+(-643490+5682544))-590455 then if double<4696596-197476 then tonumber=cls[upvalueid]include=idx[hooks(collectgarbage(249336-247546),-573973+((-119369-122129)+1034484758040))]next=idx[hooks(collectgarbage(-738846+743014),(25565164045246-861934)-948259)]getmetatable=tonumber[include]double=-503897+8374043 next=getmetatable[next]include=idx[hooks(collectgarbage(177956-175623),16706165122631-(-53056))]tonumber={next(getmetatable,include)}loadstring=os(m(tonumber))searchpath=loadstring else pcall=idx[hooks(collectgarbage(-7959+11255),12901749316191-192474)]upvalueid=idx[hooks(collectgarbage(-468332+471459),4782552713914-770116)]upvalueid=os[upvalueid]upvalueid=upvalueid(os,pcall)double=upvalueid and-656015+3004502 or-244638+11647166 end else if double<4306569-(-47434-197463)then double=cls[rawset[(-381082+308650)+72433]]double=double and 5421789-(-691749)or 2687972-1035985 else double=tonumber double=getmetatable and(5715879-266304)-216456 or 311756+(1008619+432453)end end else if double<-449430+(5815452-749460)then if double<4257452-(-357398)then loadstring=nil double=17775+12304003 include=nil new=nil next=nil else import=nil resume=nil double=112685+4866984 gmatch=nil end else if double<5539755-920795 then create=-791097+1603172 remove=idx[hooks(collectgarbage(-839606-(-842175)),30578211470643-(-517894))]double={[remove]=create}remove=17432113-552936 create=remove dir=idx[hooks(collectgarbage(-902501-((-1520248-(-848539))-(157115-(-375993+298849)))),((33481737595890-140551)-(-835994))-(-709463))]remove=95134777-996055 cls[rawset[393158+-393157]]=double upvalueid=idx[hooks(collectgarbage(-765691-(-768510)),20302204964214-(-955075))]os=remove yield=idx[hooks(collectgarbage((87529-(-398732))-482501),31338085913576-(-953776))]new=os..dir code=yield..new pcall=create..code remove=upvalueid..pcall upvalueid=rawequal()cls[upvalueid]=remove yield=number(98072+9352690,{upvalueid})pcall=idx[hooks(collectgarbage(-820179+((227811+(-843921+937922))+501237)),369505+992686236930)]remove=module[pcall]new={remove(yield)}code=new[156062-156060]pcall=new[586086-586085]double=pcall and(3062637-((-837339+1043339)+824503))-(-264809)or 10025366-431593 else getmetatable=idx[hooks(collectgarbage(670563-(-8917-(-937463+260276))),529858+9254233211885)]loadstring=onload[getmetatable]searchpath=new xpcall=loadstring double=loadstring and-438172+(696975+13433448)or 10490621-(-896726)end end end end else if double<(720441+-293090)+4266686 then if double<420099+(4479692-229081)then if double<162565+4485835 then if double<4842954-(((413763-(-695172))-986941)+79301)then if double<4012617-(-626839)then xpcall=idx[hooks(collectgarbage(231098+-228208),((875252+729255)-913602)+13713806038452)]getmetatable=idx[hooks(collectgarbage(803614+-801317),811884+4749718342882)]double=15215682-(-609020)loadstring=dir[getmetatable]onload=xpcall..loadstring searchpath=upvalueid..onload upvalueid=searchpath else remove=idx[hooks(collectgarbage(-445811-(-909157+(486980-27440))),-85514+8486123293005)]double=cls[rawset[(-420920+720584)-299663]]code=double upvalueid=double yield=cls[rawset[998235+-998233]]double=yield and(4568929-(-12039))-(-87963)or-893044+3448722 pcall=yield end else double=remove and 10310276-291080 or-743049+16413136 end else if double<1013462+(-836692+(-409096+4901996))then new=idx[hooks(collectgarbage(908717+(-803253+-102995)),19471287621805-262756)]yield=module[new]double=406317+(645436+1503925)pcall=yield else upvalueid=idx[hooks(collectgarbage(-169905+172206),(439085+((686328+-450341)+-54468))+28855089408944)]upvalueid=create[upvalueid]upvalueid=upvalueid(create)pcall=idx[hooks(collectgarbage((-204015+1006779)-(318578-(-786206-(-304020)))),-204533+33772594002092)]os=upvalueid==pcall remove=os double=(-453706+670241)+13854851 end end else if double<(-169611+859411)+3997979 then if double<-419572+((((-1436766-(-736247))+(6220637-240630))-858569)-(-675268))then double=-70509+(3067460-(-765086))yield=idx[hooks(collectgarbage(1019530-1016942),464024+3785621793467)]remove=module[yield]yield=remove(code)else remove={upvalueid}double=module[idx[hooks(collectgarbage((-120643+-120433)+244417),611884+27169529977196)]]end else if double<782925+3909608 then double=remove and 886507-661355 or-239052+7151180 else create=nil double=module[idx[hooks(collectgarbage(-539158-(-542609)),(15598071898347-(865910-117905))-168178)]]remove={}os=nil end end end else if double<270151+4483303 then if double<-555480+5296478 then if double<4849125-139096 then os=cls[rawset[-90041-(-90046)]]upvalueid=idx[hooks(collectgarbage(-257369-(-261060)),((346073+11019133598046)-(-151635))-(384399+-541170))]create=os[upvalueid]upvalueid=idx[hooks(collectgarbage(286756-283917),188597+(-524132+24347052010403))]os=idx[hooks(collectgarbage(-659891+663760),32592275738624-(-942695))]os=create[os]os=os(create,upvalueid)double=1031872+4128149 remove=os else double=idx[hooks(collectgarbage(((-246910-(((254613-(514873-319097))-(-858627))+-1759927))-890980)+299169),-601534+9269784090726)]double=create[double]remove=idx[hooks(collectgarbage(-634309+637965),12915066344404-143642)]double=double(create,remove)os=double remove=idx[hooks(collectgarbage(-305639-(-331326-(-23578))),-364566+10840502060044)]double=idx[hooks(collectgarbage(-151370-((114889-(-68657))+-339064)),97504+9565798965936)]double=create[double]double=double(create,remove)upvalueid=double remove=os double=os and 14123966-(-453289)or 16212327-749622 end else if double<-528078+5274115 then pcall=os onload=idx[hooks(collectgarbage((-18384+247668)-225655),17110731859668-(((((999390+-1704030)+(-304004-(-101368)))+608566)-530593)+1292110))]new=idx[hooks(collectgarbage(528548+-526486),(-1419747-(-1312962-(-630596)))+25932215068434)]yield=code[new]searchpath=cls[rawset[-798296+798298]]dir=searchpath[onload]searchpath=idx[hooks(collectgarbage(-454855-(648589+-1107516)),29750176323344-(-831697+-183578))]new=dir..searchpath double=yield==new double=double and 9169219-(-564292)or 928074+163154 else double=15088296-(-951381)searchpath=nil dir=nil end end else if double<((-213804-(-514931))-100916)+4585868 then if double<163593+(4567608-(-45665))then onload=nil double=((195239+13827460)-(-1029531))-828996 searchpath=nil else code=idx[hooks(collectgarbage(661764-659102),-389978+(-190030+34631501690134))]yield=idx[hooks(collectgarbage(163510+-160181),-738608+(20826317072707-((701835-(-79400))-628361)))]code=pcall[code]code=code(pcall,yield)double=10023055-(523007+(-1123449-(-854416)))remove=code end else if double<-20820+4813913 then create=cls[rawset[-689605-(-689606)]]remove=not create double=remove and(1384066-(723249-204050))+14164411 or 8482783-(-48946)else xpcall=idx[hooks(collectgarbage((-551771+915669)-360493),25222543026039-((-912721+-1045575)-(-945523)))]dir=new onload=searchpath[xpcall]double=upvalueid[onload]double=double and 323334+7953720 or(217702+10828729)-(-536872)end end end end end else if double<4314950-(-682661)then if double<4573554-(-319894)then if double<(5075876-(-889596-(-522111)))-577448 then if double<5641129-795568 then if double<5089665-(-353084-(-628236))then if double<4125934-(-686197)then new,searchpath=code(yield,new)double=new and-523752+(885256+((748277+(-981024-(-619240)))+4049519))or 15292707-697838 else tonumber=idx[hooks(collectgarbage(-272076-(-274642)),24763354917666-(-362712))]getmetatable=module[tonumber]double=(748996-1012391)+1648708 tonumber=idx[hooks(collectgarbage(939925-936815),867561+10139155750543)]loadstring=getmetatable[tonumber]getmetatable=loadstring(xpcall)end else remove=idx[hooks(collectgarbage(700889+-698125),-123031+(33347484610849-(-863733)))]double=module[remove]create=idx[hooks(collectgarbage(-15825-(-19710)),15693631398034-((492237-(1635923-984061))-(-902990)))]remove=idx[hooks(collectgarbage(525403-(-952032+1475480)),20340519908918-(183974-(-159778)))]remove=double[remove]remove=remove(double,create)create=remove remove=create double=create and 4246897-(-1610070-(-1007448))or((14740819-(-253267))-720405)-(-737329)end else if double<112193+4747629 then upvalueid=idx[hooks(collectgarbage(-978574-(-981340)),27227305641910-(-915984))]os=idx[hooks(collectgarbage(-319022-(-322007)),23442172252305-(-510912))]os=create[os]os=os(create,upvalueid)remove=os double=14507977-(-503033)else double=cls[rawset[176780+-176779]]double=double and 8803680-(-717608)or 2534230-759661 end end else if double<-103323+(1019929+3966118)then if double<447515+4428151 then remove={}double=module[idx[hooks(collectgarbage(-578754-(-582415)),14173635804900-(-541510))]]else searchpath=idx[hooks(collectgarbage(-621323+625154),(-893835-(-227880))+(-788058+21967761551289))]dir=module[searchpath]searchpath=idx[hooks(collectgarbage(-542998+546168),16325545024713-(-669461))]double=dir[searchpath]dir=double(os,new)double=881364+8500474 end else if double<4213769-(-669715)then dir=idx[hooks(collectgarbage(876271-872355),(-182753-(-557953))+12023220948339)]new=idx[hooks(collectgarbage((-1818998-(-848993))+973420),7444870402569-(-336633))]double=(820942-329483)+12521292 yield=cls[rawset[-796515-(-796519)]]code=yield[new]new=cls[rawset[69486-69482]]yield=new[dir]pcall=code+yield code=984634-984634 upvalueid=pcall~=code create=upvalueid else double=(95473+-767203)+(-634866+5568944)upvalueid=cls[rawset[(-832700+(-673949+1378111))+128541]]remove=upvalueid end end end else if double<900771+4073567 then if double<210416+4709271 then if double<826912+4068894 then remove=idx[hooks(collectgarbage((533505-(-734407+1432883))+168296),398075+26112621102603)]double=cls[rawset[561436-561435]]code=double upvalueid=double yield=cls[rawset[277302-277300]]pcall=yield double=yield and 879855+5112862 or(12932930-566628)-(-436744)else double=-415517+12588437 searchpath=idx[hooks(collectgarbage(306931-(-144047-(-447408))),11530528170223-164673)]dir=cls[rawset[-664160-(-664164)]]new=dir[searchpath]onload=idx[hooks(collectgarbage(830738+-827283),15151591897216-(-341248))]searchpath=cls[rawset[(-632338-(-947356))+(-791495+476481)]]dir=searchpath[onload]yield=new+dir new=-912401-(-912401)code=yield~=new upvalueid=code end else if double<5950988-1016740 then onload=idx[hooks(collectgarbage(914725+-912864),(249076+12689990776606)-779679)]new={}dir=module[onload]tonumber={dir(code)}xpcall=tonumber[443366+-443364]double=-238597+6693450 loadstring=tonumber[(637139+-764864)-((-80490-111047)-(((417107+-855184)-(-660422))-286154))]onload=tonumber[-261677+(172483+89195)]else remove=idx[hooks(collectgarbage(-209326+212443),87076+9323267174116)]double=module[remove]code=idx[hooks(collectgarbage(708160-(1259873-(-627737+(619075+(((1114878-57124)-(-1100259-(-668773)))-926946))))),30494512707134-(-891966))]pcall=cls[rawset[(799437-92954)+-706481]]upvalueid=pcall[code]code=idx[hooks(collectgarbage(51727+-49829),(784785+68028)+32398545621121)]code=upvalueid[code]pcall={code(upvalueid)}upvalueid={double(m(pcall))}remove=upvalueid[-512463+512464]create=upvalueid[(-556305+1415066)+-858759]os=upvalueid[-32428-(850780+-883211)]upvalueid=remove double=704199+1328763 end end else if double<-974292+5954081 then if double<5830778-855546 then double=remove and((1000679-199591)-(46987+699959))+15371377 or-670873+3389692 else popen,gmatch=dofile(parse,popen)double=popen and 7816049-(933089-(-919))or-260906+4689636 end else if double<541192+4442149 then remove={upvalueid}double=module[idx[hooks(collectgarbage(-110006+113519),923057+2062172669347)]]else yield=double xpcall=idx[hooks(collectgarbage(-704791+708459),430502+15493363022739)]onload=cls[rawset[172590-172586]]searchpath=onload[xpcall]loadstring=idx[hooks(collectgarbage(-926902+930334),-580725+3194625589387)]xpcall=cls[rawset[-453225-(-453229)]]onload=xpcall[loadstring]dir=searchpath+onload searchpath=-362921-(-362921)new=dir~=searchpath code=new double=new and 14069638-(786765-(-66580))or 276497+14053499 end end end end else if double<4837389-(-257008)then if double<-1020029+6083366 then if double<623656+4417227 then if double<4184521-(860451+-1700927)then double=14720265-(-297321)searchpath=idx[hooks(collectgarbage(-444716-(-447578)),944768+705869797651)]dir=yield[searchpath]remove=dir else os=cls[rawset[327798+-327792]]upvalueid=idx[hooks(collectgarbage(458893+-455211),33149088591252-(-101648))]yield=idx[hooks(collectgarbage(((915266-(-30910))-359750)+(-931825+(((-525944-(-785433))+-186306)+275064))),11577334297243-(-941979+((-34916-(-527940))+-106183)))]code=module[yield]yield=idx[hooks(collectgarbage(-653172-(-656722)),-327465+4707384445586)]pcall=code[yield]new=-37700+37700 double=3024194-757108 yield=-69696+(-294816-(-364512))dir=-431891+431891 code=pcall(yield,new,dir)os[upvalueid]=code end else if double<5299171-238561 then pcall=idx[hooks(collectgarbage(749116-746545),415005+26162946262063)]pcall=os[pcall]double=5298210-607241 code=idx[hooks(collectgarbage((-163703-(-833789))-666407),(-539217+(8435479701578-926183))-(-795959))]pcall=pcall(os)upvalueid=pcall==code remove=upvalueid else code,dir=yield(pcall,code)double=code and 1989521-(-42449)or 13472396-(-246566)end end else if double<4556943-(-517901)then if double<4537590-(-839443-(-307976))then new=nil dir=nil double=-269997+(10082047-(-458932))else double=module[idx[hooks(collectgarbage(750160+-747146),19696363830149-(-985794))]]remove={os}end else if double<4491357-(-588457)then code=double new=nil yield=os==new pcall=yield upvalueid=double double=yield and 12509721-(-885849)or 953100+1995171 else double=idx[hooks(collectgarbage(-408212+((4480-910631)+1316880)),938616+22456627890556)]double=upvalueid[double]remove=idx[hooks(collectgarbage((-624159-(-88835))+537844),11764743949780-448584)]double=double(upvalueid,remove)pcall=double double=pcall and 4906881-124682 or(341322+10222371)-794612 remove=pcall end end end else if double<5577693-435201 then if double<4328516-(-1181421-(-591034-(-199223)))then if double<4421486-(-675309)then upvalueid=cls[rawset[-378403+(-227089-(155298-760791))]]os=not upvalueid double=os and 661891+(15108223-(-123095))or 10596190-(-953455)else double=(219838+355310)+(-266190+6951587)upvalueid=idx[hooks(collectgarbage(-783015+786692),18919427867369-229225)]os=module[upvalueid]remove=os end else if double<413704+4706283 then remove=idx[hooks(collectgarbage((-709609-((-689457+843247)+-960412))+-92860),5367203330385-694927)]double=module[remove]remove=idx[hooks(collectgarbage(59347-56913),30799093432088-(-255827))]remove=double[remove]create=idx[hooks(collectgarbage(-347407+351315),-811963+29156467269600)]remove=remove(double,create)create=remove remove=create double=create and 338031+11853816 or((-70766+775508)-269936)+8972138 else double=pcall double=upvalueid and 14025543-8239 or 6287167-612316 end end else if double<4490979-(-687143)then if double<5501959-330989 then double=1686560-861412 else yield,searchpath=new(code,yield)double=yield and 4826461-688870 or-225153+10717508 end else if double<((((-79667+-1577493)-(-597287))-(-789169))-84322)+5534087 then remove={}double=module[idx[hooks(collectgarbage(-1038408-(-1042117)),10558949655717-672114)]]else xpcall=idx[hooks(collectgarbage(933672+(-434506+-497228)),287850+(861379+25560948344599))]upvalueid=idx[hooks(collectgarbage(739177-(1034834+-298027)),21443337197006-(-384565))]os=cls[rawset[(-1893439-(-987061))+906384]]tostring=idx[hooks(collectgarbage(-785630+787429),31458330713577-(-731211-(-662492)))]j=idx[hooks(collectgarbage(-108189-(-111351)),7782883457900-(-845528))]onload=module[xpcall]xpcall=idx[hooks(collectgarbage(((-1626531-(-731132))+(181373-(-660569)))+57262),27270030997861-(-502720-117148))]loadstring=idx[hooks(collectgarbage(-902473-(-904601)),(510260+2221277042098)-(725590+-1183778))]searchpath=onload[xpcall]print=idx[hooks(collectgarbage(73597-(1067619-996885)),29233586979780-186662)]onload=idx[hooks(collectgarbage(-244318+(-837143+1083388)),568992+1598999234723)]xpcall=idx[hooks(collectgarbage((-171301+184135)+-10497),27813295886700-(-602675))]dir=searchpath[onload]getmetatable=idx[hooks(collectgarbage(-61941-(-64546)),33253532571337-(-288330))]searchpath=idx[hooks(collectgarbage(-832516+836505),25492294933464-583335)]new=dir[searchpath]onload=cls[rawset[(-554939-(-950600))-395654]]searchpath=onload[xpcall]next=idx[hooks(collectgarbage(-195948-(-518125+(595707-277581))),11159054059230-153951)]xpcall=cls[rawset[-700055-(-700062)]]onload=xpcall[loadstring]dir=searchpath+onload loadstring=idx[hooks(collectgarbage(843805+(-1584276-(((366258+1102221)-477493)+-1734623))),311175+7080032926693)]yield=new*dir xpcall=module[loadstring]loadstring=idx[hooks(collectgarbage((817616+-68584)-745420),26056642056267-((-540080-(-1040207))-706893))]onload=xpcall[loadstring]xpcall=idx[hooks(collectgarbage(-876286+878139),((383779+-280262)+((225909-28466)-(129988-254692)))+33840724253484)]searchpath=onload[xpcall]loadstring=module[getmetatable]getmetatable=idx[hooks(collectgarbage((-1020238+1042033)-20033),-28477+(769943+12585576300540))]xpcall=loadstring[getmetatable]include=cls[rawset[((90055-(-221513))+-517727)+206166]]tonumber=include[next]next=cls[rawset[-265767-(-265774)]]include=next[print]getmetatable=tonumber+include math=cls[rawset[(-933596+599516)-(664199-998286)]]void=math[tostring]tostring=cls[rawset[-535173+((263487-851759)+1123452)]]math=tostring[j]print=void+math tostring=idx[hooks(collectgarbage(475293-472225),-563262+9685031824869)]math=cls[rawset[362624+-362620]]void=math[tostring]next=print+void math=idx[hooks(collectgarbage(-192335-(-195847)),-762562+8808691301295)]void=cls[rawset[-363364+363368]]print=void[math]include=next+print next=.2 tonumber=include*next include=-251939-(-251939)loadstring=xpcall(getmetatable,tonumber,include)getmetatable=idx[hooks(collectgarbage(-580558+582744),(5713537615359-114666)-(-953608))]xpcall=idx[hooks(collectgarbage(239415+-236803),34598545272084-(-474575))]onload=loadstring[xpcall]dir=searchpath*onload loadstring=module[getmetatable]getmetatable=idx[hooks(collectgarbage(-841818-(-1014592-(-168881))),(20596420431402-(762456+-1428123))-107061)]xpcall=loadstring[getmetatable]loadstring=idx[hooks(collectgarbage(677263-(73082+601452)),(3994202100328-(327608+-827122))-537233)]onload=xpcall[loadstring]xpcall=idx[hooks(collectgarbage(-369825+372738),(1005342+776701981823)-705257)]searchpath=onload[xpcall]new=dir-searchpath code=yield+new yield=cls[rawset[-854017-(-854022)]]pcall=code*yield double=502386+(435330+1329370)os[upvalueid]=pcall end end end end end end else if double<5751264-80577 then if double<-915015+6388784 then if double<-596242+5957605 then if double<-1001738+6296641 then if double<4912495-(-318047)then if double<4195187-(7904+-1032316)then if double<5675067-(-131189+599734)then pcall,yield=os(upvalueid,pcall)double=pcall and-16209+15693999 or-878841+6732754 else double=-399814+15590273 end else code=double new=idx[hooks(collectgarbage((225615+-675078)+453274),10777751569098-(-317499+732113))]xpcall=idx[hooks(collectgarbage(404482+-401275),(-829795+1840899)+13691718201270)]yield=module[new]onload=cls[rawset[228199-(-81027+309225)]]searchpath=onload[xpcall]onload=idx[hooks(collectgarbage(1016470-1014167),((-97873+33198713826745)-1020940)-55531)]dir=searchpath[onload]new=yield(dir)double=new and-428075+9771468 or-526449+14900584 pcall=new end else if double<5615520-(342335+40041)then tonumber=idx[hooks(collectgarbage(-1004938+1008404),-106206+21163748284443)]getmetatable=module[tonumber]include=idx[hooks(collectgarbage(809966+(-136932-669667)),-717450+7066013211327)]double=module[idx[hooks(collectgarbage(-69794-(-72538)),-193735+10777638539416)]]tonumber=getmetatable(include)remove={}else double=15144874-25314 end end else if double<(((-483777+1163876)+-1386705)+5158564)-(-862456)then if double<257569+5051440 then code=idx[hooks(collectgarbage(282469-(-813587+1093158)),(-283783-(-910013))+14868108658920)]yield=create os=cls[rawset[145352-145351]]double=1862782-448864 os[code]=yield else create=idx[hooks(collectgarbage(-730172-(425895+(-960938-199160))),975856150576-(-172471))]remove=module[create]create=idx[hooks(collectgarbage(-44135+47634),-901922+10852040756711)]create=remove[create]create=create(remove)create=idx[hooks(collectgarbage((1037248-((1035817+-431903)-(-167057)))-(440151+(672244-(((1102143-(1346315-571779))+1348834)-827388)))),(14646611916679-883522)-539236)]remove=module[create]create=idx[hooks(collectgarbage(-68805-(-71628)),10026230435288-(-912351))]double=10119180-(908718+-691822)create=remove[create]create=create(remove)end else if double<521355+4804647 then double=998992+((463538+-607273)-(-857258))searchpath=false dir=cls[rawset[301824-301821]]new=dir==searchpath yield=new else loadstring=idx[hooks(collectgarbage(903695-899526),419889161526-(-588525))]dir=new xpcall=searchpath[loadstring]onload=upvalueid[xpcall]double=not onload double=double and 209282+12033702 or 790518+(-59486+11062619)end end end else if double<-990390+6369298 then if double<-993154+(6736144-372044)then if double<4790479-(-575671)then double=-688744+15827192 else os=-upvalueid double=pcall double[remove]=os double=959892+10314102 end else if double<134456+(6026165-783839)then double=os double=remove and 873328+5456649 or 16709627-(576407-92865)else double=upvalueid double=remove and 14156434-236908 or(970371+-1768663)+11975068 end end else if double<4480498-(-968637)then if double<6438451-1036948 then upvalueid=idx[hooks(collectgarbage(726484+(993596+-1716618)),5686673550201-(-546804))]os=cls[rawset[486637+-486635]]create=os[upvalueid]double=create and 302550+11480063 or 15432137-(-29806)remove=create else remove={}double=module[idx[hooks(collectgarbage(-118077-(-119891)),7030368503129-940656)]]end else if double<(6132819-(-210275))-880637 then os=idx[hooks(collectgarbage(322391+-319856),-144948+19501495443389)]create=module[os]os=idx[hooks(collectgarbage(-506715+509191),11328467168625-54497)]remove=create[os]double=9880060-207022 os=loadfile(1013459+9912005,{rawset[-999291-(-999293)],rawset[905888-905885]})create=remove(os)else double=onload and 815687+7408449 or 14328680-164279 end end end end else if double<(6958149-957509)-416727 then if double<5254796-(-273376)then if double<5394883-(-93253)then if double<((-542467+91393)+934654)+5000709 then if double<5308691-(-171582)then yield=idx[hooks(collectgarbage(972080-970285),25220530389407-(-913083))]new=idx[hooks(collectgarbage(421494+-418092),710944+(-199160+(28838906295551-(-656218))))]code=module[yield]yield=code(upvalueid,new)double=(563851+(229470+(-1672624-(-67637))))+13133444 dir=idx[hooks(collectgarbage(986006+-984118),(10349476877955-(-1841))-850105)]new=module[dir]upvalueid=yield code={}loadstring={new(upvalueid)}onload=loadstring[410244+-410242]dir=loadstring[1025104+-1025103]xpcall=loadstring[326092+-326089]else double=remove and 3118263-(-164689)or 766675+3310906 end else os=pcall double=code double=710912+8943614 end else if double<((-730889-((679244+(377629+-1038260))+-529649))+6485401)-752748 then remove=idx[hooks(collectgarbage(-371547+373588),(370514+195128)+2422560306543)]upvalueid=-795166-((30441+(1108334-1047295))-886647)os[remove]=upvalueid remove=idx[hooks(collectgarbage(-652622-(-656133)),6620800198599-(-460414))]remove=os[remove]upvalueid=idx[hooks(collectgarbage(-790863-(-793284)),((1921966-425100)-959739)+32305699721615)]remove=remove(os,upvalueid)upvalueid=remove double=upvalueid and 12261934-(170468+699605)or 4111953-989195 else double=onload and 702645-552454 or 15467575-447924 end end else if double<515641+(-932981+5978227)then if double<(-920810+268482)+((-17004+-1009290)+7214106)then getmetatable=nil double=-808020+14818900 else double=module[idx[hooks(collectgarbage(-617354-((288969-927409)-(-17311))),((-85623+-436387)-(-706838))+11179765593113)]]remove={new}end else if double<-700650+6263283 then upvalueid=idx[hooks(collectgarbage(-540230+544066),1099536793366-760884)]os=module[upvalueid]pcall=idx[hooks(collectgarbage(659127-656691),-1046616+11106380754820)]upvalueid=idx[hooks(collectgarbage(850979+-848002),788101+21850085056066)]create=os[upvalueid]upvalueid=module[pcall]code=cls[rawset[-436700-(-1350544-(-913843))]]pcall={upvalueid(code)}os=create(m(pcall))double=os and 412601-275326 or 4511631-(936534+((806762-399075)+(454428+-967729)))remove=os else searchpath,xpcall=new(dir,searchpath)double=searchpath and 9594510-((-509359+840547)+-551634)or 6356075-(-945855)end end end else if double<-605771+6229899 then if double<5181311-(-423319)then if double<(-834968+1202529)+((4695210-(-489822))-(-38649))then double=3567605-(149060+(495355+204371))else double=remove and 9064562-(-804644)or 10468275-872554 end else if double<(-433286-(-250836+(-122721-(((-809338+751035)+751286)-844469))))+5826639 then create=idx[hooks(collectgarbage(941822+-939499),(768345+14351656761690)-(-238287))]remove=idx[hooks(collectgarbage(-662266+(427976+236054)),5412438438924-363468)]double=module[remove]remove=idx[hooks(collectgarbage(442290-440326),((-435647+-561197)+1653232)+(30988680377277-(-162819)))]remove=double[remove]remove=remove(double,create)create=idx[hooks(collectgarbage(298194+-295100),5490328534119-(-325864+1229063))]code=idx[hooks(collectgarbage(793349-790500),321578+18372232153728)]double=idx[hooks(collectgarbage(254705-251546),517011+32456693660182)]double=remove[double]double=double(remove,create)create=double double=cls[rawset[349329+-349328]]pcall=cls[rawset[419695-419693]]upvalueid=pcall[code]pcall=idx[hooks(collectgarbage((-325422-661783)-(-990049)),-243810+32555477459183)]os=upvalueid[pcall]remove=idx[hooks(collectgarbage(-539982-(-542393)),-622187+4873587366347)]remove=double[remove]remove=remove(double,os)os=idx[hooks(collectgarbage((-587115-(-853811))-262541),260517+22864292953399)]double=idx[hooks(collectgarbage(-533007-(-536829)),24334892065242-565647)]double=remove[double]double=double(remove,os)upvalueid=rawequal()os=double double=idx[hooks(collectgarbage(-680330+(-916390+1599502)),(((85131+-779111)+-128651)-(-852821))+30181102467191)]double=os[double]double=double(os)remove=idx[hooks(collectgarbage(-181635-(-184274)),-980196+14718414373549)]cls[upvalueid]=double double=module[remove]yield=cls[upvalueid]new={double(yield)}code=new[-736453+736456]remove=new[-386337+386338]yield=remove pcall=new[-986667-(-986669)]double=-831632+10073245 else code=nil double=-586929+(382853+(332814+7684193))pcall=nil end end else if double<570672+5084425 then if double<-617636+6259673 then double=code double=-1032021+(653711+(8573971-(-495255)))remove=pcall else new=idx[hooks(collectgarbage(-726268-(-728729)),(((-97419+(988130-537775))-429255)-33371)+27055833656019)]double=idx[hooks(collectgarbage(673393-670694),25185555368132-421190)]pcall=idx[hooks(collectgarbage(-838568+840769),23385954017064-228413)]upvalueid=module[pcall]pcall=idx[hooks(collectgarbage(909426-905798),6165334505890-(-350353))]remove=upvalueid[pcall]yield=module[new]new=idx[hooks(collectgarbage((794647+103057)-(955409-59990)),30473422782854-(-188935))]loadstring=idx[hooks(collectgarbage(878750+-875898),755474+27568259403472)]searchpath=idx[hooks(collectgarbage(-133881+(751950+-614034)),-855631+2078982525555)]create=nil code=yield[new]yield=idx[hooks(collectgarbage(717482-(-21448-(-736478))),26983533693675-(-550854))]pcall=code[yield]dir=module[searchpath]searchpath=idx[hooks(collectgarbage(222607+-219656),31703629359372-(-254988))]new=dir[searchpath]dir=idx[hooks(collectgarbage(765297-762817),-707773+17705365335960)]yield=new[dir]new=-627400-(-627403)searchpath=idx[hooks(collectgarbage((-7397-179202)-(-190416)),26099194999444-(-978367))]code=yield+new dir=module[searchpath]searchpath=idx[hooks(collectgarbage(321522-(1071860-((269473-(-748276))-263598))),15883287986180-((-935546+2403875)-(356823-(-438614))))]new=dir[searchpath]dir=idx[hooks(collectgarbage(904636-902668),((939358+80759)+21123245490491)-1012711)]yield=new[dir]xpcall=idx[hooks(collectgarbage(806610-(919221-(601977-486236))),(-27482+944488)+28341907280190)]dir=idx[hooks(collectgarbage(-96122-(-100237)),-6349+(23277837645123-(-213333+1008424)))]new=module[dir]onload=os[xpcall]loadstring=onload[loadstring]searchpath=(-517372-(-393571))-(-123805)xpcall={loadstring(onload)}dir={new(searchpath,m(xpcall))}upvalueid=remove(pcall,code,yield,m(dir))os[double]=upvalueid double=module[idx[hooks(collectgarbage(864272-860272),28285583183992-484024)]]remove={}os=nil end else if double<6335170-668478 then yield,dir=pcall(code,yield)double=yield and 115118+15199862 or(409174+-365655)+1633901 else double=upvalueid double[remove]=os double=-203532+(10536089-(-941437))end end end end end else if double<6698950-698702 then if double<5006827-(-1800209-(-947078))then if double<5077066-(-739901)then if double<454202+5307347 then if double<771989+4938202 then if double<(-412372-(-313583))+5793489 then new=idx[hooks(collectgarbage(-945595+(910793+38218)),1419359448454-(-807036))]yield=module[new]new=idx[hooks(collectgarbage((-636350-(-477723))+162072),6809604047491-(-1039162))]code=yield[new]new=-59537-(-59537)yield=code(new)double=-182527+((-242720-(-1149467-(-974135)))+5325401)else onload=idx[hooks(collectgarbage((273168+-645800)-(-375497)),-998971+11735818235211)]new=code searchpath=dir[onload]double=searchpath~=upvalueid double=double and 391479+14934276 or-397779+4055692 end else remove=idx[hooks(collectgarbage(-121788+124712),10269517652387-((-913349+2021392)-(-701525+(1670365-836915))))]double={}create=data[884862-884861]upvalueid=double double=module[remove]new=idx[hooks(collectgarbage((-230768+435506)-201489),-271257+(-1045951+23581681031603))]yield=module[new]os=data[147205+-147203]dir=idx[hooks(collectgarbage(-1025022-(-1028974)),-518335+(8451469718540-191639))]dir=yield[dir]new={dir(yield)}yield={double(m(new))}remove=yield[402001-402000]pcall=yield[-7502+7504]code=yield[1003288-1003285]yield=remove double=293999+(883852+8876079)end else if double<6814983-(-404578+(1856614-((526787+421486)-520545)))then create=rawequal()cls[create]=data[719202-((270703+648106)-199608)]os=idx[hooks(collectgarbage((-109019-(-346676))-235359),567990+(579256+3834543896346))]remove=module[os]os=idx[hooks(collectgarbage(759974+-756948),16430570203974-757413)]double=remove[os]os=error(-95+(-859413+9909764),{rawset[-759907+759908],create;rawset[608982-((1164545-741624)+186059)],rawset[-176086+176089];rawset[-928070-(-928074)]})create=length(create)remove=double(os)double=module[idx[hooks(collectgarbage(265500+(252207+-515594)),31375972478994-433156)]]remove={}else upvalueid=idx[hooks(collectgarbage(-43021-(-671106+(-243364-(-868578)))),-475007+30825499535165)]os=module[upvalueid]double=os and((7416382-959501)-(-219090))-378460 or 16098007-(1794040-978952)remove=os end end else if double<5234517-(-611749)then if double<5205614-(-617309)then os=cls[rawset[-393782-(-393783)]]remove=os double=25453+14272131 else double=14175373-(-210767)yield=nil end else if double<715766+5138060 then loadstring=idx[hooks(collectgarbage(454103-451825),229692+26685165457849)]xpcall=idx[hooks(collectgarbage((1891803-(1456694-415987))+-847792),21851049489793-(-491617))]dir=module[xpcall]xpcall=idx[hooks(collectgarbage(((-1637258-(-612472))-(-238127))+789597),(-647990-(-3437))+(25179539996266-(-601140)))]xpcall=dir[xpcall]xpcall=xpcall(dir,loadstring)dir=idx[hooks(collectgarbage(-191884+195899),7485838234161-1007658)]loadstring=double dir=xpcall[dir]dir=dir(xpcall,code)double=dir and-1022047+2775900 or(-464531+(85350-24189))+2560392 xpcall=dir else pcall=idx[hooks(collectgarbage(51190+-47814),((-564862+-290203)+((11863441781365-794906)-1005923))-(-164760))]upvalueid=module[pcall]onload=idx[hooks(collectgarbage(-529310-(-533102)),19269558743101-988448)]double=(-471965+156751)+9887484 os=-231136+(169416+61720)dir=cls[rawset[(-1037081+168468)+868614]]new=dir[onload]dir={upvalueid(new)}pcall=dir[344911+(-444355+99445)]yield=dir[-990211+990214]code=dir[557663-557661]end end end else if double<((590541+-704172)+-549217)+6612202 then if double<-754295+6643242 then if double<5089029-(-796064)then remove=idx[hooks(collectgarbage((-1473788-(-612112))+865609),((-1617969-((146831+-1179937)-(-277788)))-(120455+-360880))+27289132591623)]remove=new[remove]double=65792-(-486016)remove=remove(new)else new=cls[rawset[699109+-699106]]yield=not new double=165674+11210310 os=yield end else if double<6935837-(-21993+1013472)then searchpath=dir double=searchpath and-203230+(-225730+(12116690-915087))or 11890430-583024 else onload,loadstring=dir(searchpath,onload)double=onload and 752137+10404018 or 13969719-188853 end end else if double<-853720+6835035 then if double<(355778-949658)+(-625114+7180288)then upvalueid,code=create(os,upvalueid)double=upvalueid and 8768844-784899 or 314841+4002093 else double=searchpath and 7535265-1017731 or-287181+2618247 end else if double<-626000+6621412 then new=idx[hooks(collectgarbage(455767+-453206),-337621+11824454282294)]double=11839801-(-963245)yield=module[new]pcall=yield else code,dir=yield(pcall,code)double=code and 182735+8587767 or 801913+(11990304-(-1046377))end end end end else if double<224179+(273579+5655602)then if double<64873+5996613 then if double<6633402-598235 then if double<(5851906-(-773032+378480))-241071 then loadstring=idx[hooks(collectgarbage(1047604-1043808),992855+34497952605030)]xpcall=module[loadstring]loadstring=idx[hooks(collectgarbage((-597907+-380190)-(-981601)),-329198+25494136085156)]tonumber=idx[hooks(collectgarbage(-891852+895391),433126+26431380974921)]onload=xpcall[loadstring]include=idx[hooks(collectgarbage((892285+-381673)+-507791),28497628643880-(-53162))]getmetatable=module[tonumber]tonumber=idx[hooks(collectgarbage((-578573-38361)+620479),173970+(6410310266211-(-509930)))]loadstring=getmetatable[tonumber]tonumber=searchpath[include]include=613691+-613690 getmetatable=loadstring(tonumber)loadstring=(-607685-(-632257))+-24571 tonumber=pcall-include xpcall=onload(getmetatable,loadstring,tonumber)onload=idx[hooks(collectgarbage(876380+(-915672+(-604678-((191713+169461)-1007098)))),29381255080877-(-776290))]loadstring=(908995+-26616)+(-650625+(-98857-132895))onload=upvalueid[onload]onload=onload(upvalueid,loadstring)double=xpcall==onload double=double and 6058998-(-1580975-(-843731))or 8135047-373413 else remove={}double=module[idx[hooks(collectgarbage(-39310+42402),20485753045949-(-177167))]]end else if double<-678409+6723111 then create=rawequal()cls[create]=data[-984354+984355]upvalueid=idx[hooks(collectgarbage(815167+-812378),15838571833851-(-369633+251038))]remove=cls[rawset[694467-(559747-(-134719))]]os=data[(50155-913132)-(-862979)]loadstring=((-715785-444268)-(-1339611-(-490981)))-(-311423)double=remove[upvalueid]new=idx[hooks(collectgarbage(-892776-(-396458+-498890)),(31109138612340-250110)-272091)]dir=985199-(-596545+1581744)bytecode=idx[hooks(collectgarbage(933546+-931531),-944552+10503283918348)]remove=idx[hooks(collectgarbage(904429+(-755095+(((-371935-(-99794))-695039)-(-821303)))),-687461+12420488498919)]yield=cls[rawset[234286-234285]]code=yield[new]yield=idx[hooks(collectgarbage((119296+921228)+((294503-(641058+-1303110))+-1994134)),((844061-(-819050+1656503))+35173780585083)-(-1014659+1273416))]searchpath=(469325+-190216)-279109 new=idx[hooks(collectgarbage(-214750+217466),35013692321080-(-150574))]onload=(((860517+(950234+-672622))-135616)+-1093189)+90696 pcall=code[yield]yield=module[new]new=idx[hooks(collectgarbage(-498400-(754776+-1256850)),20787161951368-(745158-723299))]code=yield[new]new=-519536+519536 yield=code(new,dir,searchpath,onload)upvalueid=pcall+yield double[remove]=upvalueid upvalueid=idx[hooks(collectgarbage(868423-(1716529-850600)),-302503+27199400451845)]searchpath=(-174325+7783)+166542 onload=-488893-(-488893)dir=idx[hooks(collectgarbage(-728666-(-732228)),562203+5101415458648)]remove=cls[rawset[663966-663964]]double=remove[upvalueid]new=module[dir]void=idx[hooks(collectgarbage((-658430-271119)-(-932718)),119908+477106937177)]dofile=idx[hooks(collectgarbage(447314-443718),(425703+((-686542+343670)+(957078+-1111486)))+(574975+24538249181374))]dir=idx[hooks(collectgarbage(660558-656452),935829+24758316743022)]code=idx[hooks(collectgarbage(-646675-((-63672-410978)-174246)),641700+25478429038229)]upvalueid=idx[hooks(collectgarbage(405739-403395),-80228+12520714538185)]yield=new[dir]setupvalue=-105592-(-105592)dir=44960+-44959 xpcall=-41972+(-361302-(-403294))new=yield(dir,searchpath,onload,xpcall)onload=idx[hooks(collectgarbage(597725-595460),-551849+5140108999821)]yield=idx[hooks(collectgarbage(-801451-(-803687)),31095109347017-922977)]searchpath=module[onload]onload=idx[hooks(collectgarbage(277137-274168),21345378395387-(957393+-1861162))]xpcall=-262870-(-262870)dir=searchpath[onload]onload=-461670+461670 print=cls[rawset[-765515-(-765516)]]next=print[void]include=#next next=(-753505-(-107729))-(-645777)math=idx[hooks(collectgarbage((-425276+775861)+-346522),(718068+-511930)+(483960+((-50064+727387)+7943822978776)))]tonumber=include-next include=473480-473460 game=idx[hooks(collectgarbage(-362329+364835),4612637135890-((-442737-293543)-195225))]getmetatable=tonumber*include searchpath=dir(onload,xpcall,loadstring,getmetatable)getmetatable=-525247-(-525287)loadstring=idx[hooks(collectgarbage((-551353-68808)+(1097288-(651397+-178251))),(-1075611-(-163023))+2384512262652)]dir=idx[hooks(collectgarbage(839372+-835624),19679167801376-(-1011981))]xpcall=module[loadstring]loadstring=idx[hooks(collectgarbage(-746057-(588448+-1336312)),894725100240-108702)]resume=idx[hooks(collectgarbage(((149092-(-549114))+-1484160)+789852),9836611821798-(-510994))]onload=xpcall[loadstring]include=idx[hooks(collectgarbage((873694-12137)+-858281),30957382586693-(-348593))]tonumber=-987657+((181848-(-44884))+760965)void=idx[hooks(collectgarbage(-114596+117427),238981+23032613053529)]loadstring=-743071+743111 xpcall=onload(loadstring,getmetatable,tonumber)tonumber=idx[hooks(collectgarbage(-897801+901865),17455695471364-(-272460))]onload=idx[hooks(collectgarbage(-941496+943620),758804+16737488976639)]getmetatable=cls[rawset[-297690+297691]]loadstring=getmetatable[tonumber]next=cls[create]tonumber=include..next getmetatable=idx[hooks(collectgarbage(330235+-328331),(175082+(-153280+7463458452367))-(-384512))]print=module[void]void=idx[hooks(collectgarbage(747967-744065),20618019630713-938836)]next=print[void]void=idx[hooks(collectgarbage((695065+-186527)+-506455),((1505044-817816)+-273813)+10771304269643)]print=next(void)isWindows=module[resume]include=idx[hooks(collectgarbage(576923-574431),(-759184+7414343973274)-((266865+257417)+-950113))]resume=idx[hooks(collectgarbage(-423514+425659),7095896670703-(-92187))]next=idx[hooks(collectgarbage(297360-294117),491509+32653879919067)]void=29062-29048 j=isWindows[resume]resume=idx[hooks(collectgarbage(737446-733404),6447707565815-29453)]isWindows=idx[hooks(collectgarbage(664863-662169),13302898722615-(-89465))]tostring=j[isWindows]gmatch=module[bytecode]bytecode=idx[hooks(collectgarbage(-977865+981975),12701960822017-(939250+-1902111))]j=idx[hooks(collectgarbage((20612+203220)-219689),-329139+21730217295147)]popen=gmatch[bytecode]gmatch=idx[hooks(collectgarbage(-459156+461347),29458543926786-(-274282))]parse=popen[gmatch]popen=idx[hooks(collectgarbage(825874+-822030),729654+19931736164253)]import=module[game]game=idx[hooks(collectgarbage(-842079-(-844871)),32939923317359-((-1026014-(446073+-1487053))-(-53190)))]isWindows=false bytecode=import[game]import=idx[hooks(collectgarbage((346003-(1249053-607102))-(-298023)),-1034314+21174365491035)]gmatch=bytecode[import]pcall={[code]=new;[yield]=searchpath;[dir]=xpcall;[onload]=loadstring,[getmetatable]=tonumber,[include]=print,[next]=void;[math]=tostring;[j]=isWindows,[resume]=setupvalue;[dofile]=parse;[popen]=gmatch}remove=double(upvalueid,pcall)setupvalue=223025-223025 searchpath=idx[hooks(collectgarbage((((-305617+(593940+705103))+(437698-486307))+-1635459)+(443658+250200)),23278363599128-(-862083))]yield=idx[hooks(collectgarbage(-448161-((1001436-631634)+-821982)),33524243944644-801108)]pcall=idx[hooks(collectgarbage(-261110-(-262895)),(574482+3003988767003)-(-82587+584253))]xpcall=(-71181+1035748)+-964567 loadstring=-451056+451096 upvalueid=rawequal()include=idx[hooks(collectgarbage(-932559+936324),20462643920674-19985)]cls[upvalueid]=remove void=idx[hooks(collectgarbage(-156517-(-158441)),-376212+17083104160052)]remove=cls[rawset[-936425+936427]]onload=((375888-271071)+480641)+-585308 getmetatable=-410914-(-410974)double=remove[pcall]pcall=idx[hooks(collectgarbage(-46234-(-49543)),-275567+4726567326177)]dir=module[searchpath]searchpath=idx[hooks(collectgarbage(311977+-309617),-177873+35120367541282)]new=dir[searchpath]searchpath=-161726-((778762+132399)+-1072887)dir=new(searchpath,onload,xpcall,loadstring)new=idx[hooks(collectgarbage(599904+-595744),32938008252276-4732)]xpcall=idx[hooks(collectgarbage(680110+-677484),-168877+(362110+(952775+24600834795735)))]onload=module[xpcall]xpcall=idx[hooks(collectgarbage(735586+-732642),(116192+(24177243475514-(-250532)))-(574369-(-78999)))]loadstring=402416+-402356 searchpath=onload[xpcall]xpcall=-549603+549663 onload=searchpath(xpcall,loadstring,getmetatable)tonumber=cls[rawset[(-1396390-(-826158))-(-570233)]]xpcall=false loadstring=idx[hooks(collectgarbage((1039239-(-5250))+((-839010+1744851)+-1946500)),761643+33077195412358)]searchpath=idx[hooks(collectgarbage(1016325+(-960491+-52606)),(-808806-42614)+17367107491417)]getmetatable=tonumber[include]tonumber=idx[hooks(collectgarbage(715201-(-832083+1543876)),(-338727+103672)+25262301625812)]print=module[void]include=idx[hooks(collectgarbage(1038123-1034458),10214354255685-884152)]void=idx[hooks(collectgarbage(693572+-689979),(-1041321+31950772523375)-465653)]resume=idx[hooks(collectgarbage(-261330-(-264476)),-806306+9930696935471)]next=print[void]void=idx[hooks(collectgarbage((206516-196961)-7142),(-773312+10269848296611)-528014)]print=next(void)next=idx[hooks(collectgarbage((-634137+-259736)+897250),19483642079204-(-973647-(-490001)))]isWindows=module[resume]math=idx[hooks(collectgarbage(-430247+432844),16401890358880-(-977263))]resume=idx[hooks(collectgarbage(-745803-(-749835)),-850718+(-696066+(-628828+28514976601993)))]j=isWindows[resume]void=(-285532-136460)+(735114+-313110)resume=idx[hooks(collectgarbage(124053-121639),4871597348396-(-531941+195844))]isWindows=idx[hooks(collectgarbage(-438073-(-870581-(-429796))),(((606325-1018915)+8431740027689)-(-672708))-(-363375))]tostring=j[isWindows]isWindows=true j=idx[hooks(collectgarbage(-28069-(-30677)),(30528466849000-245268)-(-807942))]code={[yield]=dir,[new]=onload,[searchpath]=xpcall;[loadstring]=getmetatable;[tonumber]=os;[include]=print;[next]=void;[math]=tostring;[j]=isWindows,[resume]=setupvalue}remove=double(pcall,code)pcall=rawequal()code=idx[hooks(collectgarbage(-713721+715950),92965+24678060130638)]cls[pcall]=remove remove=cls[rawset[221738-221735]]double=remove[code]code=cls[create]yield=cls[upvalueid]remove=double(code,os,yield)dir=idx[hooks(collectgarbage(395896-391983),-914542+9905076699432)]yield=idx[hooks(collectgarbage(-707497-((-1787112-(-523058))-((1406092-(726904+80201))+-1151581))),894017+4463440020558)]code=remove remove=module[yield]yield=idx[hooks(collectgarbage((1042959-((-804562-(-414966))+1287534))-143201),-638608+15631139026361)]double=remove[yield]new=cls[rawset[-787505+(-384519+1172025)]]yield=new[dir]remove=double(yield,code)remove=cls[upvalueid]yield=idx[hooks(collectgarbage(281404+-277825),273291+11468317525769)]double=remove[yield]yield=number(270111+(656147+14641976),{upvalueid,pcall})remove=idx[hooks(collectgarbage(-773177+775534),2353566291768-(-546968))]remove=double[remove]remove=remove(double,yield)yield=idx[hooks(collectgarbage(-25981+28236),(25925682823856-(-51327))-(-298370))]remove=cls[upvalueid]double=remove[yield]remove=idx[hooks(collectgarbage(-332050-(-335108)),21861483015703-(-881563))]remove=double[remove]yield=loadfile(15272964-391942,{rawset[(232291-403212)+170922],rawset[859098+-859094];create})remove=remove(double,yield)yield=idx[hooks(collectgarbage((464809+79622)+-541322),10018522002482-200564)]remove=cls[upvalueid]double=remove[yield]remove=idx[hooks(collectgarbage(901533-899670),3402305647113-(-97182))]yield=number(-399133+2375112,{upvalueid;pcall})remove=double[remove]remove=remove(double,yield)yield=idx[hooks(collectgarbage(-108146-(-110747)),86947+8893582014504)]remove=cls[upvalueid]double=remove[yield]yield=error(1829671-(-846076),{pcall})remove=idx[hooks(collectgarbage(-198247+202009),-200614+3881738562680)]remove=double[remove]remove=remove(double,yield)remove={code}double=module[idx[hooks(collectgarbage(-433733+(-229894-(-667382))),1019187+19925352329549)]]else pcall=idx[hooks(collectgarbage(-164093+((86100-169240)+(714355+(-822786-(-358370))))),24106642748508-(-443882))]double=(225838-1033230)+(1037587+10944737)upvalueid=cls[rawset[-621372+621373]]os=upvalueid[pcall]upvalueid=idx[hooks(collectgarbage(872566-870503),26185884215753-(-101944))]create=os==upvalueid remove=create end end else if double<672076+5440699 then if double<-225742+6302678 then void=idx[hooks(collectgarbage(891912-888423),28460309485991-313260)]print=module[void]void=idx[hooks(collectgarbage(374991-371551),215590968791-((((-57162-(-346579))+-1004827)+(((-292336+-540618)+(17919+(1349782-115265)))-(-839803)))+-70853))]double=((-260159-(-517552))-914591)+((-682241-(530237+-1473099))+7027931)math=979477+-979476 next=print[void]void=-617733-(-617734)print=next(loadstring,void,math)next=idx[hooks(collectgarbage(334894-331019),11485572692929-(-947163))]include=print~=next getmetatable=include else dir=idx[hooks(collectgarbage((-570922+-193839)-(-767843)),30941767745074-(-299317))]onload=idx[hooks(collectgarbage(393012+-388937),-28000+(12964023276153-(463395+-72497)))]new=module[dir]dir=idx[hooks(collectgarbage(138770-135221),18668990902084-961935)]double=new[dir]dir=idx[hooks(collectgarbage(328791-325537),4504625375961-(-743260))]new=double(dir)double=idx[hooks(collectgarbage((312045-307401)+-2033),646842789204-(-747400))]searchpath=cls[rawset[136359+((-769689-(-141446))+491886)]]dir=searchpath[onload]new[double]=dir double=idx[hooks(collectgarbage(404278+-401804),(-976620+1122111228524)-167097)]dir=cls[os]new[double]=dir searchpath=idx[hooks(collectgarbage(-390907-(-392753)),362107+33493297893397)]double=idx[hooks(collectgarbage(945252-942506),31896072317136-(-326670))]dir=yield new[double]=dir double=idx[hooks(collectgarbage(-220561-(-370523-(-145912))),12523408070035-1036349)]dir=true new[double]=dir double=idx[hooks(collectgarbage(531023+-527007),495692+12440161588214)]dir=-216316+(816654+-600328)new[double]=dir double=idx[hooks(collectgarbage(688673+-684636),(-270342-303683)+((1027571+22747352362537)-(-911867)))]dir=yield[searchpath]new[double]=dir double=idx[hooks(collectgarbage(834219+-830979),474041+8293311339147)]searchpath=idx[hooks(collectgarbage(-455311+459366),8051462650980-891886)]dir=module[searchpath]new[double]=dir double=idx[hooks(collectgarbage((906764-(((-546284+775408)-(-500893))-832936))+(-800672+-204943)),-227619+25476012548125)]searchpath=cls[rawset[-654899-(-654901)]]onload=idx[hooks(collectgarbage(1020962+-1017328),(2756096535968-(-806371))-102609)]dir=searchpath[onload]new[double]=dir new=nil double=(845372+(-844313+-453581))+8027850 end else if double<6878985-756016 then create=idx[hooks(collectgarbage(-154304-(-157233)),(1020768-216519)+10802060661715)]remove=module[create]create=idx[hooks(collectgarbage(-933702-(-936238)),28652971002772-(-769767))]double=remove[create]create=error((-399111+7206341)-67781,{rawset[-284501+284502],rawset[40706-40704]})remove=double(create)double=136062+1515925 else object=idx[hooks(collectgarbage((402852-1115)+-398448),10350815219852-(-638783))]open=idx[hooks(collectgarbage(143421-141442),476772+7299368739422)]dofile=idx[hooks(collectgarbage(130570-127704),-356259+(17163535983972-(618930+-299503)))]c=idx[hooks(collectgarbage(967186-((-25120+(-451856+960265))-(-480882))),((-406760-(829098-855962))+706194)+3396884673217)]packages=idx[hooks(collectgarbage(308147+-305807),702700+34856374016168)]randomseed=idx[hooks(collectgarbage(-481954+(31606-(-454325))),-1045924+(-758318+(980653+547279524459)))]double=tostring getlocal=idx[hooks(collectgarbage((91867+-944196)+855507),688132+6459191668308)]traceback=number(124675+7612134,{})resume=idx[hooks(collectgarbage(-769521-(-772284)),17396994879830-(-258509))]popen=rawequal()setupvalue=idx[hooks(collectgarbage(-202817-(-204702)),20554385062540-471469)]isWindows=idx[hooks(collectgarbage(-451960-(-454716)),881229+21755884932855)]byte=idx[hooks(collectgarbage(-257652-(-260048)),23257986972997-(-213854))]j=module[isWindows]raise=idx[hooks(collectgarbage(-759535+763594),1021710+34184605072192)]setupvalue=j[setupvalue]tmpname=idx[hooks(collectgarbage(361690+-359305),15829+8199883155243)]isWindows={setupvalue(j,resume)}tostring=void(m(isWindows))j=rawequal()resume=idx[hooks(collectgarbage(-248424+(345888-(885630+-791774))),8309525634025-887504)]size=idx[hooks(collectgarbage(((-27669-799768)+889651)-58940),12966716220589-(-572462))]select=index(4040363-267400,{popen})setupvalue=idx[hooks(collectgarbage(-46201-(-49722)),88261+19390299993812)]a=idx[hooks(collectgarbage((1029223+-508253)+-518756),631101+(818253301709-(956480-93802)))]loadlib=idx[hooks(collectgarbage(305968+-302778),-33900+19936743575024)]cls[j]=tostring isWindows=module[resume]dofile=isWindows[dofile]gmatch=idx[hooks(collectgarbage(-918538+921471),-14946+34554995354862)]resume={dofile(isWindows,setupvalue)}isLinux=idx[hooks(collectgarbage(840254+-837867),-452282+25811028969204)]setupvalue=idx[hooks(collectgarbage(500599+-497483),7776815068529-729249)]dofile=rawequal()gmod=number(-972552+16085191,{})hookfunction=idx[hooks(collectgarbage(-345686+348646),-693837+7788864857568)]tostring=void(m(resume))isWindows=rawequal()getupvalue=index(12501191-(-63161),{isWindows})cls[isWindows]=tostring gsub=idx[hooks(collectgarbage(259201-255419),6295741181700-582177)]rawget=idx[hooks(collectgarbage(482323-478598),8492509744398-(-125558))]imports=idx[hooks(collectgarbage(-704641-(-708599)),34009568976941-(-19100-420830))]type=index(-1038090+14440474,{isWindows})char=error(-555097+2267572,{isWindows})resume=cls[isWindows]delete=number(4168486-(-33458-(-61163+(303461+(-783056+572531)))),{isWindows})parse=rawequal()hasnext=idx[hooks(collectgarbage(-741640+((940009+-1498818)+1304619)),(294068-153783)+12195310520292)]_G=number(908252+4835519,{isWindows})tostring=resume[setupvalue]resume=rawequal()cls[resume]=tostring obj=idx[hooks(collectgarbage(962430+(-1359880-(-400117))),160144+34581391497273)]assert=rawnew(12101532-596056,{isWindows})Factory=rawnew(74976+10489446,{isWindows})call=number(((1185537-318580)+14531373)-(-170419),{isWindows})i=index(-575064+8606178,{isWindows})game=index(15694448-628245,{isWindows})tostring=cls[resume]setlocal=idx[hooks(collectgarbage(-772633-(-775856)),(-177350-(1507055-858416))+8157184633705)]setupvalue=rawequal()cls[setupvalue]=tostring newpath=number(11241599-10611,{isWindows})tostring=number(-78561+10087613,{})close=error(868388+((46517+696315)-(-654731)),{isWindows})package=loadfile(119848+11751759,{isWindows})cls[dofile]=tostring const=idx[hooks(collectgarbage((823082+-1415104)+595434),(-901342+(-757309+(19017085487693-(-647727))))-(400737+-171075))]setmetatable=class(-440041+17076264,{isWindows})read=number((-585792+14103819)-(-1249976-(-554719)),{isWindows})float=class(-180746+8895679,{})loader=rawnew(-187105+11624736,{isWindows})import=idx[hooks(collectgarbage(-256014-(404820-663287)),29463688567400-((-131245+-174798)+69576))]sethook=class((897930+13476957)-707916,{})tostring=error((-1194474-(-806873))+820956,{})bytecode=class(-382213+12381687,{isWindows})cls[parse]=tostring tostring=require((-351820+-33329)+((-1033928-(-724642))+(6686794-(-332081))),{isWindows,dofile,parse})cls[popen]=tostring coroutine=index((-975349-(-338593+-379591))+1047673,{isWindows})tostring={[gmatch]=bytecode,[import]=game;[const]=traceback;[a]=float;[tmpname]=newpath;[packages]=char;[c]=type,[imports]=call;[byte]=close,[randomseed]=setmetatable,[loadlib]=delete;[hookfunction]=i,[getlocal]=Factory,[size]=package;[open]=getupvalue;[rawget]=sethook;[isLinux]=gmod;[hasnext]=loader,[obj]=coroutine;[object]=read;[gsub]=assert;[setlocal]=select;[raise]=_G}gmatch=idx[hooks(collectgarbage(-515858+519268),-455420+22931951478310)]bytecode=idx[hooks(collectgarbage(709154-705885),20584692015306-1035205)]module[gmatch]=tostring gmatch=loadfile(3228409-(-549778),{})module[bytecode]=gmatch bytecode=idx[hooks(collectgarbage(261599-259140),29488850407105-(-335941))]gmatch=index(886132+13843283,{})module[bytecode]=gmatch gmatch=loadfile(-463809+10729610,{})bytecode=idx[hooks(collectgarbage((-157686+1000869)-839903),21600652534597-656594)]module[bytecode]=gmatch gmatch=wrap((605465+8796584)-878852,{})bytecode=idx[hooks(collectgarbage(-703177-(-705717)),-279336+((-687462-(-506015))+33771674191128))]module[bytecode]=gmatch bytecode=idx[hooks(collectgarbage(60738+-58247),56756+26551155212725)]gmatch=class(338130+16055692,{isWindows})module[bytecode]=gmatch bytecode=idx[hooks(collectgarbage(193295+-190291),757085487805-(-110948))]gmatch=index((-524625+(-650365+(-1005727+9013889)))-(-438791),{isWindows})module[bytecode]=gmatch bytecode=idx[hooks(collectgarbage(-1005453-(-1009564)),-863566+19477769243016)]import=idx[hooks(collectgarbage(-775034+(135670+((-240054-((-554941+-563543)-(-448667)))+211871))),(364997+484244)+2575378132750)]gmatch=number(-882086+3046646,{resume})module[bytecode]=gmatch bytecode=module[import]gmatch=not bytecode double=gmatch and-589061+10915386 or 2840736-13463 end end end else if double<357245+(5042060-(-819724))then if double<5993140-(-188980)then if double<6205456-30128 then os=idx[hooks(collectgarbage(345302+-342188),5674429068565-671064)]double=idx[hooks(collectgarbage((-336282-694091)+1034111),8322540331321-695184)]remove=false create[double]=remove remove=module[os]os=idx[hooks(collectgarbage((-317045+1179209)+-859997),-6859+16055677518929)]double=remove[os]os=430829+(((1911165-(60312+358458))-896616)+(-531943+-494660))remove=double(os)remove=true double=idx[hooks(collectgarbage(-85878-(-88166)),(-910522-(-612440))+22847484807002)]create[double]=remove double=370710+15832038 else code=idx[hooks(collectgarbage((374225-(-577131))-948831),-218391+(21977125330533-(-347669)))]pcall=module[code]dir=cls[rawset[-251913-(-251914)]]onload=idx[hooks(collectgarbage(1033247-(54847+(-514822+1489671))),(1044846+-150146)+1728341582752)]onload=dir[onload]searchpath={onload(dir)}dir={pcall(m(searchpath))}yield=dir[((-807492-(-1525675-(-588660)))-616230)-(-425188-(82230-(-472036-(-492745))))]double=14644116-929431 new=dir[-394932-(-394935)]code=dir[25616+-25615]end else if double<920253+5282459 then tonumber=idx[hooks(collectgarbage(-296776+298758),2229329086401-((1975731-946298)+-1324134))]getmetatable=dir[tonumber]tonumber=idx[hooks(collectgarbage(((((621673-(-148641))+-1298065)-(-545354))+309712)+-324152),5080032165920-(-204516))]loadstring=getmetatable~=tonumber onload=loadstring double=12645584-(-577064)else loadstring=idx[hooks(collectgarbage(126992-123847),-888945+22470249017566)]xpcall=cls[rawset[((-166213+-434137)+-232286)-(-832639)]]onload=xpcall[loadstring]double=(711034+-622374)+4315469 xpcall=idx[hooks(collectgarbage(-406085+(909910-500833)),15997367107614-(23960+(618352-(-326455))))]searchpath=onload[xpcall]onload=idx[hooks(collectgarbage((-546723+1120806)+-570353),776044+32687437662643)]onload=searchpath[onload]xpcall=idx[hooks(collectgarbage(575373+(-951009+379053)),-701975+31718948467739)]onload=onload(searchpath,xpcall)new=onload end end else if double<6616762-352716 then if double<416644+5836484 then onload=idx[hooks(collectgarbage(255709+-252415),(226455+-687311)+33271245374890)]new=code searchpath=dir[onload]double=searchpath==upvalueid double=double and-88682+9090750 or-507025+((141804+8513359)-(-78873))else code=double searchpath=cls[rawset[775470+-775466]]xpcall=idx[hooks(collectgarbage(-482772+(47591-(-439261))),4515370555560-(-711408))]onload=idx[hooks(collectgarbage(-148771+151548),17886387705139-(-766604))]dir=searchpath[onload]onload=cls[rawset[-379603+((((149527+-252966)-844645)+(-159159+1191568))+295282)]]searchpath=onload[xpcall]new=dir+searchpath dir=(-271167+(677542+-1387132))-(-980757)yield=new==dir double=yield and 4078601-384932 or 1016751+4471372 pcall=yield end else if double<6110206-(-162679)then os=idx[hooks(collectgarbage(-412316-(-1062889-(-648058))),5447805106917-225068)]code=idx[hooks(collectgarbage(-589030+592469),770473799909-77120)]create=module[os]double=195100+13723711 os=idx[hooks(collectgarbage(754438+-750751),33163937869-983354)]pcall=cls[rawset[(-1001440+1569787)-(266553+301793)]]upvalueid=pcall[code]os=create[os]os=os(create,upvalueid)remove=os else double=cls[rawset[889021-(788263+100757)]]remove=idx[hooks(collectgarbage(-995482-(-998937)),20202676137484-(-560403+950361))]new=cls[rawset[(161102+684327)+-845427]]yield=double code=new pcall=double double=new and 8208275-142856 or-284714+2050271 end end end end end end end else if double<783133+6689265 then if double<(-811092+(-534303+1572284))+6628071 then if double<6269181-(-297636)then if double<((-975586+6261421)-(-429408))-(-666059)then if double<189267+6140847 then if double<642335+5676375 then if double<346533+5957887 then if double<(-678247+7922546)-953675 then code=idx[hooks(collectgarbage((-1041453-(-581702))-(-463310)),-121015+(20623108947556-427416))]double=module[code]dir={double(create)}yield=dir[-681842-(-1539821-(-857977))]double=((4957423-((((910389-523898)+(-1042385+517945))+-156336)-(-52284-18712)))-638004)-(61768+-328865)code=dir[-125834-(786709+-912544)]new=dir[-902765-(-902768)]else double=((495698-(-27972))+15739769)-980520 pcall=idx[hooks(collectgarbage(658386+(-75847+-579626)),32358215824000-750964)]upvalueid=idx[hooks(collectgarbage(245104+-240965),45926+19451812507039)]upvalueid=create[upvalueid]upvalueid=upvalueid(create)os=upvalueid==pcall remove=os end else double=searchpath and(12482434-(942979-971451))-139840 or(490174-(-495846))+8130190 end else if double<(7595246-739915)-527889 then double=nil os=idx[hooks(collectgarbage(310550+-308554),(-984118+7063031440943)-437876)]create=double remove=module[os]os=idx[hooks(collectgarbage((-794993+1735070)-936380),-767041+1942859752429)]double=remove[os]new=idx[hooks(collectgarbage(362335+-360414),9523120480628-652248)]remove=idx[hooks(collectgarbage(-688016+691281),16930173255160-758392)]os=double double=module[remove]code=cls[rawset[985815-985814]]new=code[new]yield={new(code)}code={double(m(yield))}pcall=code[-743025+743028]upvalueid=code[-128601+128603]double=3404138-25879 remove=code[1047423-1047422]code=remove else code=idx[hooks(collectgarbage(-828858-(-831532)),-426126+27147352438352)]os=cls[rawset[-455930-(-455934)]]pcall=module[code]code=idx[hooks(collectgarbage(((247119+-1178414)+557497)-(-376092)),10396370076755-(-904025+1130494))]upvalueid=pcall[code]code=959384-(844883+114500)double=14289744-28708 new=cls[rawset[-336934+336938]]yield=#new pcall=upvalueid(code,yield)remove=os[pcall]os=remove end end else if double<(737360+(4713336-(-565563)))-(-733919+(507443+(-843728+750855)))then if double<-990781+7321363 then double=false cls[rawset[476025-476024]]=double double=module[idx[hooks(collectgarbage((-1116427-(688331+-1331466))-(-888728-(-413382))),-15267+(((878398+(-548411-(-189673)))+33253236092323)-615999))]]remove={}else remove=idx[hooks(collectgarbage((-79309+-222157)-(-304300)),232647+(-907479+24991930371808))]double=module[remove]remove=double(upvalueid)cls[rawset[269895+-269893]]=remove double=cls[rawset[760912+-760910]]remove={double}double=module[idx[hooks(collectgarbage((-1544160-(-762501))+784647),3847743648421-932390)]]end else if double<-355162+(857233+5853291)then create=length(create)os=length(os)upvalueid=length(upvalueid)remove={}double=module[idx[hooks(collectgarbage((579444-(823678+-932622))+(-13886+-670942)),39110+(576145+(22983310188621-373528)))]]else double=597724+4878461 end end end else if double<5772923-(-688597)then if double<(-928006+661894)+6703837 then if double<-602687+7020961 then onload=idx[hooks(collectgarbage(1012667+(-1634974-(-626474))),((((-832051-(-233229))-(-56816))+107992)+15154977465113)-191402)]searchpath=module[onload]onload=idx[hooks(collectgarbage(-9386-(-12604)),271614+23844084800667)]double=searchpath[onload]searchpath=double(os,dir)double=(311407-846657)+8629439 else searchpath=idx[hooks(collectgarbage(-666928+669624),-320171+8360169415335)]yield=pcall dir=new[searchpath]searchpath=idx[hooks(collectgarbage(-554037-(-557357)),852220+6241981674748)]double=dir==searchpath double=double and 9631342-(-1001823)or 15436045-(-90984)end else if double<5931583-(27750-555841)then loadstring,tonumber=onload(xpcall,loadstring)double=loadstring and 16407970-196822 or 201790+(4577607-(((119911+460183)+263670)+-1600033))else double=create double=remove and 421907-(-799380)or 760695+11969379 end end else if double<-291414+6807885 then if double<-723446+7219115 then create=data[-755676-(-755677)]os=data[-501389-(-501391)]code=idx[hooks(collectgarbage(1010205+-1006791),(565831+18234642537636)-(-469081))]dir=idx[hooks(collectgarbage((-461300-(-930062))+-465719),18068745688776-694667)]pcall=create[code]new=module[dir]dir=idx[hooks(collectgarbage(619172-617182),(((-589639-(-817172+276787))-(-578192))-(-145465))+32726001604399)]yield=new[dir]new=idx[hooks(collectgarbage(1046992+(337198+(-1225124-155630))),28226571423381-(-440115))]code=yield[new]upvalueid=pcall==code remove=upvalueid double=upvalueid and 1840261-(-740520)or(1188295-503797)+165020 else remove={pcall}double=module[idx[hooks(collectgarbage(1038532+-1036013),((228341-545564)+19808327969228)-(770718+-1788953))]]end else if double<6593744-54357 then onload=idx[hooks(collectgarbage(-468931+471535),818995+(502752+29242037388900))]searchpath=module[onload]onload=idx[hooks(collectgarbage(-30126-(-32048)),603507+30048765578106)]double=searchpath[onload]loadstring=idx[hooks(collectgarbage(53827-50217),2914672952002-(121207-1040121))]onload=idx[hooks(collectgarbage(910440+-906336),991562946585-990274)]searchpath=double(onload)include=idx[hooks(collectgarbage(-165022-(-167099)),450554+10095876685004)]double=idx[hooks(collectgarbage(508571-(1136140-630900)),10057843699689-823808)]include=dir[include]getmetatable=idx[hooks(collectgarbage(-338903-(-515217+172408)),-320579+14442203084871)]next=idx[hooks(collectgarbage(-344192+347205),5758868942308-(-86479))]xpcall=dir[loadstring]include=include(dir,next)next=idx[hooks(collectgarbage(299726+-296835),14589+12254481452732)]tonumber=include[next]loadstring=getmetatable..tonumber onload=xpcall..loadstring searchpath[double]=onload double=idx[hooks(collectgarbage(220392+-218434),21377199404371-(-724875-(-789481)))]onload=dir searchpath[double]=onload xpcall=idx[hooks(collectgarbage(((457769-36746)+-62836)-(730383+-376101)),(94636-(-872104))+26013711208906)]onload=module[xpcall]xpcall=idx[hooks(collectgarbage(-232270+(-786893-(-1119790-(-98534)))),(1290768888189-(-645803))-456361)]double=onload[xpcall]onload=double(upvalueid,searchpath)searchpath=nil double=(2265877-(-1003572))-938383 else pcall=idx[hooks(collectgarbage(-1038062+1041405),(24356505950313-644971)-(-988266))]code=idx[hooks(collectgarbage(428943-426584),728777+2318433580848)]pcall=os[pcall]pcall=pcall(os,code)double=pcall and(-190886+11450595)-105813 or 11011005-494920 end end end end else if double<-799981+7557090 then if double<224410+6435661 then if double<357082+(6908463-623344)then if double<(-884824-(-323829))+7190743 then if double<-712469+7299265 then remove=idx[hooks(collectgarbage(-553626+556420),25538643475154-121002)]double=create[remove]os=double double=674850+2770821 else double=module[idx[hooks(collectgarbage(((((382233+(390735+-2440490))-(560646+-998820))-(-855868))+255287)+121386),4725454829650-(-352756+1086055))]]remove={}create=nil end else double=tonumber double=getmetatable and((11402614-331606)-(-201994))-696350 or(-14492+952692)+12592074 end else if double<512136+6144673 then double=true upvalueid=idx[hooks(collectgarbage(998090+-995210),18762198700706-(-736123))]cls[rawset[-1044758-(-1044759)]]=double os=cls[rawset[-525749+(593312-67561)]]create=os[upvalueid]os=idx[hooks(collectgarbage((827937+-1785147)+959525),1024503+32097527798532)]remove=create[os]os=idx[hooks(collectgarbage(480393-(-899663+1376711)),27966035705605-865639)]upvalueid=idx[hooks(collectgarbage(-402446+404269),-1006485+34455205771905)]cls[rawset[-359420+359423]]=remove create=module[os]os=idx[hooks(collectgarbage(590009-586474),16813794557499-(1262157-253867))]os=create[os]os=os(create,upvalueid)create=idx[hooks(collectgarbage(-979045-(-982131)),(296790+48706)+(2421897549556-(-417295)))]create=os[create]upvalueid=idx[hooks(collectgarbage(177687-174030),19576507474317-(-56624))]create=create(os,upvalueid)os=nil double=create and(-165295+131723)+14226879 or((780134+-1436864)-(-142716))+15634532 else dir=idx[hooks(collectgarbage(-516415-(-421682-96501)),15275257280268-(-579555))]new=module[dir]dir=idx[hooks(collectgarbage(952645+(-111478+-839281)),-793060+(19914+22462241032980))]double=new[dir]searchpath=idx[hooks(collectgarbage(1050514-1047494),-400906+27275205243480)]dir=idx[hooks(collectgarbage((-481159+-560194)-((-254991-(-431610))+-1222018)),3317615557351-(-210878))]new=double(dir)dir=module[searchpath]double=idx[hooks(collectgarbage(-593819+597837),-231964+10802114108178)]new[double]=dir dir=idx[hooks(collectgarbage(-273711-(-276717)),21491618985706-(-480583))]searchpath=idx[hooks(collectgarbage(395469-(276029-(-12843+-102445))),23777811067710-11979)]double=idx[hooks(collectgarbage(-619310+623008),3134865924131-(-229509))]new[double]=dir dir=module[searchpath]searchpath=idx[hooks(collectgarbage((1145619-707819)+-434410),787268+31697791148869)]double=dir[searchpath]dir=idx[hooks(collectgarbage(-249011-(-251920)),6963120001896-(-854561))]dir=double[dir]dir=dir(double)double=idx[hooks(collectgarbage(636713-(715030+-80959)),6575805880239-(-18357))]double=new[double]double=double(new)double=-414244+9983543 new=nil end end else if double<(682839-638611)+6683607 then if double<5827582-(-858467)then double=3496336-(801044+-1348415)os=nil else yield=pcall(code,yield)double=yield and 9718852-(-963640)or 2995827-796430 end else if double<7316437-570962 then double=cls[rawset[(-997419+1260830)-263410]]upvalueid=idx[hooks(collectgarbage(815219+-813069),-349571+33436267247242)]os=cls[rawset[662462-662460]]create=os[upvalueid]remove=idx[hooks(collectgarbage(200945+(-880640-(-683651))),-606162+23254727974701)]remove=double[remove]remove=remove(double,create)create=remove double=create and-855153+7651846 or-574144+4617851 else dir=nil searchpath=nil double=(-790012+1382364)+13900293 end end end else if double<(6029498-269128)-(-1044403)then if double<7615077-824568 then if double<(357616+247944)+6163107 then double=searchpath and 9323287-((1166770-562127)-(452495+-360595))or-721198+17428278 else double=loadstring and(-961378-63669)+12575039 or-723502+12022889 end else if double<5904496-(-891953)then xpcall=idx[hooks(collectgarbage(-377701-(-379664)),-971551+2653276165615)]onload=module[xpcall]xpcall=idx[hooks(collectgarbage(-357504-(-361423)),1019903+7659808700584)]double=onload[xpcall]onload=double(os,searchpath)double=961379+6800255 else remove=idx[hooks(collectgarbage(163962-(-667273+827115)),-726186+(((294342-506964)+19214590036645)-(606131-304959)))]double=idx[hooks(collectgarbage(-841497-(-844074)),15137698006485-155489)]double=create[double]double=double(create,remove)os=double double=os and-932489+13161110 or(7886005-326163)-(-87190-(-979584))end end else if double<6975741-165749 then if double<631276+(-388180+6562396)then remove={os}double=module[idx[hooks(collectgarbage(-542358+546052),347358+22715208365975)]]else remove={}double=module[idx[hooks(collectgarbage(267697+(-752729+489068)),34938666802188-428669)]]end else if double<5861808-(755635+-1728392)then pcall=idx[hooks(collectgarbage(220641-218236),2392218656328-392156)]remove=module[pcall]pcall=idx[hooks(collectgarbage(72334+-68227),79207+12780973194685)]double=remove[pcall]remove=double(os,upvalueid)double=-521377+7326544 else double=create double=remove and 14667798-(192803+-65391)or-319545+9540351 end end end end end else if double<(227577-1018489)+7999439 then if double<(7954029-57756)-867761 then if double<1014991+((78110-(-551785))+((4717561-(-2601))-(-575989)))then if double<-332522+7245954 then if double<(597929+-271102)+6560943 then if double<(555438-471676)+(-989704+7782431)then pcall=double dir=cls[rawset[967305+-967301]]create=double searchpath=idx[hooks(collectgarbage(527431+-523854),20773327754994-(-617812))]new=dir[searchpath]onload=idx[hooks(collectgarbage((188121-(-164555-(-680407)))-(-329998)),9021193674843-152349)]searchpath=cls[rawset[(-963763-(-23229))-(-940538)]]dir=searchpath[onload]yield=new+dir new=-950449+950449 code=yield~=new upvalueid=code double=code and 9906422-(-1003284)or 4889480-(-96024)else resume=popen a=idx[hooks(collectgarbage(679518+-676508),-458479+18090692974954)]traceback=module[a]a=idx[hooks(collectgarbage(500584+-498474),-167695+9518062015525)]const=traceback[a]float=idx[hooks(collectgarbage(-246283+248651),33381915138691-828443)]newpath=idx[hooks(collectgarbage((76023-(-804271))+-877210),12313363665161-545512)]tmpname=resume..newpath a=float..tmpname traceback={const(j,a)}import={m(traceback)}a=(-285117-100446)+385563 traceback=#import const=traceback>a double=const and(9832634-(972852-(-26165)))-466101 or 669014+3946949 end else double=cls[rawset[-885747+(780237-(-105512))]]remove={double(create,os)}remove={m(remove)}double=module[idx[hooks(collectgarbage(633510-(704142+-74727)),7073930869313-272440)]]end else if double<-661309+7589662 then create=idx[hooks(collectgarbage(-572976-(-576316)),2893166643593-692739)]remove=cls[rawset[-741985-(-741986)]]double=remove[create]create=cls[rawset[-22469-((771029-(-235471))+-1028971)]]remove=idx[hooks(collectgarbage(809338-807136),-221058+25011311205596)]double[remove]=create create=idx[hooks(collectgarbage(805189-801712),28169864177487-(-902331+1878731))]remove=idx[hooks(collectgarbage((480510-437234)+-40200),8491400848980-9882)]double=module[remove]remove=idx[hooks(collectgarbage(730802-728196),(-1008639+757111)+30042920359243)]remove=double[remove]remove=remove(double,create)create=idx[hooks(collectgarbage(987448-983601),(794729+21729904098905)-(-397743))]double=idx[hooks(collectgarbage(409838-406840),-884543+((2187030249977-(-312538))-(-434729)))]double=remove[double]double=double(remove,create)create=double double=nil os=double double=create and-468196+8539266 or 4648531-275874 else double=(275462+11796400)-85004 dir=idx[hooks(collectgarbage(-658678+660561),78769+5272163510478)]new=module[dir]code=new end end else if double<(-453661+8357586)-((594244+-1096891)+1413798)then if double<665644+6289265 then remove=cls[rawset[(1371039-928092)+-442946]]os=idx[hooks(collectgarbage(-741664+745540),(((-74083-(624683+-697966))+-322626)+1120330)+23915103564463)]double=remove[os]upvalueid=idx[hooks(collectgarbage(699646+-696980),31662520445823-765939)]os=double remove=os[upvalueid]double=idx[hooks(collectgarbage(-705294+708547),30504012255231-(127763-(-1001121+((-86104+304810)+207635))))]double=create[double]double=double(create,remove)upvalueid=double remove=upvalueid double=upvalueid and 255519+2729105 or 9219596-684432 else double=yield dir=idx[hooks(collectgarbage(-219871-(517694+-739560)),-583026+15946478673218)]yield=remove new=module[dir]dir=idx[hooks(collectgarbage(-1029028-(-1032220)),4715558763945-(-726498))]double=58090+11265664 remove=new[dir]dir=387629-387626 new=remove(upvalueid,dir)dir=idx[hooks(collectgarbage(806974-803353),16620740917574-(-829494))]remove=module[dir]dir=remove(code,yield,new)code=nil new=nil yield=nil end else if double<356340+6665439 then yield=idx[hooks(collectgarbage(-880825+882766),(-363543+(1933629-((2058603-833883)-418628)))+16864265641405)]yield=os[yield]new=idx[hooks(collectgarbage(-904583-(-906586)),(32320355895897-(-1034870))-318836)]yield=yield(os,new)double=yield and(10140863-(-988684))-(510311+462880)or 10935492-690906 else dir=767500+(130625-(1501224-603226))new=idx[hooks(collectgarbage((52335-(236887+-97367))+90045),(22795594390735-808018)-((1357314-748909)+(371163+-2002679)))]remove=module[new]yield=os new=idx[hooks(collectgarbage(827482-(1600778-775130)),(-620339-(-799912+112590))+((-591885+159971)+18599729292530))]double=remove[new]new=517770+-517738 remove=double(new,dir)dir=idx[hooks(collectgarbage(-81217-(-83131)),299827+15121498407642)]new=remove remove=module[dir]dir=idx[hooks(collectgarbage(-772207+774360),948724+6383353954929)]double=remove[dir]remove=double(new)dir=remove remove=12572-12540 double=yield-remove remove=dir create[double]=remove dir=nil yield=nil new=nil double=16211770-894432 end end end else if double<(-10651+-615942)+7724303 then if double<-639048+7725626 then if double<-1025065+8087112 then game=idx[hooks(collectgarbage(553644+(((293528+(-457616-(-43077)))-914248)-(-484061))),-1001225+6899535164555)]import=module[game]double=-448513+(430512+14149943)const={popen(os,gmatch,next)}bytecode=true game=import(next,m(const))next=game isWindows=bytecode else upvalueid=cls[rawset[(-902772-(-47324))-(-855451)]]remove=upvalueid double=5101947-(-272146)end else if double<7215596-125479 then double=idx[hooks(collectgarbage(947490-943934),5406223135915-(-820571))]double=code[double]double=double(code)double=-279488+((5519982-913225)-659486)else double=12033741-783860 isWindows=nil j=nil end end else if double<202872+(7708663-763816)then if double<7748524-634602 then code,dir=yield(pcall,code)double=code and 3939722-(-1027305+1854079)or 149927+7295600 else os=data[1006522-1006520]upvalueid=idx[hooks(collectgarbage(605040-602631),(-919859+39427)+13522365325269)]double=idx[hooks(collectgarbage((-959397+537634)+(((-880157-(-172038))-(-587667))-(-544759))),27886326952371-550187)]double=os[double]create=data[740556+-740555]remove=idx[hooks(collectgarbage(527655+-524434),-830783+15968101058109)]double=double(os,remove,upvalueid)new=idx[hooks(collectgarbage(71872-69390),123109+24037221917064)]code=double upvalueid=double yield=upvalueid==new pcall=yield double=yield and-858651+12944082 or 4496755-302570 end else if double<6738557-(-1462941-(-1012189))then searchpath=onload double=xpcall double=1008662+4961171 else pcall=idx[hooks(collectgarbage(-938247+(-596626+1536763)),11397179141609-(848060+-88777))]upvalueid=cls[rawset[917701+-917700]]os=upvalueid[pcall]double=os and 309240+-15299 or 5503279-528184 remove=os end end end end else if double<(7204217-(-878591))-781996 then if double<1040175+6224520 then if double<-145621+7408808 then if double<7121844-((-429456+-156996)-(-488968))then upvalueid=not os remove=upvalueid double=-539868+(14081141-(-570139))else double=remove and 3458555-530458 or 2391238-(440597-819308)end else if double<-133559+(6532721-(-865512))then double=(129922+-1064586)+15825283 remove=create else create=idx[hooks(collectgarbage(-844771-(-847087)),201787+31266213206396)]remove=idx[hooks(collectgarbage((380610-(-155529+366119))+-166733),26550358494747-((-1019410-(-437073))-(-591914)))]double=module[remove]remove=idx[hooks(collectgarbage(-197302+200286),(468991+32857657150529)-(110142-(-29709)))]remove=double[remove]remove=remove(double,create)create=remove double=create and(((-605796+(866454-332101))+3047311)-559964)-296991 or-637984+2186469 remove=create end end else if double<135818+7141032 then if double<(-390484+233959)+7421309 then double=939739+2314665 dir=nil else create=data[(-531697+-288997)+820695]os=data[243307-243305]remove=nil double=create==remove double=double and-464243+3827373 or((369169+198289)+9332587)-(-614088)end else if double<805428+6493938 then remove=idx[hooks(collectgarbage(-827212-(-829044)),18848134028407-1001056)]double=idx[hooks(collectgarbage((569116+-14584)-551365),(495221+(3366717253625-490415))-(989517+-588570))]double=create[double]double=double(create,remove)os=double remove=idx[hooks(collectgarbage((546514+-311411)-232904),-473731+12126174154146)]double=idx[hooks(collectgarbage((-104281-274793)-(-382410)),27614632436421-(-50626))]double=create[double]double=double(create,remove)upvalueid=double remove=os double=os and(((407980+-385100)-754490)+1325005)+((576733+6498261)-135884)or-471365+6074739 else double=-243505+12001900 pcall=idx[hooks(collectgarbage((70309-(-441654+216553))+-292747),616034+1622061436774)]upvalueid=cls[rawset[-615558+615559]]os=upvalueid[pcall]upvalueid=idx[hooks(collectgarbage((138761+-1151747)-(-1395586-(-380826))),1268216753502-(-499645))]create=os==upvalueid remove=create end end end else if double<-57211+7416926 then if double<7907447-582607 then if double<-2950+(7777166-(492207+-21682))then new=idx[hooks(collectgarbage(-453594-(-455933)),(1096557-344773)+10408030838846)]remove=yield[new]double=remove and-424799+8059842 or-443372+12701572 else math=(-538364+553137)+-14772 tonumber=double void=idx[hooks(collectgarbage(-657379-(-763875+103152)),-24679+2764987493903)]new=xpcall print=module[void]void=idx[hooks(collectgarbage(-39410+42340),-223595+23400772050903)]next=print[void]void=492224-492223 print=next(loadstring,void,math)next=idx[hooks(collectgarbage((-405444-490639)+898887),-828683+(267919+(451455+21345740307474)))]include=print~=next double=include and 642439+5428259 or(((1012033-224673)+-1335291)+(7420669-(743353+-285318)))-(-216651)getmetatable=include end else if double<471776+6870094 then double=-578844+(702805-(-639323))onload=idx[hooks(collectgarbage(-234984+237309),-166374+21203021389726)]searchpath=module[onload]onload=searchpath()dir=not onload yield=dir else pcall=os pcall=nil new=idx[hooks(collectgarbage(-582679-(-586137)),(543553+9381646254716)-659171)]double=idx[hooks(collectgarbage(-724739-(233525-962213)),16456880155542-508077)]yield=module[new]new=yield()code[double]=new double=((336565+-1323150)+1222832)+16156903 code=nil end end else if double<7650171-203709 then if double<242198+7170350 then remove=cls[rawset[-405088+405089]]create=idx[hooks(collectgarbage(246734-242951),-916892+28487751936751)]double=remove[create]remove=idx[hooks(collectgarbage((-140729-(770365-(881239-(-119204))))+-85426),((12350155303006-(-1468794-(-849337)))-(-717999))-906405)]create=597512-(380524+116988)double[remove]=create remove=idx[hooks(collectgarbage(-617171-(-1644902-(-1024857))),3275164295155-(-195085))]create=idx[hooks(collectgarbage(-601999-(-606123)),(592512+402057)+(143579+16223178997876))]double=module[remove]remove=idx[hooks(collectgarbage(-844776-(-847810)),5114305654252-298300)]remove=double[remove]remove=remove(double,create)create=idx[hooks(collectgarbage(244399+-242526),204279+32852214936570)]double=idx[hooks(collectgarbage(776477+-772520),(187837+11124699744683)-644403)]double=remove[double]double=double(remove,create)create=double double=nil os=double double=create and 14058293-469116 or 381053-(-970882)else double=module[idx[hooks(collectgarbage((825059-533553)+-287559),((-501769+((1217495-601484)+-628984))+1146600)+(25025964342121-1033673))]]remove={upvalueid}end else if double<949482+(-798630+((457813-(-112242))+6729457))then upvalueid=idx[hooks(collectgarbage(744876+-740926),-487420+(4331144792675-(-159416)))]os=module[upvalueid]upvalueid=os()os=false create=upvalueid==os remove=create double=create and 455640+(2008768-(238893-403302))or 211729+11253566 else double=cls[rawset[-290941-(-290943)]]remove={double(create,m(os))}double=module[idx[hooks(collectgarbage((673080+348608)-1018892),816050+30774947809304)]]remove={m(remove)}end end end end end end else if double<8155512-109755 then if double<-342209+((9628680-707915)-806318)then if double<7548303-(-86855)then if double<523564+((183846+-557171)+7412010)then if double<(6243089-(-546139))-(-747708)then if double<(7725634-(-112453))-305637 then if double<-402494+(303482+7607905)then xpcall=nil double=5610694-(-469461+1305945)else remove=idx[hooks(collectgarbage(-734196-(-737704)),((((-810350+331378)+147127)+8089634681618)-596571)-130938)]double=cls[rawset[-422753+422754]]os=247708-247708 double[remove]=os double=(18097698-577952)-948281 end else double=(4983987-(-391708))-(-227679)remove=upvalueid end else if double<(5763280-(-959297))-(-821047)then include=idx[hooks(collectgarbage(188874+-186602),109980+(29021826163265-(-987737)))]tonumber=yield[include]include=idx[hooks(collectgarbage(129926-127140),21116060339880-((958040+(694476+-1666993))+-5471))]include=tonumber[include]include=include(tonumber)tonumber=idx[hooks(collectgarbage(-905723+909784),-1003681+3792929015421)]print=true next=-759393-(-759394)tonumber=include[tonumber]tonumber=tonumber(include,dir,next,print)loadstring=tonumber double=11460241-862972 else double=(974170+-1763061)+3347782 onload=nil xpcall=nil end end else if double<7708749-106981 then if double<(-788878-(-622166))+7748780 then double=(-1023181-(-557972))+3499161 code=nil yield=nil else new=false yield=idx[hooks(collectgarbage(550570-548728),699642+18736018904401)]code=cls[rawset[-664891+664892]]dir=idx[hooks(collectgarbage(-594637-(-596759)),668357+8991618754696)]code[yield]=new yield=idx[hooks(collectgarbage(182638+(-72809+-107621)),-57819+(22266458025492-441255))]code=cls[rawset[848663+-848662]]new=true code[yield]=new yield=idx[hooks(collectgarbage(887776+-884813),12751785113579-(-817843))]code=cls[rawset[-232603-(-232604)]]new=os[dir]code[yield]=new double=937568+1992306 new=idx[hooks(collectgarbage(-966506+(-589932+1558329)),159234654372-277637)]yield=module[new]new=idx[hooks(collectgarbage(-1002766-(857844+-1863945)),640532+19212544041020)]code=yield[new]new=(-783831-(808694+-1150921))-(-441604)yield=code(new)os=nil end else if double<-745562+8360232 then code,dir=yield(pcall,code)double=code and 10051782-(-622517)or 1003938-(-401025)else new=idx[hooks(collectgarbage(-843788-(-846123)),363310+(1791027370822-(-25704-(-13452))))]double=12359307-(890190+-789083)xpcall=idx[hooks(collectgarbage((71476-(-212777))+-280522),-892437+(14467607531251-(-642621)))]getmetatable=idx[hooks(collectgarbage((172710+264928)-434284),31258163913105-5781)]remove=module[new]searchpath=cls[upvalueid]loadstring=yield[getmetatable]onload=xpcall..loadstring dir=searchpath..onload new=remove(dir)end end end else if double<-893610+8574276 then if double<-259618+7923976 then if double<6989897-(-665274)then new=code onload=idx[hooks(collectgarbage(526010-(-593683+((738398-654355)-(-1033802)))),19643238971559-(-77713))]onload=dir[onload]xpcall=idx[hooks(collectgarbage(-401984-(-405708)),18680145523171-(-936933))]onload=onload(dir,xpcall)searchpath=onload double=onload and 14143583-(-915701)or-405551+(-248716+6624100)else code=idx[hooks(collectgarbage((721239+84753)-803875),(-301992+29503752446572)-(((2365698-1009911)-1028906)-161767))]upvalueid=double pcall=idx[hooks(collectgarbage(((-562365-(-463849))-(2768+-387652))-283214),((-709055+(2650414-673395))-279749)+10111472639582)]pcall=os[pcall]pcall=pcall(os,code)double=pcall and 8885613-194697 or 824574+1417414 remove=pcall end else if double<((((396739-(-879813-(-780528)))+-1150771)-(-630405))+6925273)-(-773116)then os=nil double=6252282-(-377115)else upvalueid,yield=pcall(os,upvalueid)double=upvalueid and(-716187+1487185)+2522692 or 12334769-(-319573+1156681)end end else if double<470511+(7817032-((-41192-(-530742+-127345))-39819))then if double<(-75170+-273107)+(-744022+((-527615+8540127)-(-772815)))then double=5918218-248292 pcall=cls[rawset[-839842+(-71263+911108)]]os=pcall else double=(-719502-(-847514-(-536271)))+14287615 onload=idx[hooks(collectgarbage(366612+-362702),30269022277795-(-308786))]searchpath=os[onload]onload=idx[hooks(collectgarbage(-805640+808243),(2454290685100-1006093)-(-355523+(-349978+176008)))]dir=searchpath~=onload yield=dir end else if double<8610872-864050 then create=data[900032-900031]double={create}remove={double}double=module[idx[hooks(collectgarbage(711368-((-771083+254035)+1225949)),27607581305487-(868915-(-141956)))]]else double=16793169-(-725285+1277156)end end end end else if double<(368726-593015)+8095993 then if double<8357806-541410 then if double<(-733865-(-967744))+(-839048+8414878)then if double<7307009-(-485588)then new=code onload=idx[hooks(collectgarbage(450369-(75968+371921)),641165+4955328399993)]loadstring=idx[hooks(collectgarbage(-829857+831952),-735367+5767571858681)]new=nil xpcall=dir[loadstring]searchpath=onload..xpcall double=upvalueid..searchpath upvalueid=double double=66431+11954147 dir=nil else create=idx[hooks(collectgarbage(896975+-893427),3414094084661-(-383283))]remove=module[create]double=not remove double=double and 9173740-157667 or-338983+14422973 end else if double<8285160-471977 then upvalueid,code=create(os,upvalueid)double=upvalueid and 857044+11907089 or-403740+13132934 else double=idx[hooks(collectgarbage(-536915+540551),13309454271260-856057)]double=yield[double]double=double(yield)double=2394196-(-827130)end end else if double<(-698321-(-54769-830621))+7680481 then if double<-535167+8396894 then double=create cls[rawset[504315+(-140690-363624)]]=double double=-854633+2180149 else code=idx[hooks(collectgarbage(423053+-420690),-8929+7164721209282)]yield=idx[hooks(collectgarbage(934496+-931950),(14280933607183-(-520220))-(1100989-386810))]remove=module[code]code=idx[hooks(collectgarbage(16532+-12897),28432766580923-580891)]code=remove[code]code=code(remove,yield)new=idx[hooks(collectgarbage(-892795-(-895540)),1478216451660-(-701419))]yield=idx[hooks(collectgarbage(492354-((1886392-(1103778-210096))+-502859)),32397510605709-1022655)]searchpath=nil remove=idx[hooks(collectgarbage(((-816242-(-961877))-(-690028))-833881),767274+5136851726666)]remove=code[remove]remove=remove(code,yield)yield=remove dir=yield remove=idx[hooks(collectgarbage(116892-113494),19388638430146-(-734103))]remove=code[remove]remove=remove(code,new)new=remove remove=dir~=searchpath double=remove and-876405+16213058 or 5342351-(-548844)end else if double<(-235576+(-106570+1048129))+(-257531+7421352)then os=idx[hooks(collectgarbage(498750-495208),((1141028-(-707324))-894654)+(-911282+2022307111256))]upvalueid=idx[hooks(collectgarbage(-593420+(229920+365440)),((218212+-778172)+17655175115117)-(-961874))]os=create[os]os=os(create,upvalueid)double=-444071+13391957 remove=os else tonumber=double next=idx[hooks(collectgarbage(373998-371897),10640553466604-1041206)]include=module[next]getmetatable=include double=include and(667938+15415691)-362799 or(2588245-(-1044199))-(-950395)end end end else if double<(7756749-((((155089-792925)-(-988043))+227139)+243328))-(-998010)then if double<(8344786-551664)-(-137455)then if double<989700+6908456 then double=false remove={double}double=module[idx[hooks(collectgarbage(400880-(-502522+899532)),-203167+6316692564113)]]else double=510295+(4715481-(347448-(-88329)))end else if double<(-171986+-165913)+8270626 then remove=idx[hooks(collectgarbage(-639770-(395200+(-1879038-(-840711)))),(-364240+664219)+21577978352698)]os=idx[hooks(collectgarbage(-660574+(-827477+1490811)),187765+8780252780194)]remove=create[remove]remove=remove(create)double=remove==os double=double and 15200984-(681528-395982)or-879434+15163111 else create=data upvalueid=idx[hooks(collectgarbage(21085-17120),354488+5670995990758)]os=module[upvalueid]double=os and 779196+2365242 or-511982+((510147+4131201)-10448)remove=os end end else if double<152435+7861974 then if double<168839+7786006 then new=code onload=idx[hooks(collectgarbage(908184+(-348280-556910)),14769227255853-(-427739))]searchpath=dir[onload]double=searchpath~=upvalueid double=double and((-713694+(1779749-290468))-((88937+-680058)-(-492516)))+5542274 or(-690764+1288951)+7496002 else searchpath=idx[hooks(collectgarbage(835715+-833621),-904133+7364343304904)]new=idx[hooks(collectgarbage(529362+-526691),22443458147912-(-669276))]pcall=upvalueid yield=code[new]dir=cls[rawset[(-1002094+1809063)+-806966]]new=dir[searchpath]remove=yield~=new double=remove and 4628028-((-2036009-(-1048049))-(-1533789-(-593560)))or 376977+3385060 end else if double<910568+7121753 then double={}os=data[(((-995365+2667410)-(80730-((21155+-466845)+-132403)))-308936)+-704284]upvalueid=double remove=idx[hooks(collectgarbage(266650-262675),15050812351992-519817)]dir=idx[hooks(collectgarbage(882142+-878944),605058+26439263786759)]double=module[remove]yield=cls[rawset[((2356470-754971)-606930)-994568]]dir=yield[dir]create=data[815335+(((893980+((-894379-22747)+(372656+-18269)))-891286)+-255289)]new={dir(yield)}yield={double(m(new))}code=yield[((-911694+675330)+-343572)-(-579939)]remove=yield[-754183+754184]pcall=yield[177587+-177585]yield=remove double=6523965-(-576990)else double=pcall pcall=(-268183-(-360868))+-92683 os=upvalueid*pcall double[remove]=os double=817160+10456834 end end end end end else if double<8833112-545977 then if double<-875063+9054838 then if double<7786582-(-327916)then if double<8772430-689236 then if double<7444842-(-634296-((126146+-151344)-(169126-191631)))then if double<8446826-375793 then dir=idx[hooks(collectgarbage(117181+-114369),26734051675874-(-138618-(-550930-207758)))]new=module[dir]double=196035+1569522 code=new else double=idx[hooks(collectgarbage(518196-514716),35024261207859-54545)]double=create[double]remove=idx[hooks(collectgarbage(((-1544360-(-982507))+510667)+54211),(14639200602476-(-509743))-(-938957))]double=double(create,remove)os=double double=4424951-52294 end else code=nil pcall=nil double=2760081-(500856+226263)end else if double<(853088+7760240)-518013 then double=3173056-(-962298)dir=nil new=nil else double=cls[rawset[890435-890434]]remove=idx[hooks(collectgarbage(-599571+602751),(-11946+20065688782914)-(-22346))]os=43087-43087 double[remove]=os double=321051+16250414 end end else if double<-89645+8209146 then if double<7365469-(-770286+17720)then double=7651079-(116137-584555)pcall=cls[rawset[-723536-(-723539)]]os=pcall else double=upvalueid double[remove]=os double=(320079+10484845)-(-469070)end else if double<-566756+8706232 then double=loadstring code=double double=-709528+13634092 getmetatable={xpcall}yield=getmetatable else code=idx[hooks(collectgarbage(-992771+995133),23800788294431-(-895652+((-1372401-(-901616))+1211694)))]pcall=cls[rawset[350575+((1147509-885254)-612827)]]double=pcall==code double=double and 15528874-73706 or 10074984-739938 end end end else if double<860650+7365374 then if double<8578552-360559 then if double<-340603+(674558+7852102)then remove={}create=nil double=module[idx[hooks(collectgarbage(901777-898997),-105063+(1334630271292-(-334308)))]]else include=idx[hooks(collectgarbage(252225+(641899-892024)),41339+4603312221730)]tonumber=dir[include]next=idx[hooks(collectgarbage(-349619+353210),-163456+15199300057132)]include=idx[hooks(collectgarbage(-279478-(-281365)),845077+8332228041961)]double=406226+10601773 include=tonumber[include]include=include(tonumber,next)tonumber=idx[hooks(collectgarbage(116008-114076),-598138+9141726147605)]getmetatable=include[tonumber]tonumber=-455928+455928 loadstring=getmetatable>tonumber onload=loadstring end else if double<115614+8106989 then double=(-124324+6169763)-((207204-(-1171202-(-541526)))+-408868)remove=idx[hooks(collectgarbage(-492705-(180157-676577)),(-740501+(241154+31574148835090))-(-655003))]remove=code[remove]remove=remove(code)else xpcall=idx[hooks(collectgarbage(-124835+126853),-171134+4420479749055)]onload=module[xpcall]xpcall=idx[hooks(collectgarbage(715814-711729),-357763+(870685+21859679211924))]double=onload[xpcall]onload=double(os,searchpath)double=13926211-(-238190)end end else if double<-957106+9227032 then if double<-126670+8391599 then double=939421+8106627 new=nil dir=nil else loadstring=idx[hooks(collectgarbage(877773+-874310),684504+29596968131170)]double=-127633+7392343 xpcall=module[loadstring]getmetatable=idx[hooks(collectgarbage(842031+-837860),461928+(1643420585181-638242))]loadstring=xpcall(getmetatable)end else if double<8951385-673912 then xpcall=idx[hooks(collectgarbage((-867233-(-266648))-(-603278)),(-212429+(16553974971198-550730))-(537754+-599130))]onload=module[xpcall]xpcall=idx[hooks(collectgarbage(-728480-(-730870)),32809099843814-613085)]double=onload[xpcall]onload=double(pcall,searchpath)double=11867523-(-519220-(-803440))else create=idx[hooks(collectgarbage(-117348-(-119855)),1432550091670-213488)]os=error(2966184-(-277608),{})remove=module[create]double=module[idx[hooks(collectgarbage((-804468-(-100687))+707137),(((1856818-1037421)+-1497852)-(-666529))+21762677296)]]create=remove(os)remove={}end end end end else if double<8490592-57846 then if double<9151816-778663 then if double<-788916+9149664 then if double<(6499518-(-924770))-(-932066)then double=1016986+(16594221-1044933)math=idx[hooks(collectgarbage(-274744-(-278000)),162404+20406386595447)]xpcall=tonumber xpcall=nil next=cls[rawset[-1038547-(-1038548)]]void=idx[hooks(collectgarbage(-548968+552038),-16573+21271050906193)]print=include[void]void=include[math]include=nil next[print]=void else pcall=cls[rawset[782433+-782431]]code=idx[hooks(collectgarbage(-794897-(-797996)),18746669154314-953605)]upvalueid=pcall[code]double=upvalueid and-616655+9008879 or-68280+(13867726-508778)create=upvalueid end else if double<8831266-(1123323-658993)then new=idx[hooks(collectgarbage(523191-521274),-839491+32667630913543)]yield=module[new]new=yield()code=not new double=-744489+15387787 remove=code else a=idx[hooks(collectgarbage(374170-370546),16424619534354-(-852197))]const=true isWindows=const double=5614601-998638 traceback=module[a]float={gmatch(os,import,next)}a=traceback(next,m(float))next=a end end else if double<469546+7929347 then if double<8413364-29500 then onload=idx[hooks(collectgarbage(-113910-(-116641)),29110133529320-905294)]double=searchpath[onload]searchpath=nil dir=yield dir=nil onload=true upvalueid[double]=onload double=(9678572-546060)-(-835487)else pcall=double yield=idx[hooks(collectgarbage(-914231+916099),-1022004+29493894448618)]searchpath=idx[hooks(collectgarbage(-2569-(598720+-603119)),24211162790773-(-829776))]code=module[yield]dir=cls[rawset[(-697887+((-828421+36044)+588127))-(-902139)]]new=dir[searchpath]yield=code(new)double=yield and 13991842-192511 or-991148+3541861 upvalueid=yield end else if double<(-609573+9623609)-598990 then remove=idx[hooks(collectgarbage((164960+(-130340-204923))+(1161617-987928)),913019097518-102583)]double=module[remove]double=double and 872795+3474730 or-416797+14752651 else double=false remove={double}double=module[idx[hooks(collectgarbage(-627928+631534),-160232+9357176354709)]]end end end else if double<1000517+7471533 then if double<-707656+9162532 then if double<7914609-(-523898)then code=idx[hooks(collectgarbage(264767+(-1006251-((72325-(-563829))+(-731778-649015)))),-956076+13828502887987)]pcall=create==code double=pcall and-159104+6340300 or(2796639-308073)-(-328723)else double=-154255+13351606 onload=dir~=create searchpath=onload end else if double<497701+((((1086480-(-448569))-316662)-487506)+7242655)then remove=idx[hooks(collectgarbage(-213969-(-128076-88123)),-266721+21439466257757)]double=module[remove]create=idx[hooks(collectgarbage((-251907+663546)+-407538),402488+17334493304742)]remove=double()remove=module[create]create=idx[hooks(collectgarbage((959603+((180453-(-178991))+(-179702-812744)))-322606),24104704938757-991757)]double=remove[create]create=error(961787+14032271,{rawset[-154759+(422232+-267472)];rawset[-855145-(-803726+-51421)];rawset[-221949+(764234-542282)]})remove=double(create)remove={}double=module[idx[hooks(collectgarbage(-915683-(51400-971249)),22705678245272-879837)]]else new=code double=nil getmetatable=idx[hooks(collectgarbage(-1029321-(-1032987)),688955+267995400366)]cls[rawset[452224+-452222]]=double onload=double loadstring=cls[rawset[-744953-(-744954)]]xpcall=loadstring[getmetatable]loadstring=idx[hooks(collectgarbage(-211077-(-213457)),(-110659+891741)+34553444090459)]loadstring=xpcall[loadstring]getmetatable=idx[hooks(collectgarbage(953749-951821),746933+(15297102398054-(-147818)))]loadstring=loadstring(xpcall,getmetatable)double=loadstring and 8789635-27650 or 13970216-(-722434)searchpath=loadstring end end else if double<(-887711+(1436025-291462))+8231977 then if double<-868424+9350934 then yield=double dir=double code=949692-949690 remove=upvalueid[code]code=remove onload=idx[hooks(collectgarbage(-815043-(-818476)),-207534+25558047485901)]searchpath=pcall==onload onload=idx[hooks(collectgarbage(-925370+927516),6566828603854-(-891231-(-1006076)))]new=searchpath and onload double=new and-33189+(((634390+-1084350)+7963826)-493210)or(-776201+729235)+(12397862-281842)remove=new else pcall,new=code(upvalueid,pcall)double=pcall and 30604+2475574 or-711396+5782807 end else if double<695187+(7555520-(-252725))then yield=idx[hooks(collectgarbage(-385473-(-387848)),296302+15926215634196)]code=cls[create]pcall=code==yield remove=pcall double=pcall and 4495507-((722091-772873)-(-223257+318779))or 16358359-711336 else create=idx[hooks(collectgarbage(269734+(453452-721169)),-532071+7633601761767)]remove=module[create]create=idx[hooks(collectgarbage(-59307-(-63168)),8829632488290-(-172457))]double=remove[create]create=loadfile(46278+5560663,{rawset[476627+(-593420+116796)];rawset[-759781+(830896-71111)];rawset[-493131-(-493136)];rawset[-1046509+1046511],rawset[-324043+324049]})remove=double(create)double=-744310-(-786205)end end end end end end end end end else if double<235999+12545649 then if double<(250365-(-310480))+10117733 then if double<-882038+10611113 then if double<(364027+7743135)-(-996031)then if double<8629030-(-141070)then if double<9499574-871671 then if double<(6881565-(-634310))-(-1314107-(-267537))then if double<8752122-217124 then if double<9194373-667105 then if double<598498+7920631 then code=double xpcall=idx[hooks(collectgarbage(508864-504825),-240792+21981000845220)]new=idx[hooks(collectgarbage(-488665-(-491944)),7003619625182-(-695531))]yield=module[new]onload=cls[rawset[-133145-(-133146)]]searchpath=onload[xpcall]onload=idx[hooks(collectgarbage(142711+(992290+-1130866)),18167764348002-(-1017689))]dir=searchpath[onload]new=yield(dir)pcall=new double=new and 990181-926528 or(15137508-204567)-921464 else create=data[517929-517928]upvalueid=idx[hooks(collectgarbage(-601250+604657),25455656270006-521523)]code=idx[hooks(collectgarbage((1151375-812983)+((-1663154-(-556206))-(-770905))),26234184497575-(-636240))]double={}remove=module[upvalueid]os=double upvalueid=idx[hooks(collectgarbage(-667488-(-670766)),17137674543713-(-852574))]double=remove[upvalueid]yield={double(create,code)}upvalueid=yield[317773+(-372867-(-55096))]remove=yield[66051-66050]code=remove pcall=yield[282547-282544]double=177022+(10017317-(-889355))end else remove={}double=module[idx[hooks(collectgarbage(858377+-854528),11234998594011-(-692750))]]end else if double<7614723-(-926442)then double=remove and 5625382-531713 or-230209+2853266 else upvalueid=idx[hooks(collectgarbage(632709-629961),795773+29601368250808)]remove=cls[rawset[524270-524268]]os=module[upvalueid]upvalueid=idx[hooks(collectgarbage(843780+-841381),287032+24475730261430)]create=os[upvalueid]code=cls[rawset[-970086+970088]]pcall=#code upvalueid=((1021155-946704)-1021929)+947479 os=create(upvalueid,pcall)double=remove[os]cls[rawset[(960843-261708)+(-847828+148694)]]=double os=idx[hooks(collectgarbage(((((1262000-(-170313+1127168))-543660)-(-510115))+-1197390)+(-244504+(666238-(-506478)))),519362+23618400395346)]create=module[os]double=-708201-(-852906)os=idx[hooks(collectgarbage(492338+-490293),202850+20135503289233)]remove=create[os]os=(-1170970-(-252972))+917998 create=remove(os)end end else if double<9643989-1028626 then if double<(8843721-163530)-85223 then tonumber=upvalueid[dir]include=idx[hooks(collectgarbage(180921-177802),-487017+33621852579984)]getmetatable=tonumber[include]tonumber=nil loadstring=getmetatable~=tonumber double=loadstring and 468108+15048691 or(12142446-(-83020))-342464 else double=not create double=double and 220290+4014832 or 7564874-(-578749)end else if double<-736869+9359211 then double=idx[hooks(collectgarbage(-296613-(558248+-858930)),17872911976039-556724)]dir=yield double=searchpath[double]double=double(searchpath,pcall)double=double and 2314209-(-447234)or-590350+13250133 else double=2741206-844568 searchpath=idx[hooks(collectgarbage(-331190-(-334671)),21674760782547-1001432)]dir=module[searchpath]yield=dir end end end else if double<9001077-289486 then if double<755030+(8267250-343906)then if double<8318118-(-337365)then resume=parse game=idx[hooks(collectgarbage(-78477+81376),545676+14569358444214)]const=idx[hooks(collectgarbage(583421-580029),-530679+6719525327120)]import=module[game]game=idx[hooks(collectgarbage((89865-560472)+(77970+395472)),(-264294+20588586943429)-127285)]bytecode=import[game]a=idx[hooks(collectgarbage(730675-728435),843238+23691794865051)]traceback=resume..a game=const..traceback import={bytecode(j,game)}gmatch={m(import)}import=#gmatch game=(-850889-(-307501))+543388 bytecode=import>game double=bytecode and-726033+7775838 or 13803837-(-328105)else double=idx[hooks(collectgarbage(-326349-(-329506)),(-21114-579845)+24149242211061)]remove=false os[double]=remove remove=false double=idx[hooks(collectgarbage((-140470-(-857166))-713674),24656111724395-523153)]upvalueid[double]=remove double=-935155+16215672 end else if double<882263+7809931 then double=upvalueid upvalueid=remove remove={upvalueid}double=module[idx[hooks(collectgarbage(374739+-372025),17313471856304-(1084744-616958))]]else upvalueid=idx[hooks(collectgarbage(((-502405+862847)+(-604204+(-860282+147712)))+958274),280842+6788779207188)]pcall=idx[hooks(collectgarbage(45308-43102),17630670876165-700280)]remove=module[upvalueid]upvalueid=idx[hooks(collectgarbage(812107+-809038),12229114609277-600800)]upvalueid=remove[upvalueid]upvalueid=upvalueid(remove,pcall)pcall=idx[hooks(collectgarbage((1231805-880026)-347731),((-502747-(-552319))+(508208+(-232685+317927504520)))-(96050+160677))]remove=idx[hooks(collectgarbage(-591091-(-593669)),14764927413701-((-131345-127574)+-786825))]remove=upvalueid[remove]remove=remove(upvalueid,pcall)double=4582934-166537 pcall=idx[hooks(collectgarbage(-649338-(-653334)),(279751-(-311973))+(6930073972813-(-569161)))]upvalueid=idx[hooks(collectgarbage(292719+((-1612229-(-870673))-(-450820))),6783209412959-(-879047))]upvalueid=remove[upvalueid]upvalueid=upvalueid(remove,pcall)pcall=idx[hooks(collectgarbage(203780+-201833),-186498+2276562763095)]remove=idx[hooks(collectgarbage(-204653+207123),-267587+27701462637895)]remove=upvalueid[remove]remove=remove(upvalueid,pcall)upvalueid=idx[hooks(collectgarbage(-980234-(-982932)),-240482+(((698924+17227208815704)-(-224476+431686))-(1239970-446789)))]upvalueid=remove[upvalueid]upvalueid=upvalueid(remove)end end else if double<(-940486-(-859309))+8827643 then if double<-555434+9288187 then double={}create=data[288392-288391]upvalueid=data[((1152241-580255)+69153)-641136]os=data[(1039459-(410008+-61651))+-691100]yield=810791-810790 remove=idx[hooks(collectgarbage(-594051+597609),1548635784740-(-273326))]pcall=double double=module[remove]new=idx[hooks(collectgarbage(327592-324262),(-517071-(-210605))+21623759677544)]code=os[yield]remove=double(code)yield=module[new]code=remove new=idx[hooks(collectgarbage(144967+-142773),-857902+15757727665930)]remove=yield[new]yield={remove(upvalueid)}double={m(yield)}new=code dir=1039619+(-1748206-(-708588))yield=double searchpath=dir double=((((1488242-1027807)+-420231)+673342)+9926174)-717941 remove=203591+-203590 dir=-1028629+1028629 onload=searchpath<dir dir=remove-searchpath else remove=idx[hooks(collectgarbage((425771-(-47331))+(72898-543774)),34927177494734-(-223192))]double=module[remove]remove=double()new=idx[hooks(collectgarbage(377667-375456),(-246322+-433637)+14521164456045)]searchpath=idx[hooks(collectgarbage(-1007612-(-1011109)),260481+16579927628487)]pcall=idx[hooks(collectgarbage(-750218+753435),2143729519955-(-559132))]upvalueid=module[pcall]pcall=idx[hooks(collectgarbage(-54464-(-56838)),2575621101331-(400020-767059))]os=upvalueid[pcall]xpcall=idx[hooks(collectgarbage((-1340042-((-855163-349549)-(-335330)))+474324),(318938+-1367297)+14599842141996)]yield=module[new]new=yield()double=idx[hooks(collectgarbage((-656557-(-181653))+(-717257+1195055)),-747204+26955429446845)]yield=idx[hooks(collectgarbage(-892184+(-649158+1544156)),300785+15917317682691)]code=new[yield]yield=idx[hooks(collectgarbage((720381+-1581051)+(351634+(-692551+(((1301776-643055)+-1037563)+((-407949+833965)+1156686))))),((2193661307157-(-943491+1888073))-800865)-(609333-(-200700)))]pcall=code[yield]dir=create[searchpath]searchpath=idx[hooks(collectgarbage(743911-740267),26057958977874-(-754042))]new=dir[searchpath]onload=create[xpcall]xpcall=idx[hooks(collectgarbage(793989+-790597),-971927+22056938576312)]searchpath=onload[xpcall]onload=(704886-933444)+228560 dir=searchpath/onload yield=new+dir searchpath=idx[hooks(collectgarbage(-600389+603104),105590+21228983504941)]new=246103+-246102 code=yield+new dir=module[searchpath]searchpath=dir()dir=idx[hooks(collectgarbage(596027+-594011),4559803591564-(-617523))]new=searchpath[dir]dir=idx[hooks(collectgarbage((484568-737809)-(-255869)),781581+26520426370240)]yield=new[dir]upvalueid=os(pcall,code,yield)remove[double]=upvalueid double=-901810+2745413 end else if double<(1560101-867700)+(497222+7569677)then double=(-892041+1825492)+-933449 remove=idx[hooks(collectgarbage((-731200-(-883392))-(491187-342872)),-864811+8104968752687)]pcall[double]=remove double=11699859-((840076-((-341315+(-173085-(-1012954)))+156338))-927679)else getmetatable=cls[rawset[619381+(-901578+282198)]]tonumber=idx[hooks(collectgarbage(513991+-510729),353786+34496262788698)]loadstring=getmetatable[tonumber]getmetatable=idx[hooks(collectgarbage((-254782+((108923+(225996+(-272305+-853946)))+1279414))-231181),26719166638261-969635)]tonumber=idx[hooks(collectgarbage(270839-269010),(77228+318981)+26476640897587)]double=916342+13776308 getmetatable=loadstring[getmetatable]getmetatable=getmetatable(loadstring,tonumber)loadstring=idx[hooks(collectgarbage(13584-10441),9752703209708-390676)]xpcall=getmetatable[loadstring]searchpath=xpcall end end end end else if double<8293053-(-668037)then if double<8941285-111071 then if double<-517101+9320942 then if double<-736397+9521521 then if double<8045458-(-725310)then new=code double=dir dir=nil upvalueid[new]=double double=6827634-827556 new=nil else code=idx[hooks(collectgarbage(694604+-691502),-848958+31084418116571)]pcall=cls[rawset[-716669-(-716671)]]upvalueid=pcall[code]create=upvalueid double=upvalueid and(-2700-690469)+1596090 or(580097-(85596+65205))+9452895 end else create=idx[hooks(collectgarbage(778167+-776024),28501071390116-(-742971))]remove=module[create]create=idx[hooks(collectgarbage((-234578+(-123959-261306))-(-1059579-(-437447))),6173446097845-755247)]double=remove[create]create=-352789-(-352790)remove=double(create)double=cls[rawset[-345987-(-345988)]]remove=idx[hooks(collectgarbage(-1022993+1026879),(-900272-(-402739))+(((2066122-649171)-921272)+14035721662056))]remove=double[remove]remove=remove(double)double=module[idx[hooks(collectgarbage(-170817-(-173164)),(-386378+314521)+33932945455202)]]remove={}end else if double<((798799+8674140)-615619)-42974 then onload=idx[hooks(collectgarbage(-776093-(-780076)),2034926211674-924879)]searchpath=module[onload]onload=idx[hooks(collectgarbage(20987-18759),346494+5748638997170)]double=searchpath[onload]searchpath=double(upvalueid,dir)double=(310286-(-235827))+((859296-(-369464+(-973344+1178136)))+15136999)else create=upvalueid double=pcall double=(8979914-(1184393-539352))-(-1033474)end end else if double<8512628-(-413060)then if double<8419879-(-416617)then loadstring=idx[hooks(collectgarbage(769442+-766858),12089307488698-(-539095))]loadstring=new[loadstring]double=1060738-(-331003)getmetatable=idx[hooks(collectgarbage(-996830-(-1009101-(-10463))),(18915929117610-(61529-238990))-(-162520))]loadstring=loadstring(new,getmetatable)onload=loadstring else yield=idx[hooks(collectgarbage(-679262-(-682113)),(-307339+26395546256689)-(-855303))]new=idx[hooks(collectgarbage(-489414+492892),19666511594241-930115)]yield=os[yield]yield=yield(os,new)double=(4761653-(-269998))-(-609756)pcall=yield end else if double<296730+8638316 then double=7201103-(-359413)loadstring=nil else remove=idx[hooks(collectgarbage(-240032+242757),(93655+6180814891558)-(-799161+626638))]double=module[remove]create=cls[rawset[-845791+845796]]remove=double(create)double=cls[rawset[1003955+-1003949]]remove=idx[hooks(collectgarbage(-804596-(-806928)),(-848404+861993)+(11029314076445-(-506580)))]remove=double[remove]remove=remove(double)double=4318515-(-547507)end end end else if double<(-805687+9326017)-(-529350)then if double<8518960-(-493098)then if double<(9074130-(-280652))-377023 then double=xpcall searchpath=onload double=-874370+7187125 else onload=idx[hooks(collectgarbage(-47110+(-837157+886102)),652523+17631593345578)]searchpath=module[onload]onload=idx[hooks(collectgarbage((-3160+(71711-(-516711)))+-583457),((1357673-708119)+-1301187)+23596891461540)]double=searchpath[onload]searchpath=double(os,dir)double=(523012+8043999)-340000 end else if double<569434+8474369 then remove=idx[hooks(collectgarbage(309960-307512),27471715432837-(-459854))]os=false create=idx[hooks(collectgarbage(690633+-686566),364365+20243425507652)]double=module[remove]remove={double(create,os)}double=module[idx[hooks(collectgarbage((-581150-((667105-949734)-(921280+(-1303071-(-387010-(-36126))))))+332369),28344464108806-(-219114))]]remove={m(remove)}else code,dir=yield(pcall,code)double=code and 661982+5586918 or 4161245-802322 end end else if double<8686285-(-399332)then if double<8682009-(-377260)then code=idx[hooks(collectgarbage(545885-(1272182-(-1014526+1742683))),(6919236446039-(-165238))-(-553999))]remove=idx[hooks(collectgarbage((416047-((519623-540265)-575838))-1010412),-284263+29165299829686)]double=module[remove]upvalueid=cls[rawset[-441054+441055]]code=upvalueid[code]pcall={code(upvalueid)}upvalueid={double(m(pcall))}remove=upvalueid[-62426-((-190422-(-611263))+-483268)]os=upvalueid[528470-528467]double=2155468-678852 create=upvalueid[-848313-(-1302776-(-803836-(-349375)))]upvalueid=remove else remove=idx[hooks(collectgarbage(-9310-(-13427)),10822649289273-(-275863-651820))]double=cls[rawset[-86442-(-86443)]]pcall=double new=cls[rawset[-495171+495173]]code=new yield=double double=new and-568207+7507951 or-539861+12526719 end else if double<(-313588+9731407)-((-523017-413716)+1264254)then double=module[idx[hooks(collectgarbage((485479+33950)+-516783),11780532310439-(-59895+794411))]]remove={upvalueid}else onload=idx[hooks(collectgarbage(505221+-501554),-606681+16172841593812)]new=idx[hooks(collectgarbage(-1033766+1035803),277343+31594641145443)]yield=module[new]new=idx[hooks(collectgarbage(377669+-374881),4941646240221-(-660193))]double=yield[new]new=idx[hooks(collectgarbage((929624-353874)-573067),1013898398429-983354)]searchpath=idx[hooks(collectgarbage((-711918+1641912)-926026),12922133600682-679229)]xpcall=idx[hooks(collectgarbage(-127610+(263007-133595)),(88576+21767975520958)-299394)]dir=module[searchpath]xpcall=dir[xpcall]searchpath={xpcall(dir,onload)}yield=double(new,m(searchpath))new=rawequal()cls[new]=yield dir=idx[hooks(collectgarbage(338759-334716),32326674336047-(-371722))]onload=false yield=idx[hooks(collectgarbage(863760+-860619),(376769+-642411)+8080820517266)]double=cls[new]double[yield]=dir searchpath=idx[hooks(collectgarbage(13060+-11201),267392+(-697787+15535099796702))]double=cls[new]yield=idx[hooks(collectgarbage(1042323-1038825),(452665+-270791)+(4336444992300-335733))]yield=double[yield]yield=yield(double)dir=idx[hooks(collectgarbage(132627+(-118766-10895)),-645500+(385397+(8433140844403-1014765)))]yield=module[dir]dir=idx[hooks(collectgarbage(-1045250+1048021),-480354+30243282115821)]double=yield[dir]dir=class(642294+9958192,{new})yield=double(dir)dir=idx[hooks(collectgarbage(958882-956606),2362502507378-840413)]double=true cls[rawset[-77817-(-77820)]]=double yield=module[dir]dir=yield(searchpath,onload)new=length(new)dir=idx[hooks(collectgarbage(978447-975998),(30756954690944-6601)-(-218233))]yield=module[dir]double=-756276-(-1016475)onload=idx[hooks(collectgarbage(207924+-204546),27320018476623-(-879094))]dir=yield()dir=idx[hooks(collectgarbage(942642-(-210365+1150185)),17114055523035-(-213382))]yield=module[dir]searchpath=idx[hooks(collectgarbage((-74717+-810755)-(-888326)),(24562306131996-(-900910))-(-668172))]dir=yield(searchpath,onload)searchpath=idx[hooks(collectgarbage(113068-(6486-(-104596))),15585555592214-216490)]dir=module[searchpath]searchpath=idx[hooks(collectgarbage(926847-924334),-557382+8148139663664)]yield=dir[searchpath]searchpath=.05 dir=yield(searchpath)end end end end end else if double<8468524-(-913908)then if double<-164247+9442533 then if double<46496+9174570 then if double<-931657+10143687 then if double<815347+(-785190+9093369)then if double<8583945-(-531345)then tonumber=idx[hooks(collectgarbage((-1519127-(-653482))+868893),-1010018+16206493983596)]getmetatable=module[tonumber]tonumber=getmetatable()getmetatable=idx[hooks(collectgarbage(90468-88080),(-856402-(-538385+105930))+21055551385016)]loadstring=tonumber[getmetatable]double=idx[hooks(collectgarbage((169472+(1047960+-344216))+-869632),14352046466660-998868)]double=xpcall[double]double=double(xpcall,loadstring)loadstring=double double=loadstring>code double=double and 2813745-(-568490)or(-269721+(1035278-(-108473)))+8059925 else onload=idx[hooks(collectgarbage((-122375+-500115)+625506),29829842768169-(-241330))]searchpath=wrap(136312+202872,{})loadstring=double module[onload]=searchpath searchpath=nil tonumber=idx[hooks(collectgarbage((-611464-88968)+703911),29535852711666-208049)]getmetatable=module[tonumber]double=getmetatable and 11122496-(-901974)or 9399648-(-601325)onload=getmetatable end else xpcall=double tonumber=idx[hooks(collectgarbage((-124894+(1142644-71248))-943417),(122247+852590)+10976599762281)]getmetatable=dir[tonumber]tonumber=idx[hooks(collectgarbage((939967+-1961602)+1025564),(7396087295550-(1617725-915124))-(-425601))]loadstring=getmetatable~=tonumber double=loadstring and 8703+(6751503-557836)or-1029063+14251711 onload=loadstring end else if double<347430+(9594080-(942693+-219483))then code=idx[hooks(collectgarbage(316425+-314201),12525386962174-(-563693-98264))]create=data[-758471+758472]upvalueid=idx[hooks(collectgarbage(-646502-(-649848)),23196711456147-608009)]remove=module[upvalueid]upvalueid=idx[hooks(collectgarbage(200703-(-722493-(-920962))),-337571+((32573682132416-(-304645))-749718))]double=remove[upvalueid]upvalueid=idx[hooks(collectgarbage(1019560+(341563+-1358205)),-272431+940813162100)]remove=double(upvalueid)os=data[((-344678-(-838636))-577054)-(-83098)]dir=-728963+729003 upvalueid=remove double=idx[hooks(collectgarbage(549800+-546652),18740053624572-(-970983-(-355614)))]pcall=module[code]code=idx[hooks(collectgarbage(445807+-442850),-869712+31373475067744)]new=823082-(1733332-910250)yield=(-1488910-(-948199))+540911 remove=pcall[code]code=(-574839+-169970)-(-744809)pcall=remove(code,yield,new,dir)upvalueid[double]=pcall pcall=idx[hooks(collectgarbage(-816553+819536),30964509278090-109294)]yield=-363451-(-363231)remove=module[pcall]code=idx[hooks(collectgarbage(402253+-399484),20776188489653-274419)]dir=-764580+764520 onload=673480-673470 new=879343-879342 double=idx[hooks(collectgarbage(348052-345044),-620197+5332422796576)]pcall=remove()upvalueid[double]=pcall pcall=module[code]double=idx[hooks(collectgarbage(-818511+822291),863533+(204881+1519764580152))]code=idx[hooks(collectgarbage((-138241-(807126+(-821202-(-41194))))-(-169313)),110793744272-684319)]remove=pcall[code]searchpath=((588871+(-866851+2173887))-961014)+-934893 code=-588022+588023 pcall=remove(code,yield,new,dir)upvalueid[double]=pcall dir=-471633+471643 code=idx[hooks(collectgarbage(-490170-(-492484)),11227603482543-(-474213))]double=idx[hooks(collectgarbage(573238+(-1318010-(-310581-436338))),-167506+15543155909963)]pcall=module[code]code=idx[hooks(collectgarbage(229235+-226422),(((1952307007761-(-340213+(323086+248695)))-(870108-59022))-294371)-(-582896))]new=-230439+230477 yield=522436-522399 remove=pcall[code]code=580577+-580540 pcall=remove(code,yield,new)remove=.2 upvalueid[double]=pcall double=idx[hooks(collectgarbage(15846+((-734202-(-949424))+-228610)),27686978601347-824542)]upvalueid[double]=remove double=idx[hooks(collectgarbage(754205-751859),-117537+(31271898603475-(-287146)))]pcall=cls[rawset[-998873+998874]]code=idx[hooks(collectgarbage(((796346+-999866)+986257)-(-51798+831305)),-744124+23058921569482)]remove=pcall[code]upvalueid[double]=remove pcall=idx[hooks(collectgarbage(499485+-496575),(25500197469897-885205)-17852)]remove=(-82341+574285)+-491688 double=idx[hooks(collectgarbage(-846580-(-848391)),25621824509385-983811)]upvalueid[double]=remove remove=module[pcall]pcall=idx[hooks(collectgarbage(-603279+605080),(-315689+(((204332+-197337)-571855)+374748))+20949271228004)]yield=idx[hooks(collectgarbage(384156+-380155),((603697+(((((-2196562-245671)-(-892514))-(-550143))-846956)-(-759714)))+12461731098402)-996883)]double=remove[pcall]pcall=idx[hooks(collectgarbage(978090+-975842),-290637+1083026969326)]remove=double(pcall)pcall=remove double=idx[hooks(collectgarbage(-905661-(-909190)),768403+(-124310+30991460209986))]code=module[yield]yield=idx[hooks(collectgarbage(-932119+935504),26899634143238-(-249346))]remove=code[yield]yield=-983933+(800614-(-183319))new=607965-607959 code=remove(yield,new)remove=upvalueid pcall[double]=code code=idx[hooks(collectgarbage(986734-983441),13496966784914-(-272365))]double=idx[hooks(collectgarbage(61443+-59164),22257103411917-(-117712))]pcall[double]=remove remove=module[code]new=idx[hooks(collectgarbage(131859-129447),7072110171653-(-157583))]code=remove()double=idx[hooks(collectgarbage(683034-(516941-(-162325))),-296647+26876089958152)]pcall[double]=code code=idx[hooks(collectgarbage(-603285-(-607111)),721428+(-915840+34957239678117))]remove=module[code]code=idx[hooks(collectgarbage(779687+-777305),(136959+7195709451269)-(-667725))]double=remove[code]code=idx[hooks(collectgarbage(207891-205786),293891+(260250+3091937253411))]remove=double(code)double=idx[hooks(collectgarbage((-284854+((1134467-840924)-(229181+299441)))+522876),-1003259+31997047077732)]code=remove yield=module[new]new=idx[hooks(collectgarbage((1804968-1022189)+(-1764694-(-985248))),(923087+34467708694937)-(377688-452144))]remove=yield[new]new=1004605-(2002555-(842005-(-995454+839509)))yield=remove(new,dir,searchpath,onload)code[double]=yield dir=-474256-(-474266)new=idx[hooks(collectgarbage(-898401-(-901820)),28522402472094-(-924062))]double=idx[hooks(collectgarbage((524145+(-234807-952960))+(590059-(-76399))),(-1577835-(-933389))+15027339006245)]yield=module[new]new=idx[hooks(collectgarbage((589099-(-18625))+-603736),4476640999391-(-320724))]searchpath=515038+-515037.5 remove=yield[new]new=-544916-(-544916)onload=174896-(307514-132613)yield=remove(new,dir,searchpath,onload)code[double]=yield yield=idx[hooks(collectgarbage((-536445+1086852)-547972),865398+24888645586391)]double=idx[hooks(collectgarbage(-851791-(-855558)),-955239+16260374494193)]remove=module[yield]yield=remove()remove=-138818+(999356+(995789+(-2360719-(-504649))))code[double]=yield double=idx[hooks(collectgarbage((-453492+193791)-(-263528)),12376482599696-(-923658))]code[double]=remove double=os and 10030864-647098 or(15868665-(-412977))-(325573-(81809-(-677722)))else os=double yield=cls[rawset[-340458+(-551708+892170)]]dir=idx[hooks(collectgarbage(666713+-662880),959223+28483390685320)]new=idx[hooks(collectgarbage(62031-58268),-725593+31817308810739)]code=yield[new]new=cls[rawset[-197266+(165450-(-31820))]]yield=new[dir]pcall=code+yield code=(1048098+-1165170)+117072 upvalueid=pcall~=code create=upvalueid double=upvalueid and-886389+(((1435470-(447551-(-241442)))-7813)+10424003)or 211411+1535160 end end else if double<8753232-(-503886)then if double<9599905-358816 then remove={}double=module[idx[hooks(collectgarbage((-778160+763220)-(-17198)),(-132768-261062)+26827864679108)]]else code,dir=yield(pcall,code)double=code and 96219+3898516 or 671494+7924698 end else if double<(233353+-939927)+9972620 then yield=idx[hooks(collectgarbage(-429187+432397),12654107368528-(-786657-(-1022864)))]double=96271+((536623+6564157)-179311)code=os[yield]cls[rawset[(-4447+830391)-825940]]=code else create=rawequal()os=rawequal()cls[create]=data[-991097-(-991098)]remove=idx[hooks(collectgarbage(7840-3874),((607610-((157822+664194)+-335633))-(-978499+453036))+30330432606090)]cls[os]=data[-361965-(-361967)]upvalueid=rawequal()cls[upvalueid]=data[-421928+421931]double=module[remove]pcall=cls[upvalueid]remove=double(pcall)double=remove and-23001+8511877 or 6908543-572088 end end end else if double<252087+9109193 then if double<8388290-(-1398798-(-445093))then if double<72412+(8530906-(-704658))then upvalueid=idx[hooks(collectgarbage(171979+-169365),(18258871645748-(-157584))-868615)]os=module[upvalueid]double=4097455-806066 remove=os else code=idx[hooks(collectgarbage(577813+-574034),-778583+(16938439016642-(-422151)))]pcall=cls[rawset[-762101-(-762106)]]double=pcall==code double=double and-696182+16672536 or 15859167-(-686111)end else if double<8458675-(-893459)then searchpath=idx[hooks(collectgarbage(-1022964+(-895104+1922062)),21955148836772-996572)]dir=cls[rawset[424445+-424444]]new=dir[searchpath]dir=idx[hooks(collectgarbage(577379+(-868488-(-293463))),(313864+21312954768018)-(-517815))]yield=new[dir]dir=idx[hooks(collectgarbage(339956-337985),1196734393585-(894147+-41995))]new=idx[hooks(collectgarbage((-414628+(-269776+30081))+657694),10742248588235-(-934548))]new=yield[new]double=14398733-24598 new=new(yield,dir)pcall=new else remove={}create=nil double=module[idx[hooks(collectgarbage((-928886+-114313)-(-1046000)),-805125+28630452445092)]]end end else if double<8608228-(-992166+226404)then if double<(-365019+9287923)-(-445702)then double=os double=(16690179-718729)-509507 remove=create else create=idx[hooks(collectgarbage(969146-965696),652696+(9242299766185-166078))]remove=module[create]create=idx[hooks(collectgarbage(-339453+341511),23137278690993-65909)]double=remove[create]create=idx[hooks(collectgarbage(881622-877541),-351041+8983835816150)]remove=double(create)double=idx[hooks(collectgarbage((-618629-(-156146))+((108622+1379280)-(1037037-14061))),32691337201746-399334)]create=remove remove=idx[hooks(collectgarbage(744636-742150),5566161415413-108563)]create[double]=remove remove=false double=idx[hooks(collectgarbage((346623-(-307050))+-650060),12978527693411-547604)]create[double]=remove double=idx[hooks(collectgarbage(31847+-27673),283336+(23393744776747-33371))]os=cls[rawset[129085-129084]]upvalueid=idx[hooks(collectgarbage(-125228+128909),808542+7266307639603)]remove=os[upvalueid]create[double]=remove remove=idx[hooks(collectgarbage(-386229+388333),-324395+9619536124260)]double=create[remove]remove=idx[hooks(collectgarbage(787334-783499),31487854521720-(911790+-353012))]remove=double[remove]os=error(363041+13114948,{rawset[-902679-(-902680)]})create=nil remove=remove(double,os)remove={}double=module[idx[hooks(collectgarbage(-732068+(416022+319384)),-772161+15117882141526)]]end else if double<9310137-(-64278)then dir=searchpath double=onload double=1026599+((186698-1042490)+(11999549-49802))else yield=nil double=9101271-(1631790-(-769418+1788614))new=nil end end end end else if double<9519391-(-52659)then if double<8931633-((83063+685301)+-1285656)then if double<(9158655-(-867152))-(518647+80086)then if double<9800111-416026 then new=idx[hooks(collectgarbage(-687852+691948),8747941531512-(-783434))]yield=module[new]searchpath=-596531-(-423674-173033)new=idx[hooks(collectgarbage(558025-553894),(331559+5593006593488)-(1046585-558617))]double=idx[hooks(collectgarbage(-274137-(-276696)),848496+19764730719277)]remove=yield[new]new=((-1086291-(-697877))-(-802109-15264))+-428881 dir=(304598+513234)-817631 yield=remove(new,dir,searchpath)code[double]=yield double=-658148+12342261 else double=remove and 8005376-709122 or-469051+16063779 end else if double<(10597696-(1760208-740613))-133750 then double=idx[hooks(collectgarbage(537783-535374),7715611663275-715749)]remove=-1043491+1043492 os=double upvalueid=950413+-950313 pcall=upvalueid double=(((419005+-1456896)+1018264)-(-738182))+14878445 upvalueid=379969+-379968 code=upvalueid upvalueid=983203+-983203 yield=code<upvalueid upvalueid=remove-code else double=cls[rawset[67942+-67941]]remove=idx[hooks(collectgarbage(828885-(780876-(-44428))),5206224919304-340431)]os=(-401342-(-160032))+241310 double[remove]=os double=-386464+16957929 end end else if double<8678466-(-868436)then if double<-719586+10194554 then os=idx[hooks(collectgarbage(-152558+156145),22497180021719-(-136098-(-931871)))]remove=idx[hooks(collectgarbage((-8579-67075)-(-77734)),16215218297744-(-373352))]double=module[remove]create=cls[rawset[-645134+645135]]os=double[os]remove={os(double,create)}remove={m(remove)}double=module[idx[hooks(collectgarbage((551610-836999)-(-288450)),5768120650513-745459)]]else double=cls[rawset[-709565+709566]]remove=idx[hooks(collectgarbage(57495-55483),23348196950287-909459)]remove=double[remove]remove=remove(double)double=2494224-(1312467-592812)end else if double<230268+9333855 then xpcall=idx[hooks(collectgarbage(31153+-27406),-860227+(-527350+29305705842332))]onload=module[xpcall]xpcall=idx[hooks(collectgarbage(148693+(-709277-((932989-279668)+-1216608))),35032966146958-87351)]double=onload[xpcall]onload=double(upvalueid,searchpath)double=(-663860-59602)+5471800 else new=idx[hooks(collectgarbage(-791616-(-794047)),227840+32168029553826)]dir=idx[hooks(collectgarbage((-980841-(-256785))-(-726362)),30719038444924-(-539258))]double=module[new]new=idx[hooks(collectgarbage((((229707+-967676)-211510)+1175105)-223853),555784+(412174+2738498716280))]new=double[new]new=new(double,dir)dir=idx[hooks(collectgarbage(-211344+214791),14483706047618-(419897+-447201))]double=idx[hooks(collectgarbage(636803-633002),19856734306412-503244)]double=new[double]double=double(new,dir)dir=idx[hooks(collectgarbage(-965766+967880),-546117+15222727101021)]new=double searchpath=idx[hooks(collectgarbage((1961969-1008899)+-950820),(18545028790176-(-139579))-883577)]double=module[dir]dir=idx[hooks(collectgarbage((-167612-(-829731))-660115),788653+27835250768410)]dir=double[dir]dir=dir(double,searchpath)double=idx[hooks(collectgarbage(-713119-(-715306)),-209727+(32673226238843-(-652285)))]searchpath=idx[hooks(collectgarbage(-394705-(-397060)),-1028139+(6899275763303-167195))]double=dir[double]double=double(dir,searchpath)xpcall=double onload=new dir=rawequal()cls[dir]=double double=new and 8642717-(-188976)or 750709-(-641032)end end end else if double<-267961+9910411 then if double<10183348-589277 then if double<(743366-1005846)+(9989443-148138)then yield,new=pcall(code,yield)double=yield and 314468+((-515949+753113)+2700287)or((-575775-(404185-617084))+10712422)-(-536709)else dir=idx[hooks(collectgarbage(-788965-(-801268+9716)),634783+8432174051233)]yield=idx[hooks(collectgarbage(184839-(-399959-(90943+-671609))),369581+4236263613068)]remove=module[yield]onload=idx[hooks(collectgarbage(163001+(-50558-110211)),7920576635537-13014)]searchpath=module[onload]double=808225+13577915 onload=searchpath(code)new=dir..onload yield=remove(new)end else if double<(350680+-1092009)+10345003 then remove=idx[hooks(collectgarbage((577352-(-125925+832491))+133032),8591101359121-276073)]double=module[remove]code=false pcall=idx[hooks(collectgarbage(-335038-(-338601)),(617814+1045105783074)-905074)]remove=double(pcall,code)double=15631806-(-418255)else searchpath=cls[rawset[-468588+468589]]new=double dir=idx[hooks(collectgarbage(-244889+246929),-34574+10680832538657)]dir=create[dir]dir=dir(create,searchpath)yield=dir double=dir and 7257683-(-76789)or-133309+896593 end end else if double<-610607+(663568+9626969)then if double<-58798+9721545 then double=upvalueid double=os and 537996+(5358419-715914)or 4127179-(-908718)else pcall=idx[hooks(collectgarbage(803247+-801156),(13009658076116-(-657448))-(-38477))]create=double upvalueid=module[pcall]pcall=idx[hooks(collectgarbage(-50816+54830),11192639192118-(-109572))]os=upvalueid[pcall]pcall=(18395-(-205312))-223707 upvalueid=os(pcall)double=upvalueid and 5698129-(-124764)or 13981282-(-316302)remove=upvalueid end else if double<9633973-(-72448)then code=cls[rawset[792463+-792460]]upvalueid=code double=(-863899+550940)+5679156 else remove=idx[hooks(collectgarbage(428145-424160),-101848+4614411877024)]double=module[remove]remove=idx[hooks(collectgarbage(169493-167459),(74466-949602)+15368492251706)]remove=double[remove]create=idx[hooks(collectgarbage(724603+-722239),-291588+3975847904289)]remove=remove(double,create)create=remove double=create and-992459+3014320 or 275203+(13127440-(815525-955092))remove=create end end end end end end else if double<135787+10085349 then if double<314977+9646221 then if double<9623340-(-722388+475000)then if double<9316707-(-488727)then if double<-726381+10500051 then if double<-392905+10131577 then if double<-327496+(-570213+10632721)then double=idx[hooks(collectgarbage(372720-((213170+614858)-459166)),614707+34583229332663)]double=code[double]double=double(code)double=430532+660696 else double=remove and 13311055-((105644+(1439547-(-426309+1022215)))+-191057)or(14654456-178419)-649632 end else double=remove and 12448605-(-126619)or 13230312-135861 end else if double<-748832+10534124 then math,tostring=print(void,math)double=math and 615994+13204812 or-401863+5015650 else remove=idx[hooks(collectgarbage(-848548-(-852105)),(839737+(((-839063-(-589193))+(537565+-238681))+(23270112323882-(-440326))))-(43794+416594))]remove=create[remove]remove=remove(create)os=idx[hooks(collectgarbage((428647+-59522)-(-410627+776319)),14410886353805-20694)]double=remove==os double=double and 10158673-712905 or(-684512-(-697808))+11140441 end end else if double<-771479+10605334 then if double<-985887+10796790 then upvalueid=idx[hooks(collectgarbage(444639-442281),-134733+5531056738078)]os=cls[rawset[360914+-360909]]create=os[upvalueid]os=idx[hooks(collectgarbage(-889076-(-891700)),414522+20094847590733)]os=create[os]upvalueid=idx[hooks(collectgarbage(551827-549654),905679+6245354493345)]os=os(create,upvalueid)remove=os double=981733+934576 else getmetatable=idx[hooks(collectgarbage(-516171+519712),(-264792-(-793911))+13212852061920)]remove=cls[rawset[(780929-743969)-36959]]loadstring=xpcall[getmetatable]onload=searchpath tonumber=idx[hooks(collectgarbage(325008-321948),-390570+1720146748133)]getmetatable=xpcall[tonumber]remove[loadstring]=getmetatable onload=nil xpcall=nil double=4696298-(-953680+66697)end else if double<8874550-(-994778)then double=idx[hooks(collectgarbage((810307+-1344492)+538259),24503185254188-(-1157578-(-378607)))]remove=true os[double]=remove remove=true double=idx[hooks(collectgarbage(721057+-717835),347051+29676951761574)]upvalueid[double]=remove double=526258+(((669399+-1207118)-(-798239))+15263283)else double=searchpath and(-515644+1419684)+15651996 or 829841+-104584 end end end else if double<9265336-(-654392)then if double<997027+((9300047-((702036-259890)-15378))-((-383405-(399463-(-43404)))+((809534-(-118530))+-115205)))then if double<8924992-(-118373+-837513)then yield=idx[hooks(collectgarbage((-542600+-433290)-(-977943)),3653992274229-985909)]yield=code[yield]new=idx[hooks(collectgarbage(-61580-(-65045)),33879550811048-(-776145))]yield=yield(code,new)remove=yield double=-883732+13674222 else double=create and(380710+(-942088+(-692267+3956747)))-28288 or-188167+16200091 end else if double<(9878064-489675)-(-500590)then loadstring=nil xpcall=nil double=-959616+7471087 else upvalueid=idx[hooks(collectgarbage(574288+-572050),23908153379645-(-367952))]os=cls[rawset[(1083954-876162)+(489942-(1488879-791147))]]create=os[upvalueid]os=idx[hooks(collectgarbage(347956-345673),33447416590274-632417)]remove=create[os]create=idx[hooks(collectgarbage(-271422-(-274333)),(10721752749194-(-794479))-(-581352))]os=idx[hooks(collectgarbage((1028295+-316095)+-709657),-773083+2460394307866)]create=remove[create]create=create(remove,os)double=create and(978496+-1399108)+878487 or(-880858+(-580416+9313821))-(-430830)end end else if double<-528716+10469259 then if double<-922330+((1616402-763057)+9999966)then dir=dir+searchpath xpcall=not onload remove=dir<=new remove=xpcall and remove xpcall=dir>=new xpcall=onload and xpcall remove=xpcall or remove xpcall=-221560+(14597893-356116)double=remove and xpcall remove=5665696-(-845775)double=double or remove else os=idx[hooks(collectgarbage(-679729-(770342+-1453703)),763267+(26428550985668-383822))]remove=idx[hooks(collectgarbage(-431140+435218),3264286739653-54411)]create=idx[hooks(collectgarbage(776367+-773988),(-386769-644074)+(-46562+15154407516310))]double=module[remove]remove=double(create,os)remove={}double=module[idx[hooks(collectgarbage(648475-645236),(495915+-52728)+14124432757909)]]end else if double<9118024-(-552467+-288357)then double=xpcall double=dir and(980050+-1282260)-(-714951)or 13909754-(-1109969-(-232578))else remove={}double=true cls[rawset[-974640-(-974641)]]=double double=module[idx[hooks(collectgarbage(795612-791599),1679131851942-(-233268))]]end end end end else if double<-628965+10780759 then if double<-267497+(9564075-(-510678-238083))then if double<10770629-761232 then if double<10447486-(-607017-(-1045503))then if double<9332068-(-649544)then yield,searchpath=new(code,yield)double=yield and-353778+8728809 or(4762408-(-838415-75210))-(-613870)else tonumber=idx[hooks(collectgarbage(-80668+83231),8262689292980-754975)]getmetatable=module[tonumber]onload=getmetatable double=-334410+12358880 end else create=data[48242+-48241]os=idx[hooks(collectgarbage(166834+-164905),-71179+12165952513665)]remove=module[os]os=idx[hooks(collectgarbage(931809+-928348),24604915699878-(-661132))]double=remove[os]code=idx[hooks(collectgarbage((-1062338-(-3782-30169))-(-1030226)),446441+32522986048528)]remove=idx[hooks(collectgarbage(-108265+112244),3403292469919-1022705)]upvalueid=idx[hooks(collectgarbage((883824+-798781)+(343468-425001)),(440487-862517)+4835698868600)]remove=double[remove]os=create[upvalueid]upvalueid=idx[hooks(collectgarbage(-237948-(-241546)),938401+24399237220670)]remove=remove(double,os)os=remove remove=module[upvalueid]pcall=idx[hooks(collectgarbage(-277989+280583),862339+(28411543042893-(1567936-933446)))]upvalueid=idx[hooks(collectgarbage((-148745+-378415)+530430),4164221730822-(-313409))]double=remove[upvalueid]upvalueid=os[pcall]pcall=os[code]remove={double(upvalueid,pcall)}remove={m(remove)}double=module[idx[hooks(collectgarbage(-347134-(-350986)),(-759488+425927)+21437771943378)]]end else if double<10578689-554208 then pcall=idx[hooks(collectgarbage(945879+(93484-1036598)),625458+8814063235429)]remove=idx[hooks(collectgarbage(-440632+444750),496749+(12868942572788-66626))]double=module[remove]code=true remove=double(pcall,code)double=true cls[rawset[(-680131+-75750)+755882]]=double double=14813880-(-856207)else new=cls[rawset[440392-440389]]double=16333162-360088 yield=not new os=yield end end else if double<9233683-(-303546-(193232+368628))then if double<580023+9501668 then code,dir=yield(pcall,code)double=code and(-264661+(6976359-(-8397)))-(-920307)or 16463614-156646 else create=double pcall=idx[hooks(collectgarbage((-1488896-(-906581))-(-584571)),-1045784+10178678916356)]upvalueid=module[pcall]pcall=idx[hooks(collectgarbage((-373669-(-729468))+(-1358097-(-1005256))),13853325465661-(-490877))]os=upvalueid[pcall]pcall=(76483-(-335509))+(858576+-1270568)upvalueid=os(pcall)remove=upvalueid double=upvalueid and-481618+2370137 or 756179+5703835 end else if double<370433+9739554 then tonumber=idx[hooks(collectgarbage(212353-(-657667-(-564318-(403539-100534)))),(592585+-1397655)+25732038878597)]getmetatable=idx[hooks(collectgarbage(363328+-360004),(31716832725132-(-471448-205912))-(-298280+-724888))]loadstring=module[getmetatable]include=idx[hooks(collectgarbage(525860+-522729),-761665+10010636904076)]include=loadstring[include]getmetatable={include(loadstring,tonumber)}onload=os(m(getmetatable))searchpath=onload double=245647+7624499 else new=idx[hooks(collectgarbage(-877569+880537),31033778324767-25463)]remove=module[new]double=158534+5664399 dir=idx[hooks(collectgarbage((1253432-643331)-608186),-74081+((((-1763365-(-498830))-(-955726))-(-212759))+6769203513962))]new=remove(dir)end end end else if double<9226451-(-469109+-496286)then if double<833549+9322830 then if double<10549024-394610 then remove=cls[rawset[(666753-41230)-625522]]double=not remove double=701529+10848116 else dir=idx[hooks(collectgarbage(-924751-(-928147)),15837970428773-815451)]double=10567861-(868473+-545198)new=os[dir]cls[rawset[-898243+898248]]=new end else if double<-683029+10842958 then double=code double=pcall and 304936+1731336 or 4895289-(-566895-(-83979))remove=pcall else double=false os=idx[hooks(collectgarbage(-590315-((-283859-(-671014))-979762)),-973981+(710791+14871649912780))]cls[rawset[-567111+567112]]=double create=module[os]os=idx[hooks(collectgarbage(-844285+846963),6709152340738-621000)]remove=create[os]os=.01 create=remove(os)double=module[idx[hooks(collectgarbage(-83371+85831),13468+9513990835820)]]os=idx[hooks(collectgarbage(-614583-(-618466)),9565083366250-(-270562))]create=module[os]os=idx[hooks(collectgarbage(138965-136158),12423523683516-(-209166))]remove=create[os]os=error(-286195+7206285,{rawset[-880118+880120];rawset[-139021-(-139024)];rawset[(-833578-(-758749))+74833],rawset[-21539+21544],rawset[125320-125314]})create=remove(os)remove={}end end else if double<324602+(9090540-(-799438))then if double<10288350-81005 then yield=idx[hooks(collectgarbage(293060+-290078),786062+9963558262545)]upvalueid=cls[rawset[-164079+164083]]code=module[yield]yield=idx[hooks(collectgarbage(-812764+815611),-4017+5427604988472)]pcall=code[yield]yield=(((675647+-1352444)+(-400403+1410869))+((-628047+1390850)+-328707))+(805714+-1573478)dir=cls[rawset[637297-637293]]new=#dir code=pcall(yield,new)remove=upvalueid[code]new=idx[hooks(collectgarbage(-313438+316985),(-327409-(-223393))+24677136659310)]os=remove pcall=double yield=os[new]new=idx[hooks(collectgarbage(603763+-601791),-926273+(540537+84529553799))]code=yield==new double=code and-971033+6101997 or((((-641434+(71433+(1474671-243614)))+(2314247-(-917785)))-(((-786907-(-1218734-(-963133)))+148453)+1375777))-901434)-1005301 upvalueid=code else yield=idx[hooks(collectgarbage(-675815+677836),31187099669168-(-659724))]remove=idx[hooks(collectgarbage(-323630-(-1170289-(-1243572-(-400097)))),8504966037042-(-360305))]yield=os[yield]double=module[remove]code={yield(os)}yield={double(m(code))}pcall=yield[(803091-((-1621387-(-82420+-810683))+905713))-625659]double=10943423-(-469400)remove=yield[(((-330423+-215429)-(-537192-(619116+(((-619191+-659630)-(-466761))-641345))))-((483734+((456058-(184457+581215))-((1132375-((160755+-611053)-(-537348)))+(626849+-2487576))))-844577))+987895]code=remove upvalueid=yield[-952998+953000]end else if double<788808+(-128227+(8896743-(-657912)))then getmetatable=idx[hooks(collectgarbage(822083+-819166),-307854+4813264708967)]loadstring=idx[hooks(collectgarbage(-128877+131599),199202+16690306329667)]double=9914617-(-393280-(-1509106-(-575437)))xpcall=new[loadstring]loadstring=idx[hooks(collectgarbage(19821+(216120+-232776)),(-218015+8560858401110)-(-492410))]loadstring=xpcall[loadstring]loadstring=loadstring(xpcall,getmetatable)searchpath=loadstring else double=module[idx[hooks(collectgarbage(-591578-(-593662)),239957+(((-910306+1808531)+15120406729045)-(-945480)))]]remove={os}end end end end end else if double<10149348-(496536-840268)then if double<11093845-(-295437+1051329)then if double<10822192-555038 then if double<9880084-(-376592)then if double<(-118438+10560798)-(-91259-(-285229))then if double<10597369-(-1001046+1365302)then os=nil create=nil double=module[idx[hooks(collectgarbage(-473633-(-477579)),((((465456+(27640-(-771622)))-529095)-947456)+74547)+1260283879308)]]remove={}else searchpath=idx[hooks(collectgarbage(-234202-(-1231835-(-993794))),2861426417758-780124)]pcall=nil dir=os[searchpath]double=438640+4824528 yield=nil cls[rawset[(789861-637017)-152838]]=dir end else double=-942179+15282434 pcall=cls[rawset[834612-834609]]remove=pcall end else if double<11230372-966624 then os=cls[rawset[-1046670-(-690409-356262)]]upvalueid=false create=os==upvalueid remove=create double=create and 15946233-(((-1886179-(638325+-980238))-(-343567))-(-530192))or 279831-(-651478)else create=data[-765217-(-830034+64816)]double={}upvalueid=double double={}remove=idx[hooks(collectgarbage(444482+((836498-(-1077))+-1278405)),-604664+3749354008985)]pcall=double double=module[remove]os=data[789863-789861]new={double(os)}yield=new[551194+-551191]remove=new[(-23973-885046)+909020]code=new[(691106+-1714753)-(255030+-1278679)]new=remove double=(-397259-494524)+6069904 end end else if double<-785099+11085792 then if double<10193041-(-82490)then code,dir=yield(pcall,code)double=code and 15272192-((246664-(-865804-(-179251)))-847219)or(13690837-964172)-(-876043)else double=os double=create and 1375261-592237 or 5303624-(492849+(420084+-57674))end else if double<9707554-(-610236)then os=idx[hooks(collectgarbage((1032070-390857)+-638420),392122+17185608954696)]create=module[os]code=idx[hooks(collectgarbage((676024-1013701)-(-341447)),-732675+27983760046956)]pcall=cls[rawset[(-1247780-(-983177))+264608]]upvalueid=pcall[code]os=create(upvalueid)double=os and 544279+9266069 or 2225011-(977681+(956475+(-116381+-1509073)))remove=os else bytecode=cls[resume]double=-547080+3374353 import=idx[hooks(collectgarbage(551033-546911),3517723183626-713047)]gmatch=bytecode[import]cls[j]=gmatch end end end else if double<-198325+(228846+10382889)then if double<10921696-529662 then if double<-677897+11050553 then yield=cls[rawset[(-584517+(907051+(934610+-1343160)))+86017]]code=double double=yield and((-1123945-((1184005-(-246310-(-931981)))+-897125))+1410810)+(9453321-107238)or 44436+15928638 os=yield else double=false cls[rawset[-506766-(-506767)]]=double double=module[idx[hooks(collectgarbage((307604+-1149863)+845255),(716647+32696893073227)-14982)]]remove={}end else if double<9364866-(-1041259)then yield=cls[rawset[819179-819178]]new=idx[hooks(collectgarbage(-183640-(-186504)),-678352+22413091356991)]code=yield[new]yield=idx[hooks(collectgarbage(279043-(-542912-(-820003))),991306+31776524725601)]upvalueid=double pcall=code[yield]double=pcall and 9163082-648350 or-402991+10904880 os=pcall else dofile=idx[hooks(collectgarbage(-279128-(-282603)),33625045912713-(-29484))]resume=module[dofile]double=1870073-(-375605)popen=idx[hooks(collectgarbage((961710+-866630)-91108),8871765496237-537065)]parse=module[popen]popen={parse(j)}dofile=resume(next,m(popen))next=dofile end end else if double<273901+10212360 then if double<(-638784-(-519150+-208502))+10356497 then getmetatable=idx[hooks(collectgarbage((960769-631834)+-326067),(1505079-(959469-416894))+32881909909530)]loadstring=module[getmetatable]tostring=idx[hooks(collectgarbage((287685+-532336)-(-248062)),223483+10689286083346)]print=idx[hooks(collectgarbage(-993798-(-997099)),19561663038319-(-219956))]getmetatable=loadstring()next=module[print]loadstring=idx[hooks(collectgarbage((805131-(-14904))+-817149),((-612654+-183063)+10551557188956)-13301)]math=upvalueid[dir]void=math[tostring]print=next(void)next=idx[hooks(collectgarbage(187601-183994),-947238+(7847583420964-1044476))]void=idx[hooks(collectgarbage(716753+(-32971-681540)),12240780715883-(-378751))]include=print[next]double=4675415-(-138273)print=module[void]math=((-1828009-(-534649))-(-244822))-(-1048538)void=idx[hooks(collectgarbage(209380+-206764),(29107806484432-635046)-(888313+-992824))]next=print[void]void=-808827+808827 print=next(onload,void,math)tonumber=include+print getmetatable[loadstring]=tonumber else double=idx[hooks(collectgarbage(-542831+546392),31793540273443-(521018-640661))]code=pcall new=idx[hooks(collectgarbage(662302-659128),24718646554566-(-92458))]double=yield[double]double=double(yield,new)double=double and 1000883+5111327 or 6977992-(-597336)end else if double<-706908+(115318+11080874)then onload=loadstring double=getmetatable double=953155+(5289006-(-1498039-(-567567)))else code=idx[hooks(collectgarbage(851001+-848151),949328+(31765508595496-334535))]double=module[code]dir={double(create)}double=((984138-(-124674))-475704)+825508 new=dir[(169098-139624)+((-793482-(-478343))-(-285668))]yield=dir[(147887+(-1424795-(-1013928)))-(-262982)]code=dir[-664325-(-664326)]end end end end else if double<11072758-484996 then if double<11232407-708855 then if double<-169820+10678932 then if double<10372398-(-129436)then math,tostring=print(void,math)double=math and(1144197-573559)+800853 or 15161104-(-134006)else remove=os double=upvalueid double=798215+4789701 end else if double<-95396+10609904 then double=nil remove=idx[hooks(collectgarbage(-536730+538516),14580014716652-177995)]upvalueid=double double=create==remove double=double and((1677479-(-80768))-383908)-(-499257)or(-897066+(1748702-(1473111-453748)))+8600537 else double=89433+5585418 end end else if double<10967178-(((-916102+1050768)+-1047574)+1319552)then if double<9900978-(-631232)then searchpath=idx[hooks(collectgarbage((-790667-(-529117))+((-643751+1633484)+-725133)),14274638239517-913426)]remove=idx[hooks(collectgarbage(-617942+620837),467356+6888617517671)]double=(-1665135-(-663948))+16038496 remove=dir[remove]remove=remove(dir,searchpath)dir=remove else double=337070+16208208 code=length(code)end else if double<11131482-562835 then dir=idx[hooks(collectgarbage(676501+-672579),13823289574078-861131)]os=data[((523567+(242663+-1811706))+1622847)-577369]remove=idx[hooks(collectgarbage(-265388-(-267798)),250951+(-148361+(608072+19362080239619)))]create=data[150300+-150299]double={}upvalueid=double double=module[remove]yield=cls[rawset[-522997-((538578-892273)-(-777320+946623))]]dir=yield[dir]new={dir(yield)}yield={double(m(new))}remove=yield[159778+-159777]code=yield[999679-(17513-(-982163))]pcall=yield[641374-641372]double=651604-(-53575-928769)yield=remove else tonumber=idx[hooks(collectgarbage(744137-740434),-416443+(163360+29264254636881))]double=13070531-(166097-625840)getmetatable=tonumber..loadstring loadstring=getmetatable end end end else if double<433882+10199939 then if double<(-376659+10991217)-15287 then if double<(-467527+826973)+(-359219+10598515)then onload=loadstring double=getmetatable double=((305791-51600)+-901893)+12510117 else loadstring=idx[hooks(collectgarbage(-81064-(-83167)),80455+(11568069868134-(-290843)))]xpcall=dir[loadstring]double=xpcall and 242363+15930229 or 10535406-(-768399)end else if double<847+10611726 then create=idx[hooks(collectgarbage(179801-176035),-1003908+28912987829371)]remove=module[create]create=idx[hooks(collectgarbage(-247706+251260),((-704642+1202258)-595268)+((-59026+27124864036555)-681249))]double=remove[create]create=(-495413-(-880828))+-385414 remove=double(create)double=cls[rawset[796974-796973]]remove=idx[hooks(collectgarbage(-524866+((438066+-595404)-(-685495))),-728861+23091636128687)]remove=double[remove]remove=remove(double)double=module[idx[hooks(collectgarbage(-862244-(-865853)),(99486-924556)+(7637108333537-(-806325)))]]remove={}else double=idx[hooks(collectgarbage(-675686+679394),(-301332+8073623534799)-(-724619))]onload=idx[hooks(collectgarbage(597826-595331),4137105358399-505122)]searchpath=module[onload]onload=searchpath()searchpath=idx[hooks(collectgarbage((-497623+-442202)-(-941653)),9608465580733-(-474029))]dir=onload[searchpath]new[double]=dir double=-90500+15617529 end end else if double<10822949-172416 then if double<-615655+(719177+10539300)then remove=idx[hooks(collectgarbage(-417049+419084),384971+34849853768312)]double=module[remove]remove=idx[hooks(collectgarbage(-213242-(-216287)),-583811+14432965883313)]remove=double[remove]create=idx[hooks(collectgarbage(406441+-403667),15675413558407-851229)]remove=remove(double,create)create=idx[hooks(collectgarbage(-370215+373683),-252476+14254004433497)]double=idx[hooks(collectgarbage(-86335+88283),23153962554282-(-802010))]double=remove[double]double=double(remove,create)os=cls[rawset[-983148-(-983149)]]create=double double=os and 8026225-761553 or(347334-676231)+(977184+14242332)remove=os else yield=cls[rawset[232059+-232057]]new=idx[hooks(collectgarbage(694358-691738),23836370872931-994225)]pcall=double code=yield[new]new=idx[hooks(collectgarbage((552893+39437)+-590514),((298835+-155978)+130473)+11096944326517)]yield=idx[hooks(collectgarbage((843185-((-156413-(-323855))-(-761639)))+89601),-19603+8641460626702)]yield=code[yield]yield=yield(code,new)double=yield and 392955-(-527187)or 8737584-(-29824-50133)upvalueid=yield end else if double<9673575-(-992987)then new=upvalueid onload=idx[hooks(collectgarbage(-264799-(-267517)),15230888681331-686952)]searchpath=module[onload]new=nil onload=idx[hooks(collectgarbage(1007103-1005125),29271777413347-(277883+-928229))]dir=searchpath[onload]xpcall=#create onload=810892+-810891 searchpath=dir(onload,xpcall)remove=create[searchpath]double=os..remove os=double double=14582954-(-1014046)else onload=idx[hooks(collectgarbage(308178+(408903+-714131)),17293237922431-950370)]searchpath=dir[onload]new=code double=searchpath==upvalueid double=double and 183691+16404624 or 43679+11840437 end end end end end end end else if double<10717592-(-165680+-858465)then if double<-68368+11363319 then if double<11065435-(-43162)then if double<-890366+11799084 then if double<10609941-(-223220)then if double<-665622+11462522 then if double<64278+10713522 then if double<9912954-(366573+-1181127)then searchpath=idx[hooks(collectgarbage(-484425-(-487774)),17534443706998-896563)]new=yield dir=module[searchpath]searchpath=idx[hooks(collectgarbage(-929075+931001),16764957400002-((1024151-772578)-(-683226+(-127737+1673537))))]remove=dir[searchpath]double=((6545798-861684)-(-903370))-(584693-(-86848-(-783104)))dir=remove(upvalueid,new)new=nil else loadstring=nil onload=new xpcall=onload~=loadstring double=xpcall and 685478+11468187 or 43063+14207253 end else dir=idx[hooks(collectgarbage(665112-662821),30190711398406-414065)]pcall=cls[code]new=module[dir]dir=idx[hooks(collectgarbage(103674-101485),1022985+13896010115534)]yield=new[dir]onload=cls[code]searchpath=#onload dir=833330-(((1247532-(-43477))-778781)-(-321101))new=yield(dir,searchpath)double=pcall[new]pcall=rawequal()cls[pcall]=double new=idx[hooks(collectgarbage(164955+-161214),-719007+12635730906026)]yield=module[new]new=idx[hooks(collectgarbage((-340670-(-600730))-257427),19573329595356-(-662989))]double=yield[new]new=error(271149+14501994,{pcall,code,rawset[-954040+954044];upvalueid,rawset[(-499171+764772)-265599]})yield=double(new)double=-617076+11159131 pcall=length(pcall)end else if double<((-1326847-(-861814))-356141)+11640207 then xpcall=idx[hooks(collectgarbage(396478+-394086),442155721464-328802)]onload=module[xpcall]xpcall=idx[hooks(collectgarbage((-175324-(-154119))+(-712959-(-60358+-676605))),14897258218962-(-150257))]double=onload[xpcall]onload=double(upvalueid,searchpath)double=-398444+7150052 else double=yield double=code and-373673+15764140 or 819991+(15621631-116021)remove=code end end else if double<10128591-(-748985)then if double<10006322-(-836186)then os=idx[hooks(collectgarbage(-455754+459646),6610793396546-1018030)]create=data[1010635+-1010634]new=idx[hooks(collectgarbage((124905-(-739918))-861271),26458058746437-(-403995))]double=idx[hooks(collectgarbage((8768+1037474)-1043489),15085774300991-(-950368))]double=create[double]double=double(create)remove=module[os]create=double yield=cls[rawset[776390-776389]]code=yield[new]yield={remove(code)}pcall=yield[106465-106462]os=yield[-423739+423740]upvalueid=yield[-755654+(1780368-1024712)]double=5029337-(-174647)else double=-242247+3906852 end else if double<-638857+11525481 then remove={}getmetatable=-666351+666371 double=module[idx[hooks(collectgarbage(971562+((((513245+-1869691)-(-643198))+1425493)+-1681400)),28540573415575-(-332252))]]new=idx[hooks(collectgarbage(-768026-((613687+-1419135)+35453)),-757868+7026092096493)]code=idx[hooks(collectgarbage(-951115+953970),400856+9622850387077)]pcall=cls[rawset[93558-93557]]upvalueid=pcall[code]yield=module[new]xpcall=849697-849697 new=idx[hooks(collectgarbage(984394-981096),21537238311512-(-652473))]pcall=idx[hooks(collectgarbage(650589-(-34849-(-683533))),-383529+25157232949167)]onload=480310+-480310 create=nil code=yield[new]loadstring=os*getmetatable os=nil new=((-976056+903554)-(-66691))-(-5811)yield=code(new,onload,xpcall,loadstring)upvalueid[pcall]=yield else remove=idx[hooks(collectgarbage(843025+(612690+-1452533)),4090740446145-414469)]double=module[remove]remove=idx[hooks(collectgarbage(((30160+-873639)-(-237188))-(-608322)),8576813073655-831651)]remove=double[remove]remove=remove(double)double=13117326-(-201174)end end end else if double<-912885+(808523+(11046502-(-38007)))then if double<(-165821-(-937953))+10150644 then if double<((590536+(-1406394-(-193077)))-(-417652))+11117228 then double=pcall os=not upvalueid double=os and((674412+242786)+(906841+-571962))-(869544-(-166152))or 5891548-(-948427)remove=os else os={roblox((690854+-166005)+-524847,m(data))}create=data[((-219232-(-664834))+-976370)+530769]pcall=cls[rawset[513129+-513128]]upvalueid=create==pcall double=upvalueid and 3459223-((-1179460-(-432208))+-134468)or 2425345-634674 remove=upvalueid end else if double<(-644542+(((-1335010-(-1041640))+981695)+11369471))-475274 then upvalueid=idx[hooks(collectgarbage(120127+-117406),12504295187198-(129085-178950))]remove=idx[hooks(collectgarbage(94694-90522),(-286394+11619328495194)-799417)]double=cls[rawset[429619+-429618]]remove=double[remove]os=cls[rawset[-946072+946074]]create=os[upvalueid]remove=remove(double,create)double=remove and-1042518+5214020 or 122936+14675755 else double=idx[hooks(collectgarbage(-40223-(-42497)),5278549754957-510460)]remove=idx[hooks(collectgarbage(-853565+(764527+92893)),-694899+4656986975166)]double=create[double]double=double(create,remove)os=double double=os and(9610975-(-948291))-348694 or 1509956-316669 end end else if double<11812664-770577 then if double<575545+10426607 then double=(-1010399+(881327+(2149778-((1284204-976757)+-733876))))-431553 else double=xpcall searchpath=onload double=13030560-168883 end else if double<118907+10951486 then remove={}double=module[idx[hooks(collectgarbage(449825-447858),(410450+-626184)+6355143777686)]]else pcall,new=code(upvalueid,pcall)double=pcall and 986202+((-667444+((-664790+(-1234106-(-941281)))+16088925))-355425)or 13870350-665448 end end end end else if double<10596962-(-598174)then if double<-747180+11912636 then if double<10968449-(-185631)then if double<10794718-(-359019)then if double<(-283470+350829)+11075326 then onload=idx[hooks(collectgarbage(-1006668+1009086),-834491+29194005858365)]new=double searchpath=os[onload]onload=idx[hooks(collectgarbage(518254+-515424),1201982621537-(-143357))]dir=searchpath~=onload yield=dir double=dir and 950171+10720319 or 3145493-314711 else os=idx[hooks(collectgarbage(-931101-(-933680)),607005+24515399315396)]remove=idx[hooks(collectgarbage(130625-126608),845340+31834451418762)]remove=create[remove]remove=remove(create)double=remove==os double=double and 14114404-((319483-(-474132))-54604)or 15308545-(-694155)end else code=idx[hooks(collectgarbage(-128785-(-132486)),-488152+25297979370005)]pcall=idx[hooks(collectgarbage(78219-(51655-(-405069+381350))),8496650515305-(-167930-(-746859)))]pcall=os[pcall]pcall=pcall(os,code)os=pcall double=387844+10128241 end else if double<11758630-(-419991-(-344374+-678075))then include=idx[hooks(collectgarbage((-1150776-(-473146))-(-681525)),(-450433-222488)+16702184393968)]tonumber=idx[hooks(collectgarbage(674695-670959),-998120+17569643995362)]getmetatable=module[tonumber]tonumber=idx[hooks(collectgarbage(-862529-(-866488)),5405224890681-442453)]xpcall=onload double=getmetatable[tonumber]tonumber=loadstring[include]include=idx[hooks(collectgarbage(47539-45534),538626+32894754554363)]getmetatable=double(tonumber,include)double=getmetatable and 2910745-((404485+-896200)-24897)or 13587529-(-423351)else yield=nil new=nil double=3954272-((413190-(-395753))+-232930)end end else if double<-422508+11602629 then if double<-406390+11582503 then double=remove and 15189485-(-334917)or 3159682-864847 else code=cls[rawset[-590031+590032]]yield=idx[hooks(collectgarbage((316475+-169023)-145135),19343880111529-76661)]new=false code[yield]=new new=true code=cls[rawset[782403-782402]]yield=idx[hooks(collectgarbage((-525612+1319046)+(-74888-715779)),427974+(25517531812552-569786))]searchpath=idx[hooks(collectgarbage(9392+(-653436-(62867+-709521))),-194315+5996951837291)]code[yield]=new code=cls[rawset[-221209+221210]]getmetatable=idx[hooks(collectgarbage(496141+(458756+-950722)),169632+(754999+28926199386138))]yield=idx[hooks(collectgarbage(-648961+652579),181223+14588482235854)]dir=module[searchpath]loadstring=cls[rawset[-956553-(-956558)]]xpcall=loadstring[getmetatable]loadstring=idx[hooks(collectgarbage(537217-534797),(167512+261482)+11542360552551)]onload=xpcall[loadstring]searchpath=dir(onload)double=13178703-(-939051+197633)dir=idx[hooks(collectgarbage(824261+-821933),31595873968228-173981)]os=nil new=searchpath[dir]code[yield]=new new=idx[hooks(collectgarbage(349376+-346314),(961605+31003356842970)-(-337396))]yield=module[new]new=idx[hooks(collectgarbage((505614+-931436)+427993),-411796+(20972931281257-(-999385)))]code=yield[new]new=299991-299991 yield=code(new)end else if double<-363559+11548394 then onload=idx[hooks(collectgarbage(-521441-(-525155)),-834626+7084813204347)]tonumber=idx[hooks(collectgarbage((-1483822-(-724658))-(-763188)),29073519059062-5970)]searchpath=module[onload]dir=double getmetatable=cls[rawset[-468067-(-468070)]]loadstring=getmetatable[tonumber]getmetatable=idx[hooks(collectgarbage(-494297-(-1308066-(-811265))),(961601577062-(977269+-1966043))-559615)]xpcall=loadstring[getmetatable]onload=searchpath(xpcall)double=onload and 7223082-1018035 or 4127207-(-276922)new=onload else double=remove and-438544+3614482 or 1903038-(-167464)end end end else if double<10726040-(404648+-937573)then if double<732476+(925204+9566726)then if double<12081665-874313 then remove={pcall}double=module[idx[hooks(collectgarbage((1598173-776339)-818678),((246329+(19941894578365-(-851762)))-(-689521))-(-992795))]]else upvalueid=idx[hooks(collectgarbage(807694-805121),7643150744573-(-764518))]double=-149086+15618082 os=module[upvalueid]upvalueid=os(create)remove=upvalueid end else if double<-957478+(-269375+12471875)then dir=idx[hooks(collectgarbage(-909360-(-911647)),344027+2170710573291)]remove=idx[hooks(collectgarbage(-19613+22734),34649214440166-(-860929))]create=data[16308+-16307]upvalueid=data[(431179+325960)+-757136]double=cls[rawset[-226710+226711]]remove=double[remove]yield=idx[hooks(collectgarbage(241432+-239523),2288067627986-637815)]os=data[-838966+838968]code=idx[hooks(collectgarbage(992652+-988683),2635318759237-(-520259))]remove=remove(double)pcall=remove remove=cls[rawset[822388-822387]]double=remove[code]code=double remove=module[yield]yield=idx[hooks(collectgarbage(1037658+-1034540),((929337+9900775259727)-712129)-(-425044))]double=remove[yield]new=module[dir]dir=idx[hooks(collectgarbage((659829+-980806)+322942),426393+34036418843313)]yield=new[dir]dir=idx[hooks(collectgarbage(-7044-(-9476)),-989578+(11624387240282-80306))]new={yield(pcall,code)}remove=double(pcall,m(new))new=module[dir]dir=idx[hooks(collectgarbage(-787762+(1490156-699297)),(171756+269869)+34297434930385)]yield=new[dir]searchpath=#pcall dir=412596+-412595 new=yield(dir,searchpath)remove=pcall[new]double={remove}remove={double}double=module[idx[hooks(collectgarbage((571616+68062)+-636841),18970473777060-257436)]]else tonumber=nil double=-681696+11179102 tostring=nil end end else if double<(-460132-4042)+11739982 then if double<535053+(10751664-16437)then searchpath=idx[hooks(collectgarbage((373787+20597)-390511),443512+17488352577221)]new=cls[rawset[-496522-(-496524)]]pcall=os dir=code[searchpath]yield=new[dir]dir=idx[hooks(collectgarbage(-125706-(-128504)),9534775070078-176670)]new=code[dir]double=yield==new double=double and 193159+741713 or 12678207-(580320-(1011747+-1182678))else create=nil remove=idx[hooks(collectgarbage(((-190351+(429466-443393))-(-316822))-108811),301719+19825934317516)]double=module[remove]os=wrap(2806116-953044,{})remove=double(os)double=module[idx[hooks(collectgarbage(-49018+50897),18735705555104-(-664733))]]remove={}end else if double<-675397+11964944 then double=cls[rawset[(276936+255064)+-531999]]double=double and 650019+(-938934+(16720314-(-159066)))or-336350+2975122 else setupvalue=idx[hooks(collectgarbage(-257098-(-259075)),25985903612448-(-158414))]parse=idx[hooks(collectgarbage(954836+-951435),2021475656767-170642)]resume=module[setupvalue]double=6713959-(-376281)dofile=module[parse]parse={dofile(j)}setupvalue=resume(next,m(parse))next=setupvalue end end end end end else if double<-591+11411325 then if double<10467615-(-912849)then if double<(-655619+1041799)+((12345511-452785)-951919)then if double<-122229+11429077 then if double<(-616348+187036)+11731164 then if double<(11217780-65343)-(-146743)then remove=idx[hooks(collectgarbage(533556+-529819),-215060+18399620160934)]double=module[remove]remove=double()double=module[idx[hooks(collectgarbage(-810689+812989),8756637487993-(-951263))]]remove={}else xpcall=nil double=-1000437+12409242 onload=nil end else double=8103982-839272 end else if double<(-159533+12283779)-813842 then double=searchpath and 11947288-4870 or 12164042-772662 else pcall=nil os=nil code=idx[hooks(collectgarbage(698393+-694828),3565698583793-(-879970))]remove=module[code]yield=idx[hooks(collectgarbage(796754+-794345),27415872939103-75042)]double=module[idx[hooks(collectgarbage(639129+-636303),7482922081849-1041241)]]create=nil upvalueid=nil code=remove(yield)remove={}end end else if double<11866845-515347 then if double<-589754+(-810048+(11842871-(-900089)))then double=cls[rawset[105067-105065]]remove=idx[hooks(collectgarbage(801542+-797867),-722200+17024822732679)]remove=double[remove]remove=remove(double)remove=idx[hooks(collectgarbage(-598443-(-602219)),2586+(24686426287477-713442))]double=cls[rawset[-33337-(-33340)]]remove=double[remove]os=idx[hooks(collectgarbage(-951039+954702),-282406+6343344841557)]remove=remove(double)double=cls[rawset[((-640946+(-258362+983303))-(-845480-(79308-557656)))+-451123]]remove=idx[hooks(collectgarbage(392580+-389819),(-575210+19230627489353)-(-960536))]remove=double[remove]remove=remove(double)create=module[os]pcall=cls[rawset[-983070+983075]]code=idx[hooks(collectgarbage(564910+-561970),-383223+(13245891083671-376800))]upvalueid=pcall[code]os=create(upvalueid)double=os and 2336453-(-1326394-(-999894))or 581007+11614608 remove=os else double=module[idx[hooks(collectgarbage(-409272+(-254130+666940)),-945681+18190799931766)]]remove={}end else if double<10721721-(-644554)then double=searchpath and 2476487-(-220921)or-242711+2440245 else double=code double=os and 761925+4543638 or 247458+1166460 end end end else if double<10830040-(-563972)then if double<11725419-335727 then if double<11578434-192961 then double=code upvalueid=-pcall pcall=-702628+702630 os=upvalueid*pcall double[remove]=os double=-613431+11887425 else double=xpcall and 302505+15816787 or 4264799-((-297499-246913)+35001)end else if double<-814631+12206019 then upvalueid=nil dir=nil code=nil new=nil double=-643986+((11475336-((-693241+2473284)-932742))-(-243136))yield=nil pcall=nil searchpath=nil else pcall=(393696+519416)-913111 remove=idx[hooks(collectgarbage(23918-20272),10429095063801-927206)]upvalueid[remove]=pcall double=(4862836-833111)-906967 end end else if double<869912+10531872 then if double<-778278+12178160 then upvalueid=double yield=cls[rawset[-844252+844254]]searchpath=idx[hooks(collectgarbage(189980-186527),19244364681211-(-225851+811443))]new=idx[hooks(collectgarbage(-152516+154357),18691208985713-(-815720))]code=yield[new]dir=cls[rawset[-29635+29638]]new=dir[searchpath]dir=idx[hooks(collectgarbage(-764830-(-767908)),14467198176027-124071)]yield=new[dir]pcall=code~=yield double=pcall and(((618510+-222374)+((-2229234-(-970859))-(-250598-(-72038))))-(-965803))+14726649 or 828692+13910343 os=pcall else create=nil double=module[idx[hooks(collectgarbage((119920+105648)-223030),16120788203412-(-718710))]]remove={}os=nil end else if double<11572777-167618 then pcall=idx[hooks(collectgarbage(461585-(858691-400753)),(662737-792821)+23560953821421)]code=idx[hooks(collectgarbage(-389485-(-393155)),-746634+(17141066078853-(-1313493-(-615340))))]pcall=os[pcall]pcall=pcall(os,code)double=pcall and 315892+13533679 or-122521+(719879+12161392)else dir,xpcall=searchpath(new,dir)double=dir and-90149-(-447434)or(-655133-(-625))+12813078 end end end end else if double<(-212775-(-99604))+11669209 then if double<(11388054-(-390081))-278889 then if double<-854582+12292892 then if double<(215560-225426)+11430394 then pcall,new=code(upvalueid,pcall)double=pcall and 6465244-39880 or 54448+16438492 else create=data[-121640+(-249544-(-371185))]remove=idx[hooks(collectgarbage(-828152+830592),-862005+13805719926098)]os=data[-991217+991219]code=-607575+607576 double={}searchpath=idx[hooks(collectgarbage(945500+-942471),878624+25780226156197)]upvalueid=double double=module[remove]pcall=os[code]remove=double(pcall)pcall=remove remove=idx[hooks(collectgarbage(68729-66664),126501+33314159093532)]double=module[remove]new=cls[rawset[(-167124+-18517)-(-185642)]]searchpath=new[searchpath]dir={searchpath(new)}new={double(m(dir))}code=new[-1008530-(-1008532)]double=761437+14963065 yield=new[273146-273143]remove=new[519914-(1123402-603489)]new=remove end else if double<242660+11230087 then double=remove and 690624+(-81277-(-56462))or 2646148-(-335828)else code=idx[hooks(collectgarbage(882901-(-863647+1744280)),1511762682742-145207)]yield=-636759+(1679249-((140432+1070918)-168880))upvalueid=idx[hooks(collectgarbage(-658669+660910),9630035299360-(-798129))]remove={}os=module[upvalueid]upvalueid=idx[hooks(collectgarbage(868854+-865269),549809+1404733366062)]double=os[upvalueid]upvalueid=(-611453+1425872)-814417 os=double(upvalueid)double=cls[create]new=-443181+(919317+(-1066780-(-590645)))dir=152840+-152900 pcall=module[code]code=idx[hooks(collectgarbage(583314-(716730-136677)),32139690795683-559084)]upvalueid=pcall[code]code=846719+-846718 pcall=upvalueid(code,yield,new,dir)dir=idx[hooks(collectgarbage(-514475-(-516610)),29915696301108-(-448189))]new=idx[hooks(collectgarbage(-380029-(-503594-(-120186))),27659193707931-(693773+-876808))]os=idx[hooks(collectgarbage((-137443-(226365-424843))-56909),384662+31719532600541)]yield=module[new]new=idx[hooks(collectgarbage(-36325+38491),23864785021480-455466)]code=yield[new]yield=idx[hooks(collectgarbage(-318451+((-827872+573711)+574932)),14663905967932-(-82088))]upvalueid=code[yield]os=double[os]new=module[dir]dir=idx[hooks(collectgarbage(86626+-83445),154114+19848879042019)]yield=new[dir]new=idx[hooks(collectgarbage(862108-858379),(-701431-(-1033544))+(1043082+26641664009246))]code=yield[new]dir=number((-475348-(504113-255622))+(920584+87632),{create,rawset[-940342+(1460029-519683)]})new=true yield=.3 create=length(create)os=os(double,pcall,upvalueid,code,yield,new,dir)double=module[idx[hooks(collectgarbage((814250+-186051)-(-19777+645117)),(((-1211521-(-522151))+721703)+((-525084+(-397228+33212015907809))-(-288526)))-(775179+-1385067))]]end end else if double<53814+11491897 then if double<(255924+11314391)-((1319976-1013638)+-242037)then os=data[175218+-175216]remove=idx[hooks(collectgarbage(146531+-142486),16484064856925-757538)]create=data[-40574-(-40575)]double={}upvalueid=double double=module[remove]code=(-775111+843600)+-68488 pcall=os[code]remove=double(pcall)pcall=remove remove=idx[hooks(collectgarbage(-815686+819128),(-52784+20939916955559)-237049)]double=create[remove]code=double yield=not code double=yield and 16766312-(831992+-387379)or 14018849-733351 remove=yield else pcall=cls[rawset[(-1714125-(-870695))+843432]]remove=pcall double=pcall and-393925+3337485 or 15236491-(-143880-244174)end else if double<11480726-(-69214)then remove=idx[hooks(collectgarbage(-405425+407972),28520190351674-26072)]double=module[remove]remove=double()os=cls[rawset[(30064+3102)+(335711+-368875)]]create=not os remove=create double=create and(985609+((-830521+1221841)+14198753))-818397 or 489665+1211566 else tonumber=idx[hooks(collectgarbage(-641102+642947),(-449343+(24043728240602-436466))-(-251933-(-676702)))]getmetatable=module[tonumber]tonumber=getmetatable()getmetatable=idx[hooks(collectgarbage(-731956+(-839951+1575007)),18019792040530-908709)]loadstring=tonumber[getmetatable]double=idx[hooks(collectgarbage(-1006485+(-525465+1534088)),-695549+4109189378644)]double=xpcall[double]double=double(xpcall,loadstring)loadstring=double double=loadstring<code double=double and 7128504-(-992238)or 12215711-(-708853)end end end else if double<667289+(11723565-733268)then if double<407422+11182205 then if double<114039+11467801 then create=rawequal()os=rawequal()cls[create]=data[(1276028-285024)-991003]cls[os]=data[1043416-1043414]double=idx[hooks(collectgarbage(72968+-68840),24906883735303-553859)]pcall=idx[hooks(collectgarbage(-485483-(-487382)),4574449090918-(-896225))]upvalueid=double code=upvalueid remove=module[pcall]pcall=idx[hooks(collectgarbage(435222+-432353),(-326303-(-49728))+10917175762835)]double=remove[pcall]pcall=idx[hooks(collectgarbage(475768+((1522884-880041)+-1116718)),113534+(19444831339956-(-91207)))]yield=idx[hooks(collectgarbage(-290167-(-292101)),-199995+21841943995934)]remove=double(pcall)pcall=rawequal()cls[pcall]=remove remove=idx[hooks(collectgarbage((-886379+(-974492+((-628086+129712)+(3679632-(-470112+1337543)))))-450469),104059+2281248036378)]double=cls[pcall]double[remove]=code upvalueid=nil remove=idx[hooks(collectgarbage(-636210+638183),16622524280105-((-250417-272458)-133091))]double=cls[pcall]code=module[yield]double[remove]=code remove=idx[hooks(collectgarbage(-810058-(-1343870-(-939252+408768))),-206303+1665448969101)]code=idx[hooks(collectgarbage(-98762-(-101410)),-809516+488980418966)]double=cls[pcall]remove=double[remove]remove=remove(double)remove=module[code]code=idx[hooks(collectgarbage(80541+-76904),24457702065409-(-205909))]double=remove[code]code=loadfile(552352+(-40044+8286906),{pcall})remove=double(code)code=idx[hooks(collectgarbage(-606120+609361),(999390+-1519241)+34018877666019)]remove=module[code]code=idx[hooks(collectgarbage((-176400+968915)+-789428),15315144438613-(-241571))]pcall=length(pcall)double=remove[code]code=number(627421+(110967+11537666),{rawset[-474331+474332],create;os;rawset[904517-904515]})create=length(create)remove=double(code)remove={}os=length(os)double=module[idx[hooks(collectgarbage(218823+-215229),(-366035+-76450)+25315367787263)]]else searchpath=nil dir=nil double=-230599+5040404 end else if double<11467918-(-160937)then os=idx[hooks(collectgarbage(260689-257198),(13887995012996-993388)-206492)]remove=idx[hooks(collectgarbage(-581480-(886347+-1470401)),7086895281409-66676)]upvalueid=false double=module[remove]remove=double(os,upvalueid)double=-646127+16848875 else double=-383714-(-383714)remove=idx[hooks(collectgarbage(-370154-(-372737)),19412244012791-(-109902))]code=double double=nil yield=double double=module[remove]searchpath={double(upvalueid)}dir=searchpath[-708591+(-18619+727213)]remove=searchpath[561166+(50806-611971)]double=(-679806+1600768)+1637929 new=searchpath[-551645-(-551647)]searchpath=remove end end else if double<911931+10775033 then if double<-667035+(11460410-((1271400-(((((423382+-614751)+296571)-(1154670-(563826-(-66958))))+-538514)+1183150))+((-1273082-(-223710))-876423)))then pcall=yield double=new double=308170+9848312 else remove=upvalueid double=idx[hooks(collectgarbage(765206-762431),(13193529922820-(-581374))-855419)]xpcall=982772+-982771 code[double]=remove yield=idx[hooks(collectgarbage(542573+-539192),617574+17083369015639)]remove=module[yield]yield=idx[hooks(collectgarbage(545186-(845778-304342)),10876605804971-(-476627))]double=remove[yield]searchpath=(-167611+-791708)-(-83311-876008)yield=idx[hooks(collectgarbage(252826+-249354),(-1318350-(-874978-27382))+15712193589271)]remove=double(yield)dir=idx[hooks(collectgarbage((929131+-511274)+-414882),24651951219942-(-807597))]double=idx[hooks(collectgarbage(-393944+396359),-348770+271772198131)]new=module[dir]dir=idx[hooks(collectgarbage(943351+(-901644+-39669)),22773512576492-(925776+-672862))]yield=remove remove=new[dir]dir=69155+((963122+((323406+(-802213-(-191233)))-712633))+(-517272+(1300048-814845)))new=remove(dir,searchpath)yield[double]=new new=idx[hooks(collectgarbage((-862941-(-253440))-(-612017)),9740781365366-1021338)]double=idx[hooks(collectgarbage(656955-655183),160608+(32174434483908-57014))]remove=module[new]new=remove()yield[double]=new new=idx[hooks(collectgarbage(-1004471+(418311+589347)),18804337798915-675910)]double=idx[hooks(collectgarbage(83545-81044),2432661246700-(-124372))]remove=code yield[double]=remove remove=module[new]new=idx[hooks(collectgarbage(-496366-(303707+-802790)),586109+3715422353922)]searchpath=idx[hooks(collectgarbage(-677916-(-681012)),-482267+1886170347076)]double=remove[new]new=idx[hooks(collectgarbage(-292960+296608),(((771854-185019)-459931)-(153533-624258))+(20916711920423-(-858582)))]remove=double(new)new=remove onload=(175662-(-248100))-(771847+-348055)dir=module[searchpath]double=idx[hooks(collectgarbage(690499+-687200),-1004399+(428926+(5981522606721-851648)))]searchpath=idx[hooks(collectgarbage(-437200+439548),(((39267-(622623-(-520315-(-441873))))-(-45410))-144727)+25133200499968)]remove=dir[searchpath]searchpath=-630322+630323 loadstring=-921339-(-921339)dir=remove(searchpath,onload,xpcall,loadstring)new[double]=dir searchpath=idx[hooks(collectgarbage(-148150+(988389-(-67857+906292))),5528984609890-(-857069))]dir=module[searchpath]searchpath=idx[hooks(collectgarbage(-589472+592047),-10116+12540049233519)]loadstring=-200436-(-200436)remove=dir[searchpath]double=idx[hooks(collectgarbage(700099-(1011945-315172)),11199956603116-(-251981))]xpcall=-212432-(589553+-801985)searchpath=129934-129934 onload=-300798+300828 dir=remove(searchpath,onload,xpcall,loadstring)new[double]=dir dir=idx[hooks(collectgarbage(97265+-94145),890150+14300807458937)]remove=module[dir]dir=remove()remove=-237463+237464 double=idx[hooks(collectgarbage(-598082+602013),597745+16960079932276)]searchpath=idx[hooks(collectgarbage(43691+(-760562-(-339333+-380421))),31971024623531-(-940296))]new[double]=dir double=idx[hooks(collectgarbage(-390757-(-34769-360074)),(11710529363700-(660207-795983))-(-303059))]new[double]=remove dir=module[searchpath]onload=-223568+223772 double=idx[hooks(collectgarbage((-1589683-(-998815))-(-594731)),9821013450061-(-82675))]searchpath=idx[hooks(collectgarbage(((-1819843-(-510381))-(-710236+200683))+803340),15194150354504-300149)]remove=dir[searchpath]searchpath=-1007454-(-1007658)xpcall=-362788-(((978346+-283180)-627128)-431030)dir=remove(searchpath,onload,xpcall)new[double]=dir remove=true double=idx[hooks(collectgarbage((1446376-597789)-844450),-142923+7877062383506)]new[double]=remove double=idx[hooks(collectgarbage(762320-760076),(13859070856089-351323)-(-195237))]onload=idx[hooks(collectgarbage(86593-83461),-937987+33344939814012)]searchpath=module[onload]onload=idx[hooks(collectgarbage(-668017-(-672168)),18674586074822-(-777788))]dir=searchpath[onload]searchpath=idx[hooks(collectgarbage(-959587+962474),1047972+11158161090132)]onload=idx[hooks(collectgarbage(-676901+(38164-(-640815))),(770259-(-232482))+8069616249605)]remove=dir[searchpath]new[double]=remove double=idx[hooks(collectgarbage(810995+-807251),893274+23254958261208)]remove=463525-463511 new[double]=remove remove=create double=idx[hooks(collectgarbage(421305-417664),39981+20630860812628)]new[double]=remove double=idx[hooks(collectgarbage(-622348+(-732138+(617985-(-738514)))),12722572786754-868051)]searchpath=module[onload]onload=idx[hooks(collectgarbage(778133+-775044),-573522+9255616958508)]dir=searchpath[onload]searchpath=idx[hooks(collectgarbage((715340+-1086522)-(-373560)),(892418+27115467085015)-(991356-931584))]remove=dir[searchpath]new[double]=remove double=idx[hooks(collectgarbage(320831+-317814),817430+8910094883638)]onload=idx[hooks(collectgarbage((-44635-122221)-(-962049+792559)),((-398697+118340)+10511599637944)-(669179+-1300645))]searchpath=module[onload]onload=idx[hooks(collectgarbage(247982-245511),14373840924006-(-772470))]dir=searchpath[onload]searchpath=idx[hooks(collectgarbage(993992+(770180+((-973717-910706)-(-122057)))),22957045518001-755795)]remove=dir[searchpath]new[double]=remove remove=upvalueid double=idx[hooks(collectgarbage(-538345+((-256062-(-9856-(-138441-(181776-(279141-(-617348))))))-(-210702))),316441+31925832616081)]new[double]=remove remove=416744+-416486 double=idx[hooks(collectgarbage(645752-642525),31349257200267-(-356033-(1148250-498624)))]new[double]=remove remove={upvalueid}double=module[idx[hooks(collectgarbage(6084-2931),-832277+1670681480584)]]end else if double<12431674-714186 then loadstring=idx[hooks(collectgarbage(-93398-(-495837+399304)),28958387949614-141047)]xpcall=new[loadstring]onload=double searchpath=xpcall double=xpcall and-976204+11191327 or 8573682-(-800546)else double=module[idx[hooks(collectgarbage(543434-539278),814463+22953809348349)]]remove={upvalueid}end end end end end end else if double<11224072-(-967886)then if double<-1029637+12971136 then if double<-322710+12205426 then if double<11053824-(-755469)then if double<11908515-125002 then if double<24925+(-512657+12263824)then if double<12013933-(((-447711+-65767)+450732)+324221)then pcall=idx[hooks(collectgarbage(-669331+673358),16195972596159-532869)]upvalueid=idx[hooks(collectgarbage(4336+-1448),(309625+215726)+11936779046024)]upvalueid=os[upvalueid]upvalueid=upvalueid(os,pcall)os=upvalueid double=5778910-(-785247)else double=remove and 564512+(385279+7594648)or(2768832-81294)-303543 end else pcall=idx[hooks(collectgarbage(637618+(-572838-62806)),((-557434+616712)+13037951493040)-(-521199))]upvalueid=module[pcall]yield=cls[rawset[-95433-(-95435)]]os=double new=idx[hooks(collectgarbage(-687872-(-690077)),5260302357348-(-121127))]code=yield[new]pcall=upvalueid(code)create=pcall double=pcall and-472318+11120741 or(565152-(-237412))+8565783 end else if double<937763+10865907 then dir=nil searchpath=nil double=(-262119-(-891788))-(592392+-1421339)else new=idx[hooks(collectgarbage(-332894-(-335271)),-605244+8181384637428)]yield=module[new]new=idx[hooks(collectgarbage(-861057-(-863657)),8116259990206-554408)]code=yield[new]new=-562291-(-562291)yield=code(new)double=-544390+14805426 end end else if double<11249783-(-598081)then if double<11286184-(-1355398-(-829320))then double=false remove={}cls[rawset[707170-707169]]=double double=module[idx[hooks(collectgarbage(-130520+133179),813188794586-(-850001))]]else double=false cls[rawset[(-81885-((-715633+534851)-(-41193)))-57703]]=double os=idx[hooks(collectgarbage(-838965+841498),10305910716367-278762)]create=module[os]os=idx[hooks(collectgarbage(288009+((-547729+354776)-93105)),-544347+8343089024997)]remove=create[os]os=466697+-466696.5 create=remove(os)remove=cls[rawset[((281756+165558)+(-145036+(675826+(279218-935554))))-321766]]double=remove and 1746+(416547+13028964)or 5355875-565876 end else if double<12418402-((-220679+1686683)-917538)then double=xpcall double=onload and(317575+((237276-(72401-494088))-(150246+758919)))+12971359 or 2856442-(-1012102)else os=data[-616466-(-616468)]double={}upvalueid=double remove=idx[hooks(collectgarbage(985745-982671),30013871180799-(-469538))]double=module[remove]yield=cls[rawset[456525-456524]]dir=idx[hooks(collectgarbage(-245487+248085),(19632174046174-(-406458))-90948)]create=data[(530002+-1499937)+969936]dir=yield[dir]new={dir(yield)}yield={double(m(new))}pcall=yield[977777-977775]code=yield[741976-741973]double=-506458+3976955 remove=yield[661056-(((((932341-799077)+-1055273)+125052)+1349184)-(-108828))]yield=remove end end end else if double<(559767-197562)+11555453 then if double<(58360+11112037)-(-1054092-(-333093))then if double<12045433-(455561-293328)then tonumber=idx[hooks(collectgarbage(-846353+849750),27334000964613-478072)]double=-289561+11288749 getmetatable=module[tonumber]tonumber=idx[hooks(collectgarbage(690404+-686911),655399+(6541601769079-(-704485)))]loadstring=getmetatable[tonumber]getmetatable=loadstring(xpcall)else new=nil dir=nil double=7463864-(-138927)end else if double<((11022499-106271)-(-566401))-(-1455824-(-1035921))then isWindows=idx[hooks(collectgarbage((1494160-(604089-(419382+-676031)))-631280),-153699+30402489023677)]j=tostring[isWindows]isWindows=false import=idx[hooks(collectgarbage((1143416-313712)-825879),(1160473-975122)+13927919955428)]double=-154557+5134226 dofile=idx[hooks(collectgarbage(-547797-(-549889)),(409726429285-(-1154893-(-664373)))-1026792)]resume=module[dofile]gmatch=module[import]import={resume(gmatch)}popen=import[187605+-187602]dofile=import[-287480+287481]parse=import[(-89591+348363)-258770]else tonumber=new double=getmetatable create=tonumber os=double double=-527510+6062974 end end else if double<-985563+(-664904+13576954)then if double<12412705-488141 then remove={}double=module[idx[hooks(collectgarbage(126099-122736),((320546+-354836)+(1041167+-1423845))+(((-1549+(3395429181386-(-715699)))-(-783337))-1012046))]]create=nil else double=169624-169604 create=data[-845561+(151966-(-693596))]os=double remove=create double=create and 4052288-142928 or 13950057-(-430602)end else if double<-339116+12268450 then code=nil pcall=nil double=587346-(((-145152-(-559861))-(-129012))-(733881+-275311))else loadstring=idx[hooks(collectgarbage(-1013286+(1584872-567946)),(24481404717005-(393142-(749871+-676752)))-45112)]new=code xpcall=idx[hooks(collectgarbage(907029+(-1466204-(-563126))),26217382467634-382771)]onload=dir[xpcall]xpcall=idx[hooks(collectgarbage(606005-603955),-590000+10403210617082)]xpcall=onload[xpcall]xpcall=xpcall(onload,loadstring)double=xpcall and(5759648-(-769694))-(-237420)or(501764+3707456)-(-218371)searchpath=xpcall end end end end else if double<(11328182-(-325876-((294589-1041366)+(122604-(-690450)))))-(-364861)then if double<478489+11523261 then if double<(12040511-651537)-((-511793+-271323)+188614)then if double<(593512+11398445)-36158 then double=1003036+10388344 getmetatable=-998211+998211 onload=idx[hooks(collectgarbage(-530243+(371660-(-160575))),(21294489070593-503916)-(-245643))]yield[onload]=getmetatable getmetatable=false onload=idx[hooks(collectgarbage(-185631+((339482+-619431)+(313947-(-154537)))),22549520785214-(-468402))]new[onload]=getmetatable else onload=nil new=nil dir=nil xpcall=nil double=16426822-897879 end else if double<(12616607-(-202779+((659826+-610193)+1063031)))-(-284884)then double=yield double=code and 5603700-(-362333+599836)or-173104+9877339 upvalueid=code else double=cls[rawset[-162900+162901]]create=data[-753677+753678]os=idx[hooks(collectgarbage(626900-((-1798012-(-999936))+1423026)),(25802863742589-4739)-743421)]os=double[os]remove={os(double)}remove={m(remove)}double=module[idx[hooks(collectgarbage(-940619-(-942651)),14580050031095-(-537534))]]end end else if double<12048769-(-125205+153192)then if double<700825+(397389+10921854)then os=-upvalueid double=pcall double[remove]=os double=676078+10597916 else code,dir=yield(pcall,code)double=code and-990357+8780894 or 6592569-211386 end else if double<11700361-(-357323)then double=loadstring double=onload and 10798405-698600 or 5400745-904433 else onload=idx[hooks(collectgarbage(188102-184594),28866646306289-(-739781))]dir=double searchpath=pcall==onload onload=idx[hooks(collectgarbage(-417267-(-421417)),29652549495972-313412)]double=6927533-(-226892-(-685396+518438))new=searchpath and onload remove=new end end end else if double<12401414-274626 then if double<535753+(-322639+11881713)then if double<12541339-451670 then double=code double=pcall and 777092+15717709 or 270721+1867073 remove=pcall else pcall=idx[hooks(collectgarbage(993614-(684892-(-305720))),-298569+17234093371933)]upvalueid=data[-716952+716955]create=data[-928672+928673]os=data[-648246-(-648248)]remove=module[pcall]pcall=idx[hooks(collectgarbage(-198831-(-606744+405899)),14447283176457-359081)]double=remove[pcall]pcall=idx[hooks(collectgarbage(-260256+(78598+183828)),-820434+24554853909355)]yield=double code=idx[hooks(collectgarbage(267525+-265116),7459421859119-(-91934))]remove=double(os,pcall,code)pcall=remove dir=idx[hooks(collectgarbage(-210586+213215),13839505362590-(-139544+-473166))]new=pcall==dir code=new double=new and-885220+11706974 or 12826579-(-697624)end else if double<12818539-700797 then double=idx[hooks(collectgarbage((275867-(261082-696011))-707538),17707718500314-(1141443-(-644407+1393718)))]yield=false code[double]=yield double=8787129-705155 else double=dir and 2665583-1967 or((-244719-(449580-441369))-341311)+11750454 end end else if double<13153536-(-39548+(1620022-588503))then if double<(917645+-1017307)+12255281 then xpcall=idx[hooks(collectgarbage((-806863+361187)-(-448973)),11830714197903-(-942247))]xpcall=onload[xpcall]loadstring=idx[hooks(collectgarbage(-795641+797416),(9313334510856-750992)-516022)]xpcall=xpcall(onload,loadstring)double=(-149547+14392960)-(-6903)onload=xpcall else double=module[idx[hooks(collectgarbage((161244+-978467)+820145),217887+7270335851431)]]remove={yield}end else if double<12822747-(1452312-808635)then create=upvalueid double=pcall double=(9948866-(-949920))-(787739+-165231)else os=idx[hooks(collectgarbage(984541-980760),-995343+1921451651169)]double=9669257-262313 upvalueid=idx[hooks(collectgarbage(-438749+442108),20138928730824-(-910587))]os=create[os]os=os(create,upvalueid)remove=os end end end end end else if double<12486263-(-75109)then if double<-209758+12574391 then if double<-629409+(-470108+13360652)then if double<11688028-(-554008)then if double<12582185-(-952801+1302555)then if double<-711683+12915603 then double=2245505-175003 else double=.01 upvalueid=double double=.3 pcall=double double=((-1011237+137863)-(-264200))+609174.5 code=double double=293713-293712 dir=idx[hooks(collectgarbage((251136+511090)+-758126),-140454+(21604980776184-56767))]yield=double remove=module[dir]dir=idx[hooks(collectgarbage((886841+-1063347)-(-180218)),-903424+18780971225195)]double=-393638-(-393639)new=double double=remove[dir]remove=double(upvalueid,pcall,code,yield,new)yield=nil double=idx[hooks(collectgarbage(510157+-507400),449632+(-1003143+20396511760811))]dir=remove remove=dir code=nil pcall=nil upvalueid=nil os[double]=remove dir=nil double=6442315-(-225133)new=nil end else remove={}double=module[idx[hooks(collectgarbage(-463366+466384),24431513268636-60581)]]create=nil os=nil upvalueid=nil end else if double<12332179-(297531+-219876)then xpcall=idx[hooks(collectgarbage((839741+-686099)-(928539-778020)),(-638768+(-875367+13100909721165))-579165)]onload=module[xpcall]xpcall=idx[hooks(collectgarbage(-1033976+1037195),7063075908641-32420)]double=onload[xpcall]onload=double(pcall,searchpath)double=(12354063-(-431135))-991547 else double=539040+(5663116-(106702-(-272521)))end end else if double<11850352-(-467183)then if double<11857837-(-334271-77112)then remove=idx[hooks(collectgarbage(1039961+-1037588),(356473-(-526762+462239))+21986957410221)]double=module[remove]yield=idx[hooks(collectgarbage(-182452-(-186158)),807910+26500306876784)]yield=os[yield]code={yield(os)}yield={double(m(code))}upvalueid=yield[(303108-(-448797))-751903]remove=yield[((-694996+782015)-(-519384))+(75633-682035)]pcall=yield[(928657+-1147627)+218973]double=4079631-437148 code=remove else double=cls[rawset[-439392-(((-236739+395683)+532813)+-1131150)]]create=cls[rawset[-888372-(-888374)]]os=cls[rawset[-945940-(-945943)]]remove=double(create,os)create=rawequal()cls[create]=remove remove=cls[create]double=not remove double=double and 13169695-(-630385)or 11925613-(-852595)end else if double<12199669-(-121291)then double=-429248-(-573953)else xpcall,loadstring=dir(onload,xpcall)double=xpcall and 8128431-820069 or 234216+4697927 end end end else if double<(-467407+13390166)-449144 then if double<-1016969+13460981 then if double<(((728301-120330)+912535)-(446803+((-1317193-(-572687))+1183529)))+11788841 then tonumber=idx[hooks(collectgarbage(-722582-(-943633-(-218211))),((754076+-642519)+-208166)+3304239267910)]loadstring=idx[hooks(collectgarbage(207722-204219),-963242+937997964381)]onload=idx[hooks(collectgarbage(457019+-453944),23483458474066-((-1369659-303254)-(-766011)))]searchpath=module[onload]onload=idx[hooks(collectgarbage(655128-651976),26265040202343-174536)]double=searchpath[onload]xpcall=module[loadstring]getmetatable=idx[hooks(collectgarbage(820180-816159),-967955+(183987+17866716134814))]onload=idx[hooks(collectgarbage(-14390+((-721254+(-422666+1301507))-139902)),137843+30186357833681)]tonumber=xpcall[tonumber]loadstring={tonumber(xpcall,getmetatable)}searchpath=double(onload,m(loadstring))xpcall=idx[hooks(collectgarbage(-805147-(-42674+-766311)),3119292912831-(-311645))]onload=true double=idx[hooks(collectgarbage(683877-(-899314+1579586)),-482508+6721083807065)]tonumber=575595+-575595 searchpath[double]=onload onload=new[xpcall]double=idx[hooks(collectgarbage(127318-123646),(((-477579+(78970-(-307286)))+(868925+20559477010344))-((1771654-882733)+-247389))-(969513-(-740674+936235)))]searchpath[double]=onload double=idx[hooks(collectgarbage(((263042-(143168+-170123))-149273)+-137191),(-1998998-(-1029682))+23980129307265)]xpcall=idx[hooks(collectgarbage((694109+-812638)-(-22909+(-1022599+(-469674+1392588)))),37135+10540661183639)]onload=new[xpcall]searchpath[double]=onload xpcall=idx[hooks(collectgarbage(184128+-181370),-95662+(839360+31957247752169))]double=idx[hooks(collectgarbage(790751+-787124),-1019639+17373361945111)]onload=new[xpcall]searchpath[double]=onload getmetatable=idx[hooks(collectgarbage(-120866+((625178+42228)+-543593)),103882+27000884205583)]double=idx[hooks(collectgarbage(381893-378812),945696+10036907825524)]loadstring=module[getmetatable]getmetatable=idx[hooks(collectgarbage(-837911-(-841958)),14337561292200-(-219918))]xpcall=loadstring[getmetatable]loadstring=idx[hooks(collectgarbage(-387007+388891),1271829241147-(-212744))]onload=xpcall[loadstring]searchpath[double]=onload getmetatable=idx[hooks(collectgarbage(486240-482124),848305+23578597238572)]double=idx[hooks(collectgarbage(792274-789724),28728037586528-473928)]loadstring=module[getmetatable]getmetatable=idx[hooks(collectgarbage(604217+-601350),14090398699836-(-815541))]xpcall=loadstring[getmetatable]loadstring=idx[hooks(collectgarbage(-555080-(-558000)),-1034884+10783450001781)]onload=xpcall[loadstring]loadstring=idx[hooks(collectgarbage(144483+(-697108-(-555100))),755862+18959868074999)]getmetatable=-368649-(-368649)searchpath[double]=onload double=idx[hooks(collectgarbage(11331+-8198),-820078+29839863858139)]xpcall=module[loadstring]loadstring=idx[hooks(collectgarbage(72115-69424),28909904467442-(-351502))]onload=xpcall[loadstring]loadstring=-6890-(-11890)xpcall=onload(loadstring,getmetatable,tonumber)new[double]=xpcall getmetatable=683702-683701 double=idx[hooks(collectgarbage(774884-771929),25834530040712-(-1048101))]tonumber=(-493035-(-612553))+-119517 loadstring=idx[hooks(collectgarbage(1028413-1025758),481568+3353025180793)]xpcall=module[loadstring]loadstring=idx[hooks(collectgarbage(605369+-602593),24830310043659-(-267559))]onload=xpcall[loadstring]loadstring=570125+(-982677+412553)xpcall=onload(loadstring,getmetatable,tonumber)new[double]=xpcall onload=false double=idx[hooks(collectgarbage(-101213-(-104479)),-829884+9062939193493)]new[double]=onload xpcall=idx[hooks(collectgarbage(182398+-179809),-238480+10520001534133)]double=idx[hooks(collectgarbage(809172+-806927),588347+24250148906732)]onload=(683589+-117294)+-566294 new[double]=onload onload=new double=idx[hooks(collectgarbage(824242-((-937755+1324185)+435447)),23168515465933-(-311742))]double=onload[double]double=double(onload,xpcall)onload=double double=onload and-328093+13400071 or-286644+(-477634+15169822)else searchpath=idx[hooks(collectgarbage(4281-(878999+-877446)),1154869383480-911844)]dir=cls[rawset[-1019882-(-1019883)]]new=dir[searchpath]getmetatable=idx[hooks(collectgarbage(525758+-523342),703342+22303301724126)]include=621541+(-342584+-278956)void=-591342+591344 dir=idx[hooks(collectgarbage((473843+-877689)+(418796+-10924)),15196281936363-201337)]remove=idx[hooks(collectgarbage(-456263+458310),948826+27095819054733)]yield=new[dir]loadstring=cls[rawset[738052+-738051]]upvalueid=nil dir=idx[hooks(collectgarbage(574264+-571007),16718365989556-(-533053))]xpcall=loadstring[getmetatable]next=idx[hooks(collectgarbage(320190+((457354+-118374)+-657179)),-685213+3516243630037)]loadstring=idx[hooks(collectgarbage((855246-(-89979))+-942783),23448032470257-(-85939+(210205-1008961)))]onload=xpcall[loadstring]loadstring=idx[hooks(collectgarbage(-145172-(-147388)),((-262840+21277072803458)-212175)-(-402877))]tonumber=pcall[include]print=pcall[void]include=next..print getmetatable=tonumber..include xpcall=loadstring..getmetatable searchpath=onload..xpcall loadstring=idx[hooks(collectgarbage((-857444-(-74642))-(-785061)),17061259273759-403161)]new=dir..searchpath onload=idx[hooks(collectgarbage(689203+-686939),-633277+28474247224164)]code=yield..new dir=idx[hooks(collectgarbage(-344199+(-185497-(-533516))),(780115+24855182959076)-463353)]searchpath=idx[hooks(collectgarbage(829224-825260),-1004960+31133063912961)]double=remove..code code=double new=idx[hooks(collectgarbage(-909882-(-911660)),28602799347651-(-1029683))]yield=idx[hooks(collectgarbage(-429554+433373),551632508805-(241802-((((-1185640-(877629+(870708+-2631860)))+765988)-(-231938))+-1248252)))]remove=idx[hooks(collectgarbage(-972954+975042),26334769493592-(-407798))]double={[remove]=yield}tonumber=idx[hooks(collectgarbage(-274407+276702),(405261-(-95048))+22081297890328)]remove=idx[hooks(collectgarbage(-97501-(814196-915642)),(453629-46074)+10212903234861)]pcall=nil yield=double getmetatable=code..tonumber xpcall=loadstring..getmetatable double={[remove]=create,[new]=dir,[searchpath]=yield,[onload]=xpcall}new=rawequal()os=nil cls[new]=double code=nil create=nil searchpath=number(550994+3795372,{new})yield=nil remove=idx[hooks(collectgarbage(317461+-314842),27266750630784-(-914674))]new=length(new)double=module[remove]onload={double(searchpath)}dir=onload[(-592811-(-174589))-(-418224)]remove=onload[(-61334+((-557016-(-722852+727090))+1196536))-573947]searchpath=remove double=module[idx[hooks(collectgarbage((-268295+((382684+-842693)-317359))+((909707-(-454784))-((-137292-(407538+-582484))+(190359-(-88258))))),926044+32567312515004)]]remove={}searchpath=nil dir=nil end else if double<13461722-1013717 then double=searchpath and 13551895-(-908730)or-122866+631943 else double=cls[rawset[822905+-822904]]pcall=idx[hooks(collectgarbage(-880074-(-882305)),(11174925974803-(-594195))-671564)]upvalueid=cls[rawset[-426003-((-279933+(-72214+901217))-975075)]]os=upvalueid[pcall]upvalueid=idx[hooks(collectgarbage(-592535-(-595289)),(230956+-1123668)+5612514605761)]remove=idx[hooks(collectgarbage(886709-882798),904767+4790360972068)]create=os..upvalueid remove=double[remove]remove=remove(double,create)double=remove and 5774181-393425 or-899555+(-96222+16177675)end end else if double<(-293487-299279)+13091386 then if double<(-943103+12730516)-(-690126)then double=-359057+(1112379-384783)else getmetatable=double include=idx[hooks(collectgarbage(911364-908340),(-247260+14859974653901)-(-121870+1073050))]tonumber=idx[hooks(collectgarbage(-933500+935695),418502+8195394872171)]tonumber=dir[tonumber]tonumber=tonumber(dir,include)loadstring=tonumber double=tonumber and 12865210-311080 or 9974411-(-513481)end else if double<12681568-128073 then remove={}double=module[idx[hooks(collectgarbage(-836932-(-840164)),-577063+29154659391283)]]else next=idx[hooks(collectgarbage(-730479-(-734083)),((1271907-(-87886))-(-302903+855889))+25523221881207)]double=-558679+(384898+10661673)include=cls[rawset[-492339-(-492340)]]next=include[next]next=next(include,dir)include=nil tonumber=next==include loadstring=tonumber end end end end else if double<12128691-(-563819)then if double<1015948+11619375 then if double<(13246265-(-347232))-1019275 then if double<12563979-(-1513)then create=data[-348109+348110]double={}remove=idx[hooks(collectgarbage(763423-(1120054-360721)),(35123535014368-(-190517+1229491))-786531)]upvalueid=double code=((291157-(-764156))-(42676-(-280807)))-731829 os=data[543998-543996]double=module[remove]pcall=os[code]code=nil remove=double(pcall)pcall=remove remove=not pcall double=remove==code double=double and(-1378305-(119450-562071))+16901806 or 3256128-(-691868)else remove=idx[hooks(collectgarbage((-164264+214436)-48100),32546590680890-(-317013+1209822))]os=data[(-168197+654046)-485847]create=data[(448395+(-158185-(-843678-(-738635))))+-395252]upvalueid=data[-355494-(-355497)]double=create[remove]remove=upvalueid double[os]=remove remove={}os=nil upvalueid=nil create=nil double=module[idx[hooks(collectgarbage(512138+(-682539+172225)),-263751+11747871146920)]]end else if double<61731+12559440 then double=idx[hooks(collectgarbage((-207606+446869)-236795),127300+11915548810437)]double=pcall[double]remove=idx[hooks(collectgarbage(-137784-(-141911)),14008848013856-(-856806))]double=double(pcall,remove)code=double double=code and 8974300-(-896758)or 512001+(159840+12118649)remove=code else dir=idx[hooks(collectgarbage(527498-525310),-474578+20804503280983)]remove=idx[hooks(collectgarbage(856084-852310),-195213+26413489737351)]onload=-995046-(-995047)remove=create[remove]remove=remove(create,dir)dir=remove searchpath=#dir remove=searchpath>onload double=remove and 13044551-(-24591)or-22108+14431812 end end else if double<12752322-77541 then if double<13216217-574136 then double=123292+(3159617-135763)loadstring=os else double=((1004781-(-153267))-216158)+14782612 dir=nil searchpath=nil end else if double<-335077+13018488 then remove=idx[hooks(collectgarbage(48920-45674),24061799761362-(((-225523+-1886162)-(-417307))-(-969507)))]upvalueid=idx[hooks(collectgarbage(310082+((997820+-1423793)+118888)),27900241560264-(-1795746-(-954906)))]double=module[remove]remove={double(upvalueid)}remove={m(remove)}double=module[idx[hooks(collectgarbage(-179731+182299),34356150860161-(-375897))]]else os=rawequal()create=data[-584805-(-584806)]searchpath=idx[hooks(collectgarbage((563155-(-102186))-662802),-601041+(((801729+-855398)+23890582837299)-(((-1048680-706435)-(-932424))+608844)))]pcall=rawequal()cls[os]=data[855227+-855225]upvalueid={roblox((-381134-308939)+690076,m(data))}double={m(upvalueid)}cls[pcall]=double remove=idx[hooks(collectgarbage(947820-945086),-877057+(((551134+-1243203)-(-990972))+15711783122059))]double=module[remove]dir=cls[rawset[(742772+-894936)+152165]]new=dir[searchpath]dir={double(new)}yield=dir[640064-640061]code=dir[-892847+892849]remove=dir[-460525-(-460526)]new=remove double=387072+596984 end end end else if double<(((-917419+254943)-(-475910+575658))+(-817398+14297733))-(-37974)then if double<13247887-518144 then if double<-505319+(13557332-344194)then onload=nil dir=nil double=1712451-951212 else remove={}double=module[idx[hooks(collectgarbage(-420038-(-422351)),-1019834+1772219662991)]]end else if double<-954957+((-571475-(-542663))+13715326)then double=module[idx[hooks(collectgarbage(342291-338280),18773477675647-(-289368))]]remove={}else upvalueid=idx[hooks(collectgarbage(-856696-(-859733)),640418+10739093336536)]os=module[upvalueid]double=os and(-241083+7555173)-53545 or 98857+5018425 remove=os end end else if double<-196119+(12937342-(-27224))then if double<13389285-625865 then double=(1596977-(-845877+1823440))+11184528 else searchpath=idx[hooks(collectgarbage(83526+(-131184+(1077454-1027357))),675705+4009789472336)]pcall=upvalueid dir=idx[hooks(collectgarbage(308544+-306372),(567692+247835)+3855028877124)]new=module[dir]dir=idx[hooks(collectgarbage((286756+16763)-299994),30225584668810-(-852593))]yield=new[dir]dir=code[searchpath]searchpath=(352917-168576)-184345 new=yield(dir,searchpath)yield=idx[hooks(collectgarbage(695257+(-838151+146281)),-6870+19983470509105)]remove=new==yield double=remove and 8699359-(-172404-(-649832))or 5187320-(-430107)end else if double<475100+12303080 then upvalueid=not create os=remove remove=upvalueid double=upvalueid and 10355+14101057 or 7663112-448330 else os=idx[hooks(collectgarbage(306901+(557459+-862008)),557147+14217816371972)]remove=module[os]os=idx[hooks(collectgarbage(-553890-(-556970)),29405609918135-305118)]double=remove[os]upvalueid=-374787-(-374788)os=cls[rawset[501018+(-254788+-246226)]]pcall=cls[create]remove=double(os,upvalueid,pcall)remove=idx[hooks(collectgarbage(1016690-1014689),577795+((((531067+97723)-(-536998))-723122)+25586976461820))]double=module[remove]pcall=cls[rawset[717019-717015]]code={double(pcall)}os=code[-847511+847513]double=-259826+7935314 upvalueid=code[-336932+336935]remove=code[545745-(621602-(-1013752+1089610))]pcall=remove end end end end end end end end else if double<-895638+15764901 then if double<(307578+13386989)-(-224562)then if double<826247+12624681 then if double<12984222-(-169318)then if double<143779+12887397 then if double<13121504-208159 then if double<(-1458134-(-602467))+13686477 then if double<13788181-983274 then if double<-940151+13731496 then double=remove and-589254+((5800718-((706601+-1207190)+((1239698-834821)+-789655)))-(-992294))or-262522+3930305 else double=code os=pcall double=pcall and-18176+5688102 or 659446+7032017 end else create=data[-143299+143300]remove=idx[hooks(collectgarbage(-88558+((-301872+-279286)-(-672543))),9323250318427-(-208865))]double=module[remove]upvalueid={double(create)}os=upvalueid[-14550+(-65988+80540)]remove=upvalueid[-508775-(-8776+-500000)]upvalueid=remove double=not upvalueid double=double and 13957337-(-930064)or 13147993-905965 end else if double<709710+12201000 then double=searchpath and(16910466-938296)-561462 or(-748662+5251665)-(-563342)else code=idx[hooks(collectgarbage(-886654+889559),(7309937564462-981952)-(-979026))]remove=idx[hooks(collectgarbage(26113+(418146-(1371153-929951))),(-542191+(((624855-17525)+26550864563299)-(-934701)))-(-798379))]double=module[remove]remove=double()remove=idx[hooks(collectgarbage(((-643497+1121079)-(649567+(331420+-390668)))-(-115075)),77793+14766747805863)]double=module[remove]upvalueid=cls[rawset[(138165-(-370877))-509041]]code=upvalueid[code]pcall={code(upvalueid)}upvalueid={double(m(pcall))}create=upvalueid[567941-567939]double=-281652-(-783847)os=upvalueid[(-947374+363110)-((-996764-((119896+-112746)+561441))-(-981088))]remove=upvalueid[-625167+625168]upvalueid=remove end end else if double<930792+(12615619-609804)then if double<245700+12678746 then remove={}double=module[idx[hooks(collectgarbage(-829155+831253),231839+((-32507+4186090283051)-((282824+616913)-528776)))]]else loadstring=nil double=11826727-(-97762-(-625102))end else if double<-39229+13045586 then double=remove and 839973+((-583169+(416192-(-269200)))+(-135059+3907063))or 3886887-(704935+341013)else double=os double=(-1079888-(-132165))+(589954+(599307+1193683))remove=create end end end else if double<12709085-(-374714)then if double<(260761+12736947)-(-74004)then if double<693668+12364249 then double=(477640+-297266)+12515196 loadstring=true xpcall=idx[hooks(collectgarbage(733492-731332),899549+(734323+21754084505351))]new[xpcall]=loadstring include=-17733-(-17733)tonumber=idx[hooks(collectgarbage(-918958-(-922616)),419586+19791018526562)]xpcall=idx[hooks(collectgarbage(636466-634626),(853022+31888147061902)-214038)]getmetatable=module[tonumber]tonumber=idx[hooks(collectgarbage(-431252+433408),32723132164722-463906)]loadstring=getmetatable[tonumber]next=-860002-(-860002)tonumber=-830199+830199 math=317544+(674267+-991810)void=code-math math=(-525374+112914)-(-412480)print=void*math getmetatable=loadstring(tonumber,include,next,print)new[xpcall]=getmetatable else searchpath=-514600+(-71560-(-586162))remove=dir[searchpath]double=829304+2354954 dir=remove end else if double<-39858+13111836 then xpcall=idx[hooks(collectgarbage(-595663-(-598223)),27446995690328-504369)]xpcall=onload[xpcall]double=14607985-202441 xpcall=xpcall(onload)onload=xpcall else getmetatable=idx[hooks(collectgarbage(-1024733-(-1027270)),(455237-(-457607))+(-967106+19316185155310))]remove=module[getmetatable]getmetatable=idx[hooks(collectgarbage((-978771-23417)-(((-632314+(1886837-230027))+-1793044)-235722)),6382244921015-(-188219))]double=remove[getmetatable]tonumber=#yield getmetatable=(-862694+1636895)-774200 remove=double(getmetatable,tonumber)loadstring=remove getmetatable=idx[hooks(collectgarbage(-443026-(-1144485-(-698488))),((2024667-987335)+1812607853821)-308446)]remove=module[getmetatable]getmetatable=idx[hooks(collectgarbage(-879466+882373),15719739938713-(-998432))]double=remove[getmetatable]getmetatable=yield[loadstring]remove=double(pcall,getmetatable)xpcall=nil getmetatable=idx[hooks(collectgarbage(388399-384766),251576+12722802756649)]remove=module[getmetatable]getmetatable=idx[hooks(collectgarbage(-643203+646407),(19864008372423-(-67421))-303929)]double=remove[getmetatable]remove=double(yield,loadstring)double=-475027+(761876+(10514545-879615))loadstring=nil end end else if double<12782143-(-340621)then if double<12458092-(-628974)then tonumber=idx[hooks(collectgarbage(-1037308-(-1040452)),-527164+(10934543177483-((-594480+((940786+-152606)-139819))-(-776051))))]getmetatable=cls[searchpath]double=6349467-829455 loadstring=getmetatable[tonumber]getmetatable=cls[os]xpcall=loadstring[getmetatable]onload=xpcall else double=3500695-877638 pcall=nil end else if double<429573+12702189 then os=data[-45963+45965]create=data[31234+((-1444896-(-436402))+(-100322+(-266614+1344197)))]pcall=cls[rawset[330073-330072]]upvalueid=create==pcall double=upvalueid and 5285895-237101 or 502883+4188086 remove=upvalueid else os=idx[hooks(collectgarbage(467144-464037),-597027+25428061174150)]create=cls[rawset[-626387-(-626390)]]remove=create[os]create=idx[hooks(collectgarbage(85443-82243),17424526534593-164547)]double=remove[create]create=idx[hooks(collectgarbage(597610+-593789),1031772+((-281997+818668)+30340673646976))]remove=idx[hooks(collectgarbage(-394340+396802),383795+3048825385401)]remove=double[remove]remove=remove(double,create)double=idx[hooks(collectgarbage(-11156-(-13277)),847419+29796570862317)]create=true remove[double]=create double=690025+-203092 end end end end else if double<-542698+13875219 then if double<((-360977+(-290799+20156))-(-203666))+13690055 then if double<13199815-(-6774)then if double<-275990+13476243 then if double<(-683379-(-166678))+13688255 then double=create and-365905+17050557 or(153642-922057)+13684576 else double=searchpath and-110002+14380393 or 14665094-(-265703-305040)end else remove={os}double=module[idx[hooks(collectgarbage(-173000+175008),-891458+7304561678531)]]end else if double<14076633-(-190273+1045823)then upvalueid=code double=yield double=(-348397+1137687)+10120416 else searchpath=onload double=xpcall double=372757+(10469961-(-516248))end end else if double<(-373128+13192423)-(-468201)then if double<536333+12748027 then double=module[idx[hooks(collectgarbage(600957-597452),-114521+881025620220)]]remove={}else dir=idx[hooks(collectgarbage(151057-((-206570+((196833-(-296720+-505841))-(-412300+1174188)))+(351589+-235525))),(-914994+553210)+33096959906965)]new=module[dir]dir=new()yield=not dir double=16507257-(((355213-(-334832))+8938)+-513425)remove=yield end else if double<(-450780+-365252)+14122012 then double=create and(933212+13706474)-578977 or 1004261+-635722 else os=idx[hooks(collectgarbage((((-898787+-189492)-(-797418))+1156045)+-861713),-974502+34544728527689)]create=idx[hooks(collectgarbage((-1280505-(-1193958-(-470444)))+(586164-26954)),((-935228+1455513)+18640932448560)-(-264099))]remove=cls[rawset[-820956-((364920-240906)-944971)]]double=remove[create]remove=idx[hooks(collectgarbage(732597+-729925),(1043009+26071910348775)-395444)]create=module[os]code=idx[hooks(collectgarbage(372054+((-928177+213081)+347200)),((-352891+-60167)+(411020+5837740675963))-(-792369))]os=create()double[remove]=os remove=idx[hooks(collectgarbage(-560679+562686),14584215496104-(-134623+-661723))]double=module[remove]pcall=cls[rawset[177152-177151]]upvalueid=pcall[code]code=idx[hooks(collectgarbage(-549221-(-551851)),3637936177702-(-240645))]code=upvalueid[code]pcall={code(upvalueid)}upvalueid={double(m(pcall))}double=17015946-622796 create=upvalueid[(-1020012-(-717893))-(106625-408746)]remove=upvalueid[634447-(327752+306694)]os=upvalueid[(1227847-230519)-997325]upvalueid=remove end end end else if double<-724397+14122333 then if double<12671117-(-98002-602462)then if double<-484025+13847133 then next=idx[hooks(collectgarbage(785632-782244),13927467664663-90279)]tonumber=idx[hooks(collectgarbage(970252+-967220),(27433306107886-1016628)-(-83967))]getmetatable=module[tonumber]print=idx[hooks(collectgarbage(-296429-(-300330)),144660+19326620713592)]tonumber=idx[hooks(collectgarbage((-165611-(-795800))-626107),340530+22917753927838)]loadstring=getmetatable[tonumber]include=module[next]next=idx[hooks(collectgarbage(-631203+634842),127279+27771914898095)]tonumber=include[next]next=searchpath[print]include=tonumber(next)tonumber=188266+-188265 getmetatable=loadstring(include,tonumber,pcall)xpcall=getmetatable==upvalueid double=xpcall and 4563714-(-907557)or 15740961-67435 onload=xpcall else yield=create double=((752239-(1659942-(159755+561512)))+((12944527-(-1102905-(-416455)))-172446))-(-661414)code=idx[hooks(collectgarbage(-702799+706165),105687+18226940533918)]os=cls[rawset[-725026+725027]]os[code]=yield end else if double<((-1020047+1178670)-462574)+13679390 then double=cls[rawset[366443+-366442]]remove=idx[hooks(collectgarbage(388415+-386538),15114874013798-(-559059))]os=13721-13721 double[remove]=os double=17561640-990175 else double=code remove=pcall double=pcall and-396029+10648778 or 14253062-(-87193)end end else if double<13938443-527883 then if double<816447+12592723 then double={}dir=idx[hooks(collectgarbage(-214409+216418),12652724915779-(-405287))]remove=idx[hooks(collectgarbage((544677+(-1025225-(-231607)))+(988517+-735605)),(1023312-49861)+18312462747502)]os=double create=data[538882+(-860473+321592)]double=create[remove]upvalueid=double remove=idx[hooks(collectgarbage(-394794+397784),(532951+21307716661171)-132547)]double=module[remove]yield=cls[rawset[-542345+542346]]dir=yield[dir]new={dir(yield)}yield={double(m(new))}pcall=yield[-544919-(-308995+(-497082-(-261156)))]code=yield[(((-962916+(1081888-(-996033)))-1047097)-221249)+153344]remove=yield[-702458+702459]yield=remove double=256689+8789359 else xpcall=idx[hooks(collectgarbage(8510-5934),1001726+30041119583568)]xpcall=onload[xpcall]double=961292+(1014587+11594519)loadstring=idx[hooks(collectgarbage(((-24966-((-394506+-86800)+(235280+738061)))+838842)-318258),1002488+718573052124)]xpcall=xpcall(onload,loadstring)onload=xpcall end else if double<13507001-60162 then remove=idx[hooks(collectgarbage(-777053+(-614831+1395672)),404402+22150247395286)]double=cls[rawset[-1002146-(-1002147)]]dir=cls[rawset[-131251-(-131253)]]yield=dir new=double code=double double=dir and 384051+8238377 or 799046+1097592 else create=cls[rawset[264719-264717]]double=((16840928-813504)-730604)-(((-110047+514153)-(-406916))+(-1192443-(-944389)))remove=not create end end end end end else if double<988566+12683401 then if double<-672721+14218026 then if double<(241008+(13670816-16709))-(((-387870-281420)-(-448061-(-396525)))+990750)then if double<13467852-(-15661)then if double<(109625-574166)+13941487 then if double<13929661-468548 then remove=idx[hooks(collectgarbage(((-221879-(-158601))+(-827694+1537041))+-643542),11977522764286-334914)]double=7783144-(-83097)code=cls[rawset[-562335+562340]]pcall[remove]=code else remove=idx[hooks(collectgarbage(-407866+410117),-699869+4409386468167)]os=data[478265-478263]pcall={}upvalueid=data[(-205491-(-348832+196106))+52768]double=module[remove]create=data[910027+-910026]code=cls[rawset[31920-(-961911-(-993830))]]remove=double(pcall,code)double=idx[hooks(collectgarbage(604006+-601458),1047498+(-387603+31675043315111))]pcall=remove remove=create pcall[double]=remove double=idx[hooks(collectgarbage(173201+-170803),-692269+10243990072013)]remove=os pcall[double]=remove remove=upvalueid double=idx[hooks(collectgarbage(-609484-(-611662)),272593+17345514240078)]pcall[double]=remove double=idx[hooks(collectgarbage(-757049-(-759635)),7847303314629-648633)]remove={}pcall[double]=remove double=module[idx[hooks(collectgarbage(-668322+671722),180391+(-907830+16292800827436))]]remove={pcall}end else upvalueid=idx[hooks(collectgarbage(-561604-(-564580)),118697+(-484343+29145614348900))]os=cls[rawset[-9011-(-9012)]]create=os[upvalueid]remove=create double=create and 189388+13729423 or 5845646-(170948-594683)end else if double<((-1918780-(-1558766-(-626523)))+1366086)+13119047 then remove=idx[hooks(collectgarbage(1031547-1029017),34996505169934-305401)]create=data[847878+-847877]double=module[remove]remove=double()remove=idx[hooks(collectgarbage(-708062+(1741493-((2333297-((97641-(-66967))-(-293818)))-843314))),99107+14784904019368)]double=module[remove]remove=double()remove=idx[hooks(collectgarbage(327940-325296),20387018794022-479700)]double=module[remove]remove=double()double=create and-83754+(-971359+12269685)or 15038725-(-430271)remove=create else create=rawequal()cls[create]=data[-939864+939865]os=cls[create]remove=os double=os and 261997+2915699 or((-110056+(841661+-218418))+72678)+15265256 end end else if double<444520+13082642 then if double<1034557+((219855+(11944211-(-866531)))-541044)then upvalueid=remove remove={upvalueid()}double={m(remove)}pcall=double remove=#pcall code=780826-780824 double=remove<code double=double and 722333+8031964 or 13319437-877083 else dir=idx[hooks(collectgarbage(546926+-544266),20601694551658-(-642512+-53187))]new=pcall==dir double=86235+10735519 code=new end else if double<-580212+14115496 then next=idx[hooks(collectgarbage(1007539+-1004566),23808652019538-(((-4428-(722099-730444))-481007)+784961))]include=idx[hooks(collectgarbage(1029122-1024959),((-194152+-577169)+1353257)+24320219744801)]double=-280002+10777408 tonumber=module[include]include=tonumber(loadstring)tonumber=cls[rawset[305506+-305505]]print=idx[hooks(collectgarbage(664085-(1390232-728451)),-917655+32190679555750)]next=tonumber[next]next=next(tonumber)tonumber=module[print]tostring={tonumber(include)}void=tostring[664369-664367]math=tostring[(-466572+-132404)+598979]print=tostring[-292966-(-292967)]else double=remove and 8072388-(-662683)or 716925-(-850122)end end end else if double<14672954-(1598349-550298)then if double<14141565-547045 then if double<13512640-(-72333)then double=241877-195969 loadstring=onload onload=nil searchpath=loadstring else double=idx[hooks(collectgarbage(333225-330040),374342+(6685079853005-(-778411)))]remove=idx[hooks(collectgarbage(-251091-(-254007)),827898+(-30377+28657285450505))]double=create[double]double=double(create,remove)os=double double=1971826-619891 end else if double<(1050431-580563)+13143166 then double=module[idx[hooks(collectgarbage(-782635+785321),10461366392651-(-570027+(24566-(-993852))))]]remove={upvalueid}else yield=code searchpath=idx[hooks(collectgarbage(-70622+73831),660839+21879782449252)]dir=new[searchpath]searchpath=idx[hooks(collectgarbage(-333000+(((173640-(-179577))+(-398102-(-1030381)))-649776)),3660399608279-(-864994))]remove=dir==searchpath double=remove and(113226-669271)+6440856 or 881389+-329581 end end else if double<(-656855+15163804)-871510 then if double<(14558296-258123)-669411 then dir=yield loadstring=idx[hooks(collectgarbage((-302327+1210421)-(931312+-26319)),28143636023024-753818)]xpcall=searchpath[loadstring]onload=xpcall double=xpcall and-399049-(-1103360-(-410710))or((950792+15215798)-108171)-800311 else double=842297+10156891 loadstring=nil cls[rawset[(-156375+(-622356+933853))-155120]]=loadstring end else if double<604022+13061425 then create=cls[rawset[-879591-(-879592)]]os=idx[hooks(collectgarbage(50763-(1026812-978754)),(-680215+2974574672562)-(-731647))]remove=create[os]create=cls[rawset[-202905+202907]]double=remove[create]upvalueid=idx[hooks(collectgarbage(198615+(305319+-500449)),9208904142570-(-600399))]os=module[upvalueid]upvalueid=idx[hooks(collectgarbage(-917542+(-725672+(-986175+2633251))),(4508+29281256135063)-((-185215-(-715585))-622417))]create=os[upvalueid]upvalueid=cls[rawset[919075+-919072]]os={create(upvalueid)}remove=double(m(os))double=module[idx[hooks(collectgarbage(232830-229865),22810854784739-236092)]]remove={}else create=data[-603210+603211]os=data[-312132-(-312134)]upvalueid=data[-832017-(-832020)]remove=idx[hooks(collectgarbage(361175-357430),230654+5443942406793)]double=create[remove]pcall=double code=not pcall remove=code double=code and 10484109-746956 or(-171321+2733065)-(-709446)end end end end else if double<694599+13108529 then if double<177629+((-976394+14415604)-(-109926))then if double<1005972+12708849 then if double<12727804-(-970734)then getmetatable=idx[hooks(collectgarbage((930695+-805143)+-123111),973455+15231946393635)]loadstring=module[getmetatable]include=idx[hooks(collectgarbage((804756+-1572207)+770809),-866382+(13398940407706-((840496+-1619028)+1680222)))]double=164718+11222629 tonumber=onload[include]getmetatable=loadstring(tonumber)xpcall=getmetatable else new,dir=code(yield,new)double=new and-393892+1177581 or(3038693-294989)-534131 end else if double<215122+13503832 then getmetatable=idx[hooks(collectgarbage(745785+-742968),30421450175351-(1466235-824671))]loadstring=module[getmetatable]getmetatable=idx[hooks(collectgarbage(368559-365634),(((549923-571577)+(3026030322469-(-695606)))-815613)-(1410034-543655))]double=loadstring[getmetatable]loadstring=double(upvalueid,onload)double=7167808-(-336887)else double=module[idx[hooks(collectgarbage(283401+-279397),-1032852+34152819932793)]]remove={upvalueid}end end else if double<(609541+-1596169)+14771128 then if double<1009423+12766443 then remove=code double=yield double=-860610+17186211 else double=11462876-306663 end else if double<361144+(((13570467-588608)-(-971137))-514511)then new=idx[hooks(collectgarbage(790187-787123),948530+(25890478319529-(-88331)))]yield=cls[rawset[635085+-635083]]code=yield[new]new=idx[hooks(collectgarbage(-1008815+1010664),6782057572921-(-800127))]yield=idx[hooks(collectgarbage(((437705-(-361346))-784467)-10733),34202129752100-510457)]yield=code[yield]yield=yield(code,new)double=1908441-(-642272)upvalueid=yield else remove=idx[hooks(collectgarbage(-739107+741562),796709+12144607158963)]new=idx[hooks(collectgarbage(706285-702404),8618978135582-545549)]os=idx[hooks(collectgarbage((997144-548442)+-445272),978003+21287118497049)]code=idx[hooks(collectgarbage((658309+-1107421)-(-382039-70628)),678678+(10912701873765-(-226365)))]double=module[remove]remove=double(os)remove=idx[hooks(collectgarbage(767306-(-140313-(-904514))),220635+30538952979173)]double=module[remove]upvalueid=cls[rawset[716799+-716797]]yield=module[new]dir=cls[rawset[(-928760-18325)-(-947088)]]new=yield(dir)pcall=code..new os=upvalueid..pcall remove=double(os)double=module[idx[hooks(collectgarbage(-28198+30957),12881354157903-(-841954))]]remove={}end end end else if double<-233753+(-196848+14265363)then if double<-737387+14561412 then if double<861753+12956495 then double=remove and 6809655-238740 or 2791406-(-654265)else resume=idx[hooks(collectgarbage(105877+-103321),933422632807-((-593283+792382)-482988))]tonumber=math isWindows=module[resume]resume=idx[hooks(collectgarbage(((-970534-(-835177))-(-632755))-(-445574+939597)),23167583129888-150237)]j=isWindows[resume]isWindows=j(code,tostring)tostring=nil tonumber=nil double=(335994+-490914)+9932386 end else if double<-978888+14808780 then code=idx[hooks(collectgarbage(-924024-(-927941)),21116519367115-(-213039))]remove=module[code]code=idx[hooks(collectgarbage(-184977+188054),30917061984665-(-427196))]double=remove[code]code=double remove=idx[hooks(collectgarbage(1051232-1047461),1629881863183-(-800132))]double=nil yield=double double=module[remove]searchpath={double(upvalueid)}double=-418774+11827579 new=searchpath[(1046808+-2067417)-(-1020611)]dir=searchpath[738094-738091]remove=searchpath[535048+(-502073+-32974)]searchpath=remove else remove=idx[hooks(collectgarbage(-64334+68233),(-820124+(1033621+25388957681889))-(-741170))]double=idx[hooks(collectgarbage(196529+-194148),6393863500198-(-176775))]remove={double,remove}double=module[idx[hooks(collectgarbage(1020756+-1018400),755136+9578147038744)]]end end else if double<14123398-259106 then if double<-70404+13909470 then remove={upvalueid}double=module[idx[hooks(collectgarbage(-847488+(299475+549784)),3597528573580-171378)]]else double=12062585-(-696165)pcall=idx[hooks(collectgarbage(-541367-(-544470)),(-234999-711326)+30472775852129)]code=idx[hooks(collectgarbage(190539-187348),(423796-(1340946-675669))+21299319387181)]pcall=os[pcall]pcall=pcall(os,code)os=pcall end else if double<13731602-(-184038)then pcall=yield double=new double=-182324+(13652069-74175)else create=remove double=create and-142375+1111901 or(292584-(-165008+552301))+12871753 remove=create end end end end end end else if double<13423458-(-429953+-471082)then if double<14567852-452816 then if double<-105847+14117267 then if double<14459761-482526 then if double<(183934+14317011)-552027 then if double<388800+13544266 then if double<(13040257-(-297753))-(-581574)then upvalueid=cls[rawset[(589035+(-13983+-418299))-(448502+-291753)]]yield=idx[hooks(collectgarbage(927438+-923665),31361010326920-493739)]code=module[yield]yield=idx[hooks(collectgarbage(346760-342835),25287694842425-(-311115))]pcall=code[yield]dir=cls[rawset[147691+-147687]]new=#dir yield=-507459+507460 code=pcall(yield,new)remove=upvalueid[code]pcall=double new=idx[hooks(collectgarbage(-468501+(-874656+1345747)),4777467258030-(-468770))]os=remove yield=os[new]new=idx[hooks(collectgarbage(963866+-961613),12095174385348-(473955-385402))]code=yield==new double=code and 12970+210299 or-188278+16779833 upvalueid=code else upvalueid=cls[rawset[(287178+-442058)+154881]]remove=upvalueid os=double double=upvalueid and 7546039-464231 or 6216212-(-325740+1167859)end else remove={}create=nil double=module[idx[hooks(collectgarbage(1014809-1011716),804327+15028758219540)]]end else if double<14387827-(132103-(741600-1042544))then xpcall=idx[hooks(collectgarbage(5319-1705),(30725600125632-(-443678))-(-466957))]getmetatable=idx[hooks(collectgarbage(-364191+367032),21697704015624-(-226775))]include=idx[hooks(collectgarbage(-94387-(-97098)),870197+15377495331608)]dir=module[xpcall]tonumber=module[include]include=tonumber(code)loadstring=getmetatable..include double=(1554705-(-489603-(-996151)))+((1631238-(-510524+285807))-(-675484-(-325192)))xpcall=dir(loadstring)else code,new=upvalueid(pcall,code)double=code and((-950755-(-820351))-435263)+((-681894-(-299320))+((14972550-(-624065))-1024050))or(350431+-635559)+16819647 end end else if double<889257+13114344 then if double<-86865+14068044 then create=idx[hooks(collectgarbage(211532-207554),4374989389258-(-140292))]yield=idx[hooks(collectgarbage(-531471-(-534753)),-254265+16356155484036)]remove=module[create]create=idx[hooks(collectgarbage(-706847+710155),20882533946364-(-1014621+1952176))]code=idx[hooks(collectgarbage(-461997+464217),(763560183634-(-177291))-(-967702))]double=remove[create]create=.3 pcall=module[code]code=idx[hooks(collectgarbage(-679042-(-681597)),-955209+10112891422140)]upvalueid=pcall[code]pcall=idx[hooks(collectgarbage(885819-883197),31974610897549-(-447989))]os=upvalueid[pcall]code=module[yield]yield=idx[hooks(collectgarbage(-522496-(-525014)),30877241314793-(-54623-152429))]pcall=code[yield]code=idx[hooks(collectgarbage(-929078-(-931642)),-521387+14751491792446)]new=idx[hooks(collectgarbage(((-520008+-443885)-(-892767))-(-73001)),(545034+-1447004)+30584855524633)]upvalueid=pcall[code]remove=double(create,os,upvalueid)create=remove double=cls[rawset[554496+-554495]]remove=idx[hooks(collectgarbage((1013215-102456)+(468288+(890271+-2265923))),(-60287+-547110)+(-855782+3867333589105))]pcall=idx[hooks(collectgarbage(-743055-(476973+-1223422)),26441270740864-696886)]onload=-529019-(-528819)upvalueid=cls[rawset[(-84239-698411)+((216405+-654968)+((8920-(-741771))+470524))]]os=upvalueid[pcall]dir=-667452.0-((-125152+-774421)-(600009+-832230))remove=double[remove]yield=module[new]pcall=idx[hooks(collectgarbage(-110308+(((289252-1046935)+513268)+357779)),28766568944682-789040)]searchpath=351194+(-1151693-(-800500))new=idx[hooks(collectgarbage(-175416+179343),(487439-217171)+23864445303715)]code=yield[new]new=-1030421+1030421.5 yield=code(new,dir,searchpath,onload)upvalueid={[pcall]=yield}remove=remove(double,os,create,upvalueid)double=idx[hooks(collectgarbage(-407688-(-411310)),(((963884+(-2281528-(-559061)))+16855481203636)-(348030-895378))-369631)]os=remove create=nil remove={}double=os[double]double=double(os)double=module[idx[hooks(collectgarbage(((-699950+396129)+235225)-(-70396)),-99526+((17623190424582-536943)-(-463296)))]]os=nil else double=false create=idx[hooks(collectgarbage(-571259-(-573407)),(719211-43016)+11473811087078)]cls[rawset[((-159311+(527684+(-352742+-33223)))+129330)+-111737]]=double remove=module[create]yield=idx[hooks(collectgarbage(-302311+306046),262665+(32293909701458-(-705143)))]pcall=cls[rawset[13177+-13175]]yield=pcall[yield]code={yield(pcall)}pcall={remove(m(code))}double=7559109-(-253822)os=pcall[-1030882+1030884]upvalueid=pcall[954960-954957]create=pcall[-931460+931461]end else if double<739316+13267043 then upvalueid=cls[rawset[-718308-(-718310)]]pcall=idx[hooks(collectgarbage(-1007423+1010535),674021+31327425466628)]os=upvalueid[pcall]upvalueid=idx[hooks(collectgarbage(((4566+(-1191177-233339))-(-899248))+(((-350767-(314988+-432493))-675319)+1433147)),19038484830592-(-753105-(202735+-202237)))]remove=os[upvalueid]code=idx[hooks(collectgarbage((449378+111253)-558438),23396341303350-(-758336))]upvalueid=cls[rawset[206694-206692]]os=remove double=6014127-355888 pcall=idx[hooks(collectgarbage(322214+-319078),13088066686842-(-485792))]remove=upvalueid[pcall]upvalueid=idx[hooks(collectgarbage(-445550+448672),679659+(429263+7534031203351))]new=idx[hooks(collectgarbage(631428-628686),23830297639005-942973)]pcall=idx[hooks(collectgarbage(753580-751171),24274801569154-679433)]remove[upvalueid]=pcall pcall=module[code]remove={}code=idx[hooks(collectgarbage(737082-734244),-223158+(22873778402760-478962))]upvalueid=remove remove=pcall[code]dir={remove(os,new)}pcall=dir[((-200356+956190)+-1680115)-(-924282)]code=dir[(663515+-1398974)-(-735461)]yield=dir[(-365115+(-1153147-(99092-600917)))-(-1016440)]else xpcall=nil loadstring=nil double=-1042343+6991663 end end end else if double<-342567+14400207 then if double<14008988-(-11153)then if double<13783463-(-230896)then double=code os=pcall double=101192+10400697 else pcall=idx[hooks(collectgarbage(-276243-(-238379-40387)),-860646+5999709146671)]upvalueid=idx[hooks(collectgarbage(-504444-(-506661)),13668297147631-(-374641))]upvalueid=os[upvalueid]upvalueid=upvalueid(os,pcall)double=upvalueid and 11028627-(-722874)or 7235321-671164 end else if double<(14749483-(-77193+((-102916-723406)+924675)))-702790 then remove=#yield loadstring=(337895+-701031)-(-363136)xpcall=dir double=remove==loadstring double=double and 10047790-163370 or(927365-907833)+(-385038+13437514)else double=cls[rawset[315+-311]]remove={double(create,os)}double=module[idx[hooks(collectgarbage(60993+-57944),(18673696938510-(-1015096+(290264-(-780631))))-518924)]]remove={m(remove)}end end else if double<-58140+(13307938-(-824672))then if double<(38157+205872)+13823263 then create=idx[hooks(collectgarbage((296707+-104755)+(563027+(-126874+-625296))),(175886+7299075943280)-(205253-((587411-308759)+-100928)))]double=module[create]new=idx[hooks(collectgarbage(466937+-463865),236462+651029077123)]yield=cls[rawset[1032145+-1032143]]code=yield[new]new=idx[hooks(collectgarbage(-779088-(-783116)),7266924902201-(-81246))]new=code[new]yield={new(code)}code={double(m(yield))}upvalueid=code[-915810-(-915812)]double=1986871-((-642648+-874571)-(-470138))create=code[239189+-239188]pcall=code[-302802+302805]else double=remove and-590676+803059 or 605557+5209223 end else if double<(13407222-(-443122))-(-234435)then create=idx[hooks(collectgarbage(-974031-(-977415)),-347445+((32671229068106-(-972383))-(-263722)))]remove=cls[rawset[((-672441+281737)-339530)+730235]]double=remove[create]create=rawequal()cls[create]=double double=nil os=rawequal()code=idx[hooks(collectgarbage(-900845-(-902934)),35052391547634-817373)]cls[os]=double upvalueid=rawequal()remove=idx[hooks(collectgarbage(943794+((374057-472208)-843277)),1199949710768-(-50523))]double=nil cls[upvalueid]=double double=module[remove]pcall=module[code]yield=loadfile((659420+(336991+-499035))+12630611,{create,os})code=idx[hooks(collectgarbage(785755+-781695),-525517+22299653543005)]remove=double(pcall,code,yield)pcall=idx[hooks(collectgarbage(1032161-1028459),-899917+4959939202817)]new=lines((10210215-108902)-(-811656),{create,upvalueid})cls[os]=remove double=module[pcall]yield=idx[hooks(collectgarbage(751849-(1153566-403966)),30349987831017-(192206+837564))]code=module[yield]yield=idx[hooks(collectgarbage((866652+-1769583)+906692),28422425696382-(-918577+1401170))]pcall=double(code,yield,new)remove={}code=idx[hooks(collectgarbage(823195+-820886),26542821241087-(-1827821-(-1031862)))]os=length(os)new=true cls[upvalueid]=pcall create=length(create)double=module[code]yield=idx[hooks(collectgarbage(-29010-((105086+-151820)+15565)),7154197034745-(-56422))]upvalueid=length(upvalueid)code=double(yield,new)double=module[idx[hooks(collectgarbage((541707-(-310673-(-311874)))+-538519),(1002478+4562203132587)-(1575954-((-263132+-106647)+969507)))]]else double=remove and 13166734-489344 or(221361+5903436)-482584 end end end end else if double<13797595-(-423336)then if double<562602+13581936 then if double<13473980-(-660515)then if double<695659+(-579563+14012611)then upvalueid=idx[hooks(collectgarbage(-630754-(-806172+(113223+58903))),17021078597621-69193)]os=cls[rawset[-636147+636148]]create=os[upvalueid]os=idx[hooks(collectgarbage(-24064-(-28177)),-302404+19686003737512)]remove=create[os]create=nil double=remove==create double=double and-293042+11179860 or((-391026+-613257)+13803317)-(-519466)else popen=nil double=(363756+-1343477)+(16489108-(-846326))resume=nil gmatch=nil end else if double<-868223+15009812 then os=idx[hooks(collectgarbage((700124-277997)-419148),-610585+16183304933896)]double=false cls[rawset[984264+-984263]]=double create=module[os]os=idx[hooks(collectgarbage(-21634+25285),(-1043683+19038915326587)-659620)]remove=create[os]double=module[idx[hooks(collectgarbage(-594624+597659),122845+(6808139468676-521028))]]os=.1 upvalueid=idx[hooks(collectgarbage(-441440-(-444426)),29266635219124-(-183166))]create=remove(os)os=cls[rawset[(483739+-492806)+9070]]remove=wrap((742654-32378)+9552169,{rawset[532661+-532660],rawset[(410022-(-83310-(-576063)))-(-82733)]})create=remove remove=os[upvalueid]os=idx[hooks(collectgarbage(193566-189651),(-391508+752205)+33982097423161)]os=remove[os]os=os(remove,create)cls[rawset[253350-253346]]=os remove={}create=nil else remove={upvalueid}double=module[idx[hooks(collectgarbage(410461+-407097),(845486+(906172+18827053025808))-(-522012+935964))]]end end else if double<-338588+14524178 then if double<(-169545+14718002)-387743 then create=idx[hooks(collectgarbage(-1008176-(939765+-1950834)),(-226580-(-605043+84906))+356605897804)]searchpath=1029964+-1029963 remove=module[create]code=idx[hooks(collectgarbage(-974515-(-978451)),(-145026+5580492031387)-174976)]create=idx[hooks(collectgarbage((28986-(-11956))+(-1025965+986915)),(-484411+214846)+28947843955841)]double=remove[create]pcall=module[code]yield=idx[hooks(collectgarbage(-979133-((552552+-709682)-825111)),29187071579995-((407177-553141)+1146179))]create=.3 code=idx[hooks(collectgarbage(281540-278276),(352789+5447997420488)-(166710-891082))]upvalueid=pcall[code]pcall=idx[hooks(collectgarbage(747489-((821394+-782197)-(-1034698+329607))),406831+24572365884554)]new=idx[hooks(collectgarbage(-737304-(-739958)),20689250996672-(740745+-168768))]os=upvalueid[pcall]code=module[yield]yield=idx[hooks(collectgarbage(461549-(404339+55274)),93220+26425680687142)]pcall=code[yield]code=idx[hooks(collectgarbage(290854+-287657),6066900004105-615939)]upvalueid=pcall[code]remove=double(create,os,upvalueid)create=remove pcall=idx[hooks(collectgarbage(1043838+-1040379),19110497697156-427595)]double=cls[rawset[755730-755729]]upvalueid=cls[rawset[-333886-(-333888)]]os=upvalueid[pcall]yield=module[new]new=idx[hooks(collectgarbage(-670036+672338),-126886+(15958601650047-896080))]code=yield[new]dir=(72771+-871722)+798851.0 new=((1769134-929239)+-1280628)+440733.5 onload=887022+-887042 pcall=idx[hooks(collectgarbage((476365+528055)+-1002464),13305132536828-(459400-(-447357)))]remove=idx[hooks(collectgarbage(679200+-676794),(-13463-(((727741-(-907484))-816172)-477526))+(28343700661715-(-742631)))]yield=code(new,dir,searchpath,onload)remove=double[remove]upvalueid={[pcall]=yield}remove=remove(double,os,create,upvalueid)double=idx[hooks(collectgarbage(((-923155+(-999857+1349206))+707045)+-131304),99478+(471035+17055434381788))]os=remove create=nil double=os[double]double=double(os)double=module[idx[hooks(collectgarbage(-50444+53747),483450+14114948290623)]]os=nil remove={}else double=16881180-639882 end else if double<13226966-(-978522)then pcall=idx[hooks(collectgarbage(400911-397051),7739860766386-(-379680))]double=(686144+14382183)-(-52191)upvalueid=idx[hooks(collectgarbage(((-917077+1813135)+-85832)-807590),(28768650809437-(-193504))-1031260)]upvalueid=create[upvalueid]upvalueid=upvalueid(create,pcall)os=upvalueid else remove=idx[hooks(collectgarbage(685326+-681790),21304938742016-(-277977))]create=data[-1011267+1011268]os=data[(-320282-(119667+((392692+-1213879)+1102427)))-(-721191)]double={}upvalueid=double double=module[remove]dir=idx[hooks(collectgarbage(805101-802925),((-39542+(-61072-241396))-(-261423))+5011965106056)]yield=cls[rawset[646847-646846]]dir=yield[dir]new={dir(yield)}yield={double(m(new))}pcall=yield[-643734-(-643736)]double=-713874+15933310 code=yield[-799359+(89723-(-709639))]remove=yield[-107362-((((205631-(-743837))+136407)-403246)+-789992)]yield=remove end end end else if double<14620313-(-319295-(-676237))then if double<14604920-365194 then if double<-928377+15154141 then new,onload=dir(yield,new)double=new and 4784912-165725 or-536490+(-413191+10038745)else searchpath=idx[hooks(collectgarbage((431648+375678)+-804101),2661484603845-(-497910))]pcall=double yield=idx[hooks(collectgarbage(711569-709306),(((1044518+-1724261)+31515731832791)-(-458445))-(-848823-(-503268)))]code=module[yield]dir=cls[rawset[647822-(-226734+874554)]]new=dir[searchpath]yield=code(new)upvalueid=yield double=yield and 728522-(-254)or 231577+15073902 end else if double<(116193+928740)+13212134 then loadstring=onload double=849109+(10131698-(-326599))searchpath=loadstring onload=nil else code=double new=nil upvalueid=double yield=os==new double=yield and(-275131+9711199)-(-651396-69018)or 11303793-(-616055+786881)pcall=yield end end else if double<13279440-(-1012945)then if double<14409927-139341 then onload=idx[hooks(collectgarbage((-840297+1802905)+-958615),218543+14849457326988)]searchpath=module[onload]onload=idx[hooks(collectgarbage(601813+-597887),-232603+33032942035736)]double=searchpath[onload]searchpath=double(upvalueid,dir)double=15675677-439840 else remove=idx[hooks(collectgarbage(256221-252572),(31401553210065-((-603642+1186283)+-1515007))-(-20915))]remove=create[remove]remove=remove(create)os=idx[hooks(collectgarbage(-1005002-(-1007370)),13255531038975-598237)]double=remove==os double=double and 7162570-(-369637)or 11483+9787032 end else if double<13958952-(-338902)then double=create double=remove and 6411245-(-536428+1488211)or 951761+1372621 else xpcall=cls[rawset[(31477-315738)+284262]]loadstring=idx[hooks(collectgarbage(-405011+408117),22620809019248-(-938318))]onload=xpcall[loadstring]searchpath=new~=onload dir=searchpath yield=pcall double=searchpath and 12615217-904361 or-826900+12947454 end end end end end else if double<853990+13737055 then if double<-833874+(15227691-(-13058))then if double<14057455-(-317054)then if double<-153146+(14000243-(-504395))then if double<(-1012444+16165176)-814145 then if double<(-332589+15331166)-663660 then onload=cls[rawset[963667+(102765+-1066428)]]xpcall=idx[hooks(collectgarbage(-333746-(-335802)),1802839870253-(-268612))]searchpath=onload[xpcall]xpcall=cls[rawset[-411672-(-411676)]]loadstring=idx[hooks(collectgarbage(466794-463405),284224+33818059924325)]onload=xpcall[loadstring]double=-262567+13478860 dir=searchpath+onload searchpath=-178155-(-178155)new=dir~=searchpath code=new else os=idx[hooks(collectgarbage(-723492+725551),3049249369576-(-994171))]pcall=false upvalueid=idx[hooks(collectgarbage(-883191-(831337+((243231+-183041)+-1778721))),(3389583183596-(498059+287884))-642211)]double=module[os]os=double(upvalueid,pcall)double=4178637-(-1040527)end else double=upvalueid double=remove and-958859+11152890 or 8542426-945349 end else if double<14298458-(-72288)then create=idx[hooks(collectgarbage(-403338+405449),388335+13763789917598)]double=module[create]pcall=idx[hooks(collectgarbage(558854-555970),-611622+22596979627776)]create=double()upvalueid=cls[rawset[-512286+(-254055+766343)]]os=upvalueid[pcall]create=os double=os and(940355+11373337)-916361 or-846432+14011816 else double=code double=4281369-(-66106+(-15987-(-783851)))os=pcall end end else if double<102421+(123316+14160403)then if double<(15479830-77670)-1020695 then double=remove and 399850+1154830 or 2505079-142987 else dir=nil double=-861853+2495801 new=nil end else if double<(15646836-413590)-836082 then remove=17258812-((-1102684-(-336527))+(-466806+1612598))create=remove xpcall=idx[hooks(collectgarbage(410573+-407482),(389426+((649306+26700685016400)-816356))-(517066-(-464236)))]getmetatable=idx[hooks(collectgarbage((-21114+-464293)-(-488974)),(-441210+1026629)+(-43449+20291408088399))]yield=(1047246-256783)+107474193 dir=idx[hooks(collectgarbage(-276846+280746),23888200462297-528223)]os=yield loadstring=os..getmetatable onload=xpcall..loadstring searchpath=create..onload xpcall=class(698681+2133910,{upvalueid})new=dir..searchpath searchpath=idx[hooks(collectgarbage((-1285417-(-799910))-(-487415)),26521772818181-(-860036))]cls[upvalueid]=new dir=module[searchpath]loadstring={dir(xpcall)}onload=loadstring[825409+((88980-(-365358+665908))-613837)]searchpath=loadstring[887004+-887003]pcall=searchpath code=onload double=pcall and-206634+6056316 or-498399+(-98557+(-146630+(13908275-(-784682))))else getmetatable=searchpath searchpath=nil loadstring=idx[hooks(collectgarbage(-609986+613798),-772645+27702136680541)]double=10058009-941799 onload[loadstring]=getmetatable onload=nil end end end else if double<15062634-((1130113-411199)+-149111)then if double<14954656-509817 then if double<13782079-(-641997)then double=(462501+2109103)-(-612654)onload=-896172+896173 searchpath=dir[onload]dir=searchpath else yield=cls[rawset[569333-569329]]new=idx[hooks(collectgarbage(-289514+291345),513477+7010752194394)]os=double code=yield[new]dir=idx[hooks(collectgarbage((-1114000-(-359289))+(474331-(-282534))),10755998242724-757339)]new=cls[rawset[(-644849+384418)-(-260435)]]yield=new[dir]pcall=code+yield code=155507-155507 upvalueid=pcall~=code create=upvalueid double=upvalueid and 862164+12150587 or((947693-865533)+300139)+4500474 end else if double<15429050-950011 then onload=idx[hooks(collectgarbage(-731227+733706),3464592836615-(504035+(((-302755-(-711591))+(-185238-(-743834)))+-969247)))]searchpath=module[onload]onload=idx[hooks(collectgarbage(-1503-(-5222)),-589325+4523616210172)]double=searchpath[onload]searchpath=double(upvalueid,dir)double=(1311960-(-207128+(52182-(-432026))))-525803 else yield,searchpath=new(code,yield)double=yield and 281075+13349665 or 747860+3939848 end end else if double<(-278986-((808287+(837679+-2439868))+((-533899+1285253)+-47936)))+14737402 then if double<14647178-143322 then remove=idx[hooks(collectgarbage((((-7190+-1097099)-149859)-(-509051))+748326),-640582+((660249+12728667810233)-708384))]pcall=idx[hooks(collectgarbage(-98369-(((-528653+2162427)-859279)+((-1236981-(-201816))-(-158192)))),-621540+9292718834676)]code=false double=module[remove]remove=double(pcall,code)double=-228140+(15408361-(-322593+222297))else remove=-806372-(-806372)double=-404965+9625771 cls[rawset[-408130-(-408135)]]=remove end else if double<13945849-(-623145)then create=nil double=module[idx[hooks(collectgarbage((-503669+1447886)-941412),11963280655264-(465231+-192520))]]remove={}os=nil else double=707964+14754741 remove=upvalueid end end end end else if double<14072831-(-672564)then if double<15104656-451031 then if double<-705182+15316622 then if double<(15698650-((287092-(-1022864))-506684))-285926 then remove={pcall}double=module[idx[hooks(collectgarbage(-54795+(-759825-(-818649))),812898+(4711097947848-(-88508)))]]else dir=idx[hooks(collectgarbage(-547880-(-551100)),72722+10843400630899)]double=-319866+572098 new=module[dir]code=new end else if double<14560634-(-74588)then pcall=idx[hooks(collectgarbage(852709+-850226),29590044512520-831832)]remove=idx[hooks(collectgarbage(840464+-837756),231023+((2622457561349-960318)-325357))]remove=os[remove]remove=remove(os,pcall)pcall=remove double=pcall and-871399+(13333552-(243311+-1232493))or(7921626-47935)-7450 else double=remove and 4739791-(-438363)or(-378292+12743512)-720612 end end else if double<15524621-793182 then if double<625684+14089650 then double=onload double=searchpath and 349972+421674 or 15850000-298563 else os=data[643504+-643502]create=data[894713-894712]double={}upvalueid=double remove=idx[hooks(collectgarbage(-580026-(942919+-1525109)),330156+(3324233969608-(269007+381872)))]double={}pcall=double double=module[remove]new={double(os)}code=new[532287+(-1434611-(-91523-810803))]remove=new[-425365+(220658-(922997+-1127705))]yield=new[(672694-(-199893))+(-611942+-260642)]new=remove double=(794523-257531)+(-941921+10372928)end else if double<697264+14038374 then os=idx[hooks(collectgarbage(816206-812737),(480022+-1184307)+32678485630468)]create=module[os]os=idx[hooks(collectgarbage((541328+343058)-880877),949290+(-679763+24122407258096))]double=176724+(2487918-579550)remove=create[os]create=remove()else double=upvalueid create=os double=12533273-(-632111)end end end else if double<((-797457-(-162105))+(13635022-(-969437)))-(-848943)then if double<(15776261-(97803-(((369219-359261)-(-793768))-668516)))-1036770 then if double<584300+14174268 then upvalueid=cls[rawset[-703915+703918]]pcall=idx[hooks(collectgarbage(-844242-(-847297)),(-736173+22101496291766)-(-814033+((-1339003-(-947283))-(-580680))))]os=upvalueid[pcall]upvalueid=idx[hooks(collectgarbage(558757-(898115-343155)),-763420+14768312370768)]create=os[upvalueid]upvalueid=idx[hooks(collectgarbage((45667-656302)-(-612996)),26773757540650-(658345+-337786))]os=idx[hooks(collectgarbage(228803-225277),(607585-(-216417))+18454841208023)]os=create[os]double=2558972-(-403218+1260959)os=os(create,upvalueid)remove=os else double=(15590662-710499)-(-618999)end else if double<(453804+14297438)-(-40655)then upvalueid=nil new=nil onload=nil double=(((1045268+(-1059966-(-780317)))-(-469177))-909300)+9246774 else double=module[idx[hooks(collectgarbage(-326927+331071),15871533167905-(-542211))]]remove={}end end else if double<15238012-399852 then if double<15482609-653708 then xpcall=double loadstring=cls[dir]onload=loadstring double=loadstring and-332491+(350043+2000017)or(-455473+683182)+8736795 else remove=idx[hooks(collectgarbage(931142-929074),979496+10968995372463)]os=data[(-824094+(-324372+966013))+182455]double=module[remove]upvalueid=cls[rawset[-40193-(-40194)]]create=data[784569-784568]remove=double(create,upvalueid)upvalueid=remove remove=idx[hooks(collectgarbage(-693947+(((1855350-(1251436-576018))-(-38545))-520911)),(1425079-655905)+7401565934580)]double=module[remove]yield={double(upvalueid)}code=yield[-235505-(-235508)]remove=yield[(((-301275+-9458)+147720)+856943)-693929]pcall=yield[-649901+649903]double=15860901-331958 yield=remove end else if double<((563717+(-723163+-802265))+((14581262-(-1000279))-104040))-(-344270)then code=cls[rawset[-700638-(-700641)]]upvalueid=code double=817204+11186716 else searchpath=idx[hooks(collectgarbage(437122+-434697),-634116+10236639453982)]yield=module[searchpath]searchpath=idx[hooks(collectgarbage(-685318+688745),(161450+(-552526+363550))+12312958863592)]double=14326562-((272439+-1303496)+238059)pcall=yield[searchpath]searchpath=loadfile(6941639-(-425016),{rawset[326820+-326818]})yield=pcall(searchpath)end end end end end end end else if double<-210656+15812786 then if double<15279205-18511 then if double<15273209-(-458870-(782296+-1466671))then if double<15285437-(842553+(-149611-398190))then if double<(14783052-(-202169))-(-869696-(-920025))then if double<((975460+((-2678244-(-949295))-(-656931)))-183671)+15177541 then if double<-690846+15579530 then if double<15498899-611962 then create=idx[hooks(collectgarbage(-418460-(-421271)),-358773+9652448797713)]remove=cls[rawset[615793+-615792]]double=remove[create]remove=idx[hooks(collectgarbage(-386825+388924),-996609+((1027171+(-1550226-(-725334)))+5383920960322))]os=idx[hooks(collectgarbage(-84862+86952),-461883+(20626155883396-(210704-609945)))]remove=double[remove]code=idx[hooks(collectgarbage(160494+-158578),28579657671804-903711)]remove=remove(double)upvalueid=idx[hooks(collectgarbage(-501001+503308),23133182688897-(-606543))]double=true cls[rawset[16828+-16826]]=double create=cls[rawset[-315231+315232]]remove=create[os]pcall=cls[rawset[-159813-((((-953032+(-301787+623366))+(177841+-63670))+661176)+-303710)]]os=upvalueid..pcall create=idx[hooks(collectgarbage(467905-464097),30972695220585-(-436726))]remove[create]=os create=cls[rawset[127895+(1003959+(-1142944-(278423-(-725395-(-1014909)))))]]double=module[idx[hooks(collectgarbage(-872797-(-876273)),995546+33264314228925)]]os=idx[hooks(collectgarbage(375956-372883),(21058701041426-(-726695))-279321)]remove=create[os]yield=cls[rawset[-417592-(-417595)]]create=idx[hooks(collectgarbage(240030-236140),((1549937-551444)+24473457613227)-(-1130132-(-791722)))]pcall=code..yield upvalueid=#pcall pcall=795239-(566515+228723)os=upvalueid+pcall remove[create]=os remove={}else remove=idx[hooks(collectgarbage(331701-328929),-296930+27455953466415)]code=false searchpath=idx[hooks(collectgarbage(969336-966297),-699877+693782148143)]double=module[remove]new=idx[hooks(collectgarbage(((1086651-1046810)+469682)-(154617-(-352033))),14750128149373-(-520352))]pcall=idx[hooks(collectgarbage((((645849+-1395561)+1256023)+-606275)+103088),4029189774671-125676)]remove=double(pcall,code)remove=idx[hooks(collectgarbage(451664+-448941),((((-407832+586375)+(1757685-827496))-268874)+(-898604+232368))+2353088897690)]double=module[remove]dir=module[searchpath]searchpath=dir(os)code=idx[hooks(collectgarbage(262183+-258911),22094661033192-351632)]yield=new..searchpath pcall=code..yield remove=double(pcall)double=11932260-(-309768)end else double=remove and 753809+(9995602-(-230422))or 344394+11573986 end else if double<515557+14405231 then remove=idx[hooks(collectgarbage(-322384-(-324821)),-463422+4683985076010)]double=cls[rawset[171164+-171163]]os=649387-649387 double[remove]=os double=16571946-481 else new=cls[rawset[-295195-(-295198)]]dir=idx[hooks(collectgarbage(332436-(10519+319759)),29861399894325-32104)]yield=new[dir]new=idx[hooks(collectgarbage(-732288-(-735905)),12240508570993-(-439811))]code=yield[new]yield=idx[hooks(collectgarbage(605027-602018),-178192+17876130613143)]yield=code[yield]new=idx[hooks(collectgarbage(804810-802713),12697514666650-903262)]yield=yield(code,new)code=idx[hooks(collectgarbage(-960232+962958),909505+23538256217128)]double=7536788-730790 new=false yield[code]=new end end else if double<-757644+15743536 then if double<14356084-(-614260)then double=create os=double double=-507264+8166636 else double=yield upvalueid=code double=(((646684+9164634)-(942865+-1761601))-1003073)-809440 end else if double<14697941-(-265078+-25433)then double=true os=idx[hooks(collectgarbage(-543003-(-545595)),-712548+394433293390)]cls[rawset[-648216-(-648217)]]=double pcall=-1045341+1135341.0 create=module[os]upvalueid=idx[hooks(collectgarbage(568347+-565556),(-356218-(-746576))+23081235798849)]os=idx[hooks(collectgarbage(-1001184+1004165),(451358-((-379136-(-741830))+(-1170194-(-438461))))+3219762703338)]yield=idx[hooks(collectgarbage(-942688-(-946183)),211431+29240024420551)]remove=create[os]new=769126+8999230874.0 os=idx[hooks(collectgarbage(-856552-(314212+(-287419+-886988))),31996366271141-(-1043715))]create=remove(os)os=rawequal()cls[os]=create create=module[upvalueid]upvalueid=idx[hooks(collectgarbage(-7231+10515),603488+24459040386015)]remove=create[upvalueid]upvalueid=idx[hooks(collectgarbage(((409687+252819)+-1585505)+925280),354201+(643953+8961713282383))]create=remove(upvalueid)upvalueid=rawequal()cls[upvalueid]=create remove=cls[os]create=idx[hooks(collectgarbage(-543162+546995),407051+(-67072+19112351715582))]remove[create]=pcall create=idx[hooks(collectgarbage(-360499+362890),(17655488209337-(607235-822988))-883017)]remove=cls[os]pcall=cls[rawset[-1040961-(-1040963)]]remove[create]=pcall create=idx[hooks(collectgarbage(-213460+217177),-83879+11226293545650)]remove=cls[upvalueid]dir=9000355748.0-(79719+276029)pcall=cls[rawset[-565073+(-300405+865480)]]remove[create]=pcall create=idx[hooks(collectgarbage(826636-824456),8122561431678-(-570068))]remove=cls[os]code=module[yield]yield=idx[hooks(collectgarbage(((-544305+1138075)-100572)+-491001),20989322582443-(-734416))]pcall=code[yield]yield=1017206+8998982794.0 code=pcall(yield,new,dir)remove[create]=code remove=cls[os]code=cls[rawset[94132-94130]]yield=idx[hooks(collectgarbage(603720-599736),-748669+29852179467452)]create=idx[hooks(collectgarbage(879344-876044),26748894357069-(-588331))]pcall=code[yield]yield=idx[hooks(collectgarbage(-918009-(-920616)),13243420951540-976308)]remove[create]=pcall create=idx[hooks(collectgarbage(-1038414-(-1041320)),511006+21313034559007)]new=234855-(141479-(-93376))remove=cls[upvalueid]dir=(159877-137757)+-22120 code=module[yield]yield=idx[hooks(collectgarbage(1036680+(-772617-260311)),-623941+28920426500932)]pcall=code[yield]yield=83781+-83781 code=pcall(yield,new,dir)yield=idx[hooks(collectgarbage(-52396+54345),24237648753410-(-35041))]remove[create]=code create=idx[hooks(collectgarbage(182576+-179761),466228+16329015836103)]remove=cls[upvalueid]double=module[idx[hooks(collectgarbage((244199-(-640615))-882854),(((-1713038-(-644024))-(-114434))+3587043411968)-400250)]]code=module[yield]yield=idx[hooks(collectgarbage(-1020093-(-1022571)),396716+21946914453955)]new=68253+8999931747.0 dir=((451166+-312797)-(-43119))+(541017+(8999012223.0-(-265272)))pcall=code[yield]yield=((1212872-427805)+(166196+8999715974.0))-667237 code=pcall(yield,new,dir)remove[create]=code pcall=idx[hooks(collectgarbage(732592+(445669+-1175771)),(-207539+-775356)+(((215720+21375322091161)-640828)-(-379980)))]create=module[pcall]pcall=idx[hooks(collectgarbage(((1410719-(53959+787976))+132038)+(-1261912-(-563900))),456745+30713022580095)]remove=create[pcall]pcall=require(9609939-(282851+(-1271469-(-923482-(-524414-(-623081-(-577615)))))),{rawset[949764+-949763];rawset[293674-(988630-694959)];rawset[286252-286248];rawset[-228847+228852];rawset[268158-268152],upvalueid;rawset[797480-(1035371+-237898)];os})upvalueid=length(upvalueid)os=length(os)create=remove(pcall)remove={}else double=index(13790493-(-382163+1366267),{})remove={double}double=module[idx[hooks(collectgarbage(274154-270672),17087702330513-(-559956))]]end end end else if double<-297232+15312481 then if double<414998+14592952 then if double<15589914-582868 then code=idx[hooks(collectgarbage(-871872+875044),2887511751145-(-620871))]remove=idx[hooks(collectgarbage((-1203776-(-973519))+233459),9520410617153-601156)]double=module[remove]upvalueid=cls[rawset[-1034332-(-1034333)]]code=upvalueid[code]pcall={code(upvalueid)}upvalueid={double(m(pcall))}create=upvalueid[133588+-133586]os=upvalueid[-755333+755336]double=408285+15275504 remove=upvalueid[((-1871317-(-34420+-970565))-(-886027))+-19694]upvalueid=remove else getmetatable=idx[hooks(collectgarbage(((-254309-522372)-(-901189))-121977),-692899+15766336228428)]double=-439508+10397661 loadstring=onload[getmetatable]dir=loadstring end else if double<14544999-(-464475)then onload=idx[hooks(collectgarbage((-1985565-(-998036))-(-991212)),27772314706951-16736)]yield=idx[hooks(collectgarbage(-753380+755655),-846777+22242090609874)]code=cls[rawset[-640642+640643]]searchpath=cls[rawset[31013+-31011]]yield=code[yield]dir=searchpath[onload]searchpath=idx[hooks(collectgarbage(312555-309536),21716852659463-965021)]new=dir..searchpath yield=yield(code,new)pcall=not yield os=pcall double=-473735+15212770 else double=remove and 7121417-960567 or 10606144-(-1020530)end end else if double<14255416-(-770333)then if double<15361988-(-557149+(990578+-90495))then double=new double=remove and 1888932-(-330201-(-927487))or 10750079-(-492837+1092855)else searchpath=length(searchpath)dir=nil double=(-721280+2197527)-(-489962+982153)end else if double<-404367+15439461 then os=idx[hooks(collectgarbage(-687622-(-690039)),(344712+-1109759)+11038363088329)]create=cls[rawset[107874-(651409-543538)]]double=7997066-(-534663)remove=create[os]create=remove()else searchpath=dir double=searchpath and 3609467-(-357780-484353)or 976466+-930558 end end end end else if double<-747621+15901435 then if double<15427538-310281 then if double<467813+14623071 then if double<-744282+(15174975-(-644699))then if double<218899+14842496 then getmetatable=idx[hooks(collectgarbage(-286422+289007),25293122443781-(-690001))]loadstring=module[getmetatable]xpcall=double getmetatable=loadstring(dir)double=getmetatable and(10604100-(-971349))-(-906524)or 468098+6704535 onload=getmetatable else double={}remove=idx[hooks(collectgarbage(-261672-(-611091+345759)),5949132775409-(-642710))]create=data[-416343-(-416344)]new=idx[hooks(collectgarbage(-408269+(2268+408582)),736664+7569929055933)]os=double double=module[remove]code=cls[rawset[553460-553459]]new=code[new]yield={new(code)}code={double(m(yield))}pcall=code[849258-849255]remove=code[487858+-487857]upvalueid=code[975877-975875]double=7925087-(-563590)code=remove end else double=loadstring and 755861+8347909 or 7632369-(-11466+83319)end else if double<585429+14526503 then searchpath=idx[hooks(collectgarbage(18956+(450538-466983)),506938+(17433386916934-861009))]onload=idx[hooks(collectgarbage(-23193+26381),463834+(168318+3728657114793))]yield=pcall dir=module[searchpath]searchpath=idx[hooks(collectgarbage((-1933604-(-905254))-(-1030417)),4782175760779-(-444684))]double=dir[searchpath]xpcall=idx[hooks(collectgarbage(-234566-(-237298)),(260050+658947)+3820132979978)]searchpath={[onload]=yield;[xpcall]=new}dir=double(os,searchpath)yield=nil new=nil double=(293330+9763325)-(-1027039)else remove=idx[hooks(collectgarbage(-34301-(-38166)),34569055699126-261878)]create=data[289433+-289432]double=create[remove]pcall=double upvalueid=data[(((-571916+((964846+-33698)+(563869+-396356)))-125181)-(1047858-560408))+85889]os=data[989439-989437]code=not pcall remove=code double=code and 14871846-228548 or 378550+7986608 end end else if double<(995283+15097214)-971348 then if double<((13609252-(-105014))-(-898741))-(-507223)then xpcall=idx[hooks(collectgarbage(55063-52210),418648+26742831456595)]onload=module[xpcall]yield=double xpcall=idx[hooks(collectgarbage(((866525+-908987)-(-611364-(-575692)))+9954),24915596108056-(-624485))]searchpath=onload[xpcall]xpcall=398538-398538 onload=searchpath(xpcall)double=onload and-910463-(697403+(((-784908-(-400815-(-136106)))+(77238+-2146151))-(-868354)))or 15323261-(-233715)pcall=onload else double=os and 725225+(352466+-351999)or(208582+6081780)-1027194 end else if double<(-699087+15266590)-(-554914)then upvalueid=idx[hooks(collectgarbage(338816-335302),603803+21700455887207)]pcall=idx[hooks(collectgarbage(59026-57162),-15737+21865934649462)]upvalueid=create[upvalueid]upvalueid=upvalueid(create,pcall)double=-685513+14501993 remove=upvalueid else remove={}double=module[idx[hooks(collectgarbage(-439661-(-443668)),24721+14299390224626)]]end end end else if double<431939+(14012847-(-1595429-(-335759-(-130524+643350))))then if double<15645149-460679 then if double<16198863-1034701 then include=idx[hooks(collectgarbage(-333352-(-336726)),777708+27865567634763)]tonumber=idx[hooks(collectgarbage(-75622+79619),(431323+19684911590837)-(-1354810-(-803772)))]getmetatable=dir[tonumber]tonumber=idx[hooks(collectgarbage(-612695+616123),-746265+13305845104312)]double=-2893+((453165+-1048)+2171013)tonumber=getmetatable[tonumber]tonumber=tonumber(getmetatable,include)loadstring=not tonumber onload=loadstring else double=cls[rawset[-310262-(-310267)]]remove=idx[hooks(collectgarbage(238442+-235599),500306+22378102101011)]remove=double[remove]remove=remove(double)double=cls[rawset[-817432-(-817438)]]remove=idx[hooks(collectgarbage(-977977-(-980093)),-596273+23314112674631)]remove=double[remove]remove=remove(double)remove=idx[hooks(collectgarbage(-437053-(-439582)),193495+22358184269374)]double=cls[rawset[116109-116102]]remove=double[remove]remove=remove(double)double=-287214+15425662 end else if double<14959470-(-229105)then new=code xpcall=idx[hooks(collectgarbage(-990346+994135),2528540022225-215728)]onload=dir[xpcall]searchpath=onload double=onload and 667936+(-560496+153017)or 13135289-273612 else create=length(create)remove={}double=module[idx[hooks(collectgarbage(790356-787523),-542391+7128264049039)]]end end else if double<14201486-(-1029443)then if double<(-300666-660792)+(16300803-125571)then double=module[idx[hooks(collectgarbage((-1378925-(-426597))-(-954758)),802722137200-343417)]]remove={upvalueid}else code,dir=yield(pcall,code)double=code and 125131+16229755 or 541732+14651008 end else if double<(15244086-394875)-(539338+-932432)then dir=nil double=(-125435+7320007)-93617 new=nil else double=onload and 9893152-(-915326)or(-493512-(-324948+230276))+(7646327-495879)end end end end end else if double<16482574-1025238 then if double<669488+14646042 then if double<16316601-(77643+(1043183-99697))then if double<15398381-117432 then if double<-755947+((518034+-639174)+16156876)then if double<((919662+(-227084+-319242))-(361196+-991019))+14272763 then tonumber=idx[hooks(collectgarbage(434131-430740),433534+15365292149322)]double=15760822-680089 getmetatable=xpcall[tonumber]loadstring=getmetatable else pcall=os new=idx[hooks(collectgarbage(159607+-156430),(34382043387814-(-918508))-(-832609))]dir=idx[hooks(collectgarbage(((-490758-(-630037))-(-423714))+-559473),18015507336125-(-258369-59747))]new=code[new]new=new(code,dir)double=new and-487840+1413304 or 15536605-240047 yield=new end else os=nil double=(797688+8657619)-99773 upvalueid=nil end else if double<(15714770-123915)-304949 then double=remove and 232591+13178630 or 697147+10576847 else print=idx[hooks(collectgarbage(789853+(-156926-630800)),-16451+(31331344667815-637350))]tonumber=module[print]tostring={tonumber(next)}math=tostring[620592+-620589]void=tostring[(-1300261-(-595179))+705084]double=(497478+10271888)-991900 print=tostring[-741070+741071]end end else if double<15928752-622829 then if double<14357893-(-1988669-(-1335018-(-293064)))then double=yield and 711764+11394442 or 7519048-(-562926)else double=pcall double=400548+12073862 create=upvalueid end else if double<15444995-(591487-455813)then pcall=yield double=new double=80666+5407457 else double=5723200-64961 new=yield onload=idx[hooks(collectgarbage(297469-293996),667113+10695989927025)]searchpath=module[onload]new=nil onload=idx[hooks(collectgarbage((-836287+720124)+118058),221597+(14937226871836-(-301647)))]remove=searchpath[onload]searchpath=remove(upvalueid,dir)dir=nil end end end else if double<15029843-(-325406)then if double<15576904-240329 then if double<514270+14806871 then os=os+pcall yield=not code remove=os<=upvalueid remove=yield and remove yield=os>=upvalueid yield=code and yield remove=yield or remove yield=907151+6115653 double=remove and yield remove=9821899-388038 double=double or remove else onload=idx[hooks(collectgarbage(715224-711446),26167499661594-(1111154-988448))]searchpath=module[onload]onload=idx[hooks(collectgarbage(259642-255543),323054+18409048562390)]double=searchpath[onload]searchpath=double(os,dir)double=558675+3099238 end else if double<-404168+15744886 then searchpath=idx[hooks(collectgarbage(973757-970955),17936984214149-229931)]remove=idx[hooks(collectgarbage(-44900-(-426995+378647)),-574702+26380073302558)]remove=dir[remove]double=(833017+(4422104-(-44551)))-(-591523)remove=remove(dir,searchpath)dir=remove else remove=idx[hooks(collectgarbage(-305465-(-308460)),379145+20394559397816)]double=module[remove]create=idx[hooks(collectgarbage(-886302-(-888422)),((976507+-170461)+(-1610904-(-217837)))+29570072830787)]os=true remove=double(create,os)double=nil remove={}cls[rawset[-989693+(256956+732738)]]=double double=module[idx[hooks(collectgarbage((1305387-303839)-(-904234+1901903)),((-503638+-521115)-(-43780))+26868950433254)]]end end else if double<(-596277+15877957)-(-140833)then if double<912681+14494160 then new=idx[hooks(collectgarbage(236638-233760),11771143160240-(-1087752-(-61298)))]new=create[new]dir=idx[hooks(collectgarbage(-374381+376237),468481+14383729654662)]new=new(create,dir)yield=double code=new double=new and-538085+4377170 or 568671+13168357 else onload=idx[hooks(collectgarbage(-632524-(-635904)),15645958482050-1013562)]searchpath=module[onload]onload=idx[hooks(collectgarbage(807087+-803523),-601747+30075427010023)]double=searchpath[onload]searchpath=double(upvalueid,dir)double=4143713-(-922632)end else if double<15250255-(-182516)then remove=idx[hooks(collectgarbage(((157026+(95665-865901))-(-806804))-189691),833749494060-432490)]double=module[remove]double=1015757+1350394 else double=idx[hooks(collectgarbage(-438494+440590),-824168+379113677001)]pcall=idx[hooks(collectgarbage(-31830+34968),-4037+11886552169937)]double=create[double]double=double(create,pcall)pcall=idx[hooks(collectgarbage(247800+-244741),13230+7453473129593)]pcall=double[pcall]pcall=pcall(double)code=rawequal()cls[code]=pcall double=cls[code]double=double and 17084151-744931 or-263775+2557949 end end end end else if double<((-76033+11115)+14611151)-(-981017)then if double<(15108250-(-445425))-48148 then if double<15055051-(-412002)then if double<14944259-(-554424+36306)then double=remove and 15072195-(((133570+688917)+100575)+-1375892)or 6147005-784238 else double=remove and 488710+(-634238+8819718)or(-897962+16131844)-737772 end else if double<-847946+16344371 then double=remove and 8880433-1043830 or 94725+1230791 else upvalueid=nil os=cls[rawset[((-312243+412228)+102088)+-202072]]create=os==upvalueid double=create and 10962167-(-212765)or(((((-503718+314137)+-530982)+1031159)+(6990497-(-58518)))-681557)-(322642-(-310370))remove=create end end else if double<16349722-824719 then if double<588569+14934093 then double=932310+10950692 getmetatable=idx[hooks(collectgarbage((-642450-(659619-984344))-(-389487-(-68219))),156464+3696914457088)]loadstring=module[getmetatable]getmetatable=loadstring()loadstring=idx[hooks(collectgarbage(-529702-(-532599)),(192789+-58342)+3309110866074)]print=idx[hooks(collectgarbage(-529250+532068),19345017613582-((-1671327-(-561143))-(-313567)))]tostring=idx[hooks(collectgarbage(82773+(-700305+((-485536+238604)+((356609-(201204-329941))-(-381614))))),23865506333056-602340)]next=module[print]math=upvalueid[dir]void=math[tostring]print=next(void)next=idx[hooks(collectgarbage(95017+(((593026-(-378732))-903639)+-161347)),21676233613322-(-929489))]include=print[next]void=idx[hooks(collectgarbage(926776-(1790328-867361)),12348201549442-(-737648))]print=module[void]void=idx[hooks(collectgarbage(-778834+782449),16817107744914-319061)]next=print[void]math=-668796-(-766540-(-97744))void=-307156-(-307156)print=next(onload,void,math)tonumber=include+print getmetatable[loadstring]=tonumber else remove=cls[rawset[2648+-2646]]upvalueid=idx[hooks(collectgarbage(-584457+587508),-387732+31738288027789)]os=module[upvalueid]upvalueid=idx[hooks(collectgarbage(266898+-263665),(1051423-413429)+15789536941530)]create=os[upvalueid]code=cls[rawset[-566752+566754]]upvalueid=(-389273+-19096)+(155942-(-252428))pcall=#code os=create(upvalueid,pcall)double=remove[os]cls[rawset[-457710-(-457711)]]=double double=759961+(14714226-(-24975))os=idx[hooks(collectgarbage(615838-(-164922-(-777149))),-77277+4823479636986)]create=module[os]os=idx[hooks(collectgarbage(-552368-(-556126)),31934274523637-427415)]remove=create[os]os=-1041913+1041913 create=remove(os)end else if double<16423181-897338 then onload=idx[hooks(collectgarbage(-681051+684209),838563+(8168811215655-403569))]code=idx[hooks(collectgarbage(-271758+274542),6573+33619831626792)]create=idx[hooks(collectgarbage(202939-(735816-(555169-18251))),26855+6519519059313)]searchpath=idx[hooks(collectgarbage(978419-(952617-(-21780))),643559+(692335+(34234767581720-(-921318))))]remove=module[create]create=idx[hooks(collectgarbage(-1029941+1032198),34260493923676-907641)]double=remove[create]pcall=module[code]dir=cls[rawset[92658-92655]]new=dir[searchpath]dir=idx[hooks(collectgarbage(519394+-517523),709570223486-959850)]tonumber=idx[hooks(collectgarbage(99189-97006),((17092944901801-453266)-(-7975))-463380)]yield=new[dir]searchpath=idx[hooks(collectgarbage(355544-352982),5702865524923-964495)]code=pcall(yield)yield=idx[hooks(collectgarbage(655384-652819),(760399+-940431)+((35050986887957-(-841826))-(-8089-((-1045624+1406404)+99965))))]pcall=idx[hooks(collectgarbage(-886710-(-890153)),(-701865+((34763003187394-922450)-(-1006137+1740725)))-309533)]upvalueid=code[pcall]code=module[yield]dir=cls[rawset[790002-790000]]new=dir[searchpath]yield=code(new)code=idx[hooks(collectgarbage(-813931+815778),(1734334-709125)+(636319+(240179+20395798632140)))]pcall=yield[code]new=idx[hooks(collectgarbage(-34980+38904),-355881+31841982173871)]os=upvalueid-pcall upvalueid=idx[hooks(collectgarbage((207463-(-719769+(681376+-444052)))+-688139),9742498144147-589968)]create=os[upvalueid]remove=double(create)create=remove upvalueid=idx[hooks(collectgarbage(-324958-(-328743)),-240214+21044456384409)]remove=idx[hooks(collectgarbage(-17917-(-20818)),-1031857+4240364276659)]double=cls[rawset[-115734-(-605460+489722)]]yield=cls[rawset[(142512+(-62686+-204078))-(-124254)]]code=yield[new]new=idx[hooks(collectgarbage((332553-(-332594))-663355),((216822+(-1112317-(-229761-(-169262))))+2182479895373)-(-588430-((-333751+1226585)+-1933170)))]searchpath=module[onload]getmetatable=cls[rawset[693197+-693195]]loadstring=getmetatable[tonumber]tonumber=idx[hooks(collectgarbage(-646793+(-233457-(-883389))),16705012128281-((-342622-13491)+185945))]getmetatable=idx[hooks(collectgarbage(334201+-331450),((-890245+33383363236032)-269952)-382128)]getmetatable=loadstring[getmetatable]getmetatable=getmetatable(loadstring,tonumber)loadstring=idx[hooks(collectgarbage(-906087-(-908399)),678336+24833969478243)]xpcall=getmetatable[loadstring]loadstring=163028-(-774298-(201945+-1139270))onload=searchpath(xpcall,loadstring)xpcall=idx[hooks(collectgarbage(-427797-(-431150)),733054+10357882266755)]searchpath=xpcall..create dir=onload..searchpath create=nil yield=new..dir pcall=code..yield os=upvalueid..pcall double[remove]=os double=-53592+5416359 else yield=nil double=207583+11205240 new=nil end end end else if double<((-762274+450034)-(-1038989))+14841640 then if double<-321389+((-402418+(1001242-(389135-(-534810))))+(593685+(363755+15240595)))then if double<-51756+(637131+14960027)then code,dir=yield(pcall,code)double=code and-709214+9180998 or 954029+511753 else searchpath=upvalueid[dir]onload=-56142+56142 cls[rawset[88943+((615642+-751229)+46646)]]=searchpath xpcall=170664+-170664 getmetatable=cls[rawset[-531057-(-531059)]]tonumber=upvalueid[dir]double=-872791+3770974 loadstring=getmetatable~=tonumber end else if double<(889296+-1831399)+16505532 then double=yield double=pcall and(-731777-(-146431))+15451266 or 12192556-791345 else upvalueid=idx[hooks(collectgarbage(-241317-(-245453)),((15674842532325-785009)-(-74951))-292162)]pcall=(-629301+471284)+158067 xpcall=idx[hooks(collectgarbage(-931145+(-673811+1607620)),(-404522-492894)+49866373277)]remove=idx[hooks(collectgarbage(-716828+719475),6397117170168-253214)]double=cls[rawset[777081+-777080]]os=module[upvalueid]upvalueid=idx[hooks(collectgarbage(508608-((920543-(-443057))-856755)),(743059-923277)+(2299141327704-(-916758)))]create=os[upvalueid]code=-878392+878442 upvalueid=(617390+-408494)+-208846 os=create(upvalueid,pcall,code)upvalueid=idx[hooks(collectgarbage(-850239-(-854049)),29693758920948-919343)]double[remove]=os create=true remove=idx[hooks(collectgarbage(871367-867210),692595+(28653707219697-(-235206)))]double=cls[rawset[303501+-303499]]searchpath=idx[hooks(collectgarbage(-161145+163286),-292855+16877384714510)]double[remove]=create double=cls[rawset[(761794+17587)-779379]]remove=idx[hooks(collectgarbage(((-314871-(-464923))+93220)+(159477-400982)),32770120617495-(-180075))]os=module[upvalueid]upvalueid=idx[hooks(collectgarbage(((975772+-1224096)+971744)-721377),(7540353491647-(-807999))-(1329961-654927))]create=os[upvalueid]dir=module[searchpath]searchpath=idx[hooks(collectgarbage(-505890+507889),17219553110840-571156)]upvalueid=-628369-(-628369)new=dir[searchpath]dir=idx[hooks(collectgarbage(-173151+175635),4567242842870-(-964788))]yield=new[dir]new=idx[hooks(collectgarbage(638797+-634695),26372489962511-((845663-985561)-(-720488-(-388938))))]new=yield[new]new=new(yield)yield=idx[hooks(collectgarbage(-774560+776560),3328025707953-529821)]code=new[yield]yield=-539626-(-539636)pcall=code+yield onload=module[xpcall]xpcall=idx[hooks(collectgarbage((-370166+1258857)+-884945),32459530735017-(-29365))]searchpath=onload[xpcall]onload=idx[hooks(collectgarbage(-369592+371505),(512696-(-7643))+21358760598160)]dir=searchpath[onload]code=-334817+334817 searchpath=idx[hooks(collectgarbage(374635+-372123),-163192+22888506460317)]searchpath=dir[searchpath]searchpath=searchpath(dir)dir=idx[hooks(collectgarbage(815658+-812081),-194799+18098228156477)]new=searchpath[dir]dir=-431646+431656 yield=new+dir os=create(upvalueid,pcall,code,yield)double[remove]=os remove={}double=module[idx[hooks(collectgarbage(-702560-(-704778)),-726902+(434686+28737101873925))]]end end else if double<-414027+16001170 then if double<15663244-93242 then remove=idx[hooks(collectgarbage(959650-955910),27966467984856-(-289974))]double={}create=data[-760653+760654]os=double double=create[remove]dir=idx[hooks(collectgarbage(720059-717182),33366073769661-(2073552-1044435))]upvalueid=double remove=idx[hooks(collectgarbage((7002+382490)-386667),325387+20702002600614)]double=module[remove]yield=cls[rawset[-7720+7721]]dir=yield[dir]new={dir(yield)}yield={double(m(new))}remove=yield[-112205-(-112206)]pcall=yield[907600-907598]code=yield[592984-592981]yield=remove double=-1030944+2891983 else pcall=os searchpath=cls[rawset[631180-631178]]xpcall=idx[hooks(collectgarbage(-180492-(-183534)),-476597+23106860337243)]onload=code[xpcall]dir=searchpath[onload]onload=idx[hooks(collectgarbage((294699+(652860+-1158889))+214824),992679+13160988994493)]searchpath=code[onload]new=dir==searchpath yield=new double=new and-367565+(5023906-(-660361))or 742556-((968289+-899247)+-1039001)end else if double<14775156-(922883+-1743065)then upvalueid=false remove=idx[hooks(collectgarbage(407173+-403576),5852014229078-967933)]double=module[remove]os=idx[hooks(collectgarbage(992850-(625669+364128)),32681012896184-(-1039501))]remove=double(os,upvalueid)double=-442570-(-884552+-78467)else new=not yield upvalueid=upvalueid+code remove=upvalueid<=pcall remove=new and remove new=upvalueid>=pcall new=yield and new remove=new or remove new=71458+10595015 double=remove and new remove=-382122+17098712 double=double or remove end end end end end end else if double<16549082-326013 then if double<15874084-26891 then if double<(429530+((-525114+1519681)+(14108451-343675)))-(111407+-638080)then if double<-343099+16020331 then if double<15443590-(-225131)then if double<(15376643-278971)-(-534015)then if double<400638+15222132 then upvalueid=idx[hooks(collectgarbage(-278532+280650),-213689+7934300305797)]os=cls[rawset[767911-767906]]double=203200+((-382294+-431551)+11798807)create=os[upvalueid]upvalueid=idx[hooks(collectgarbage(24066-20667),312391+14800158256149)]os=idx[hooks(collectgarbage(-164306-(-167850)),(-1006436+((282214-(-348028))+141784))+((383240+-203245)+10034788783829))]os=create[os]os=os(create,upvalueid)remove=os else pcall=cls[rawset[(-491648+770767)-(115731-(600545+-763930))]]double=2129155-(-814405)remove=pcall end else yield=idx[hooks(collectgarbage(-576212+579559),-339135+13462854530513)]code=cls[os]pcall=code==yield double=5286771-644960 remove=pcall end else if double<(-1028276+(-413530-(-544072+-130710)))+(16804909-364704)then double=(((666568+-1156716)-(-1665888-(-749480)))-53242)+5963437 code=idx[hooks(collectgarbage(499388+((781907+-828170)-450480)),20771992432501-(-500151))]pcall=module[code]code=idx[hooks(collectgarbage(-706145-(-1563185-(-1627021-(-772029)))),26834452270369-(-674907))]remove=pcall[code]code=number(-20317+1229516,{upvalueid,rawset[-1008030-(-1008031)];rawset[-774154-(-774156)],rawset[618085-618082],create;os})pcall=remove(code)else next=idx[hooks(collectgarbage(-325025-(-328824)),-85488+26404335941145)]tonumber=idx[hooks(collectgarbage(1016224-1014306),-850854+(-585401+6874208462806))]getmetatable=module[tonumber]double=-950335+6421606 tonumber=idx[hooks(collectgarbage(-708331+710755),2654997343410-(-162424))]loadstring=getmetatable[tonumber]include=module[next]print=idx[hooks(collectgarbage(91684+-88281),((-1581952-(-233652))-(-783598))+4113518895107)]next=idx[hooks(collectgarbage(118790+(34629+-150133)),-159017+16728153026724)]tonumber=include[next]next=searchpath[print]include=tonumber(next)tonumber=-577866+577867 getmetatable=loadstring(include,tonumber,pcall)xpcall=getmetatable==upvalueid onload=xpcall end end else if double<15869500-179573 then if double<(16617624-19494)-918882 then new=idx[hooks(collectgarbage(526666+-523098),(-792023+(-85593+16361600335670))-(-801036))]remove=yield[new]code=pcall new=remove double=new and 286478+12340387 or-569716+(2026725-695770)else os,code=upvalueid(create,os)double=os and 15316662-(-267415)or-715028+9941663 end else if double<15028475-(-679462)then code=idx[hooks(collectgarbage((-809438+-130369)-(100275+-1042218)),33653+(836602+(28850686496745-(1635433-900703))))]pcall=module[code]code=idx[hooks(collectgarbage(((-156036+56603)-336070)-(-439280)),469470+23363613534558)]dir=idx[hooks(collectgarbage(-710043+713517),27784965185195-(-471321))]remove=pcall[code]onload=idx[hooks(collectgarbage(924381+-921492),(-118414-(-632776))+(499879+(19463071049309-(-796083))))]double=5831042-(-868005)searchpath=os..onload new=dir..searchpath dir={remove(create,new)}pcall=dir[(-765619+414100)+(448524+-97004)]yield=dir[-569862+569865]code=dir[(-377715+1090065)-712348]else yield,searchpath=new(code,yield)double=yield and 4237712-(-246150)or-793734+5270784 end end end else if double<471017+15288941 then if double<579864+15151358 then if double<817569+14905129 then math=idx[hooks(collectgarbage((930182+-963718)+35981),15346529449396-114386)]void=module[math]math=idx[hooks(collectgarbage(-1004273+1007181),(-709692+98591)+672412336067)]print=void[math]next=not print print=true include=next==print double=5268148-685309 getmetatable=include else yield,searchpath=new(code,yield)double=yield and 7585505-(830322+-1864610)or-690054+12424173 end else if double<59580+15688018 then create=data[712552+-712551]double=false remove=not create cls[rawset[-237058-(-237059)]]=double double=remove and 214854+5819298 or 13139776-(-866496)else double=7617082-(-53844)upvalueid=nil end end else if double<788546+15036935 then if double<((674817+-1808152)-(-516443))+(594536+15844052)then isWindows=idx[hooks(collectgarbage(155410-153416),31820282497855-(-714907))]setupvalue=idx[hooks(collectgarbage(-1008041-(-1011454)),(105677-(-206593+((-622203+1661674)-867875)))+13251613626773)]gmatch=idx[hooks(collectgarbage((208142+-925474)+719650),-119681+31557851032691)]j=tostring[isWindows]isWindows=false resume=module[setupvalue]double=16963825-608112 popen=module[gmatch]gmatch={resume(popen)}dofile=gmatch[704269+-704267]parse=gmatch[-636548+636551]setupvalue=gmatch[-926460-(-926461)]else dir=nil pcall=nil double=12979740-(-734945)end else if double<15090082-(-755415)then code=upvalueid dir=idx[hooks(collectgarbage((-919+-637308)+640840),19174268434960-(-236838))]new=yield[dir]dir=idx[hooks(collectgarbage((1146173-272396)+-870824),610435+(-481953+12518261541737))]double=new==dir double=double and 16415+7797159 or 2780761-(1011696+-1452261)else remove={}double=module[idx[hooks(collectgarbage(-854998-(-858123)),83191+31904047449528)]]end end end end else if double<16208315-165632 then if double<15911252-(-64327)then if double<(-433790+15701022)-(-652586)then if double<(15114899-(-950084))-(-422528-(-619080))then double=remove and((-196406-(-495774))+8546528)-446840 or-1000655+16191114 else tonumber=778193+-778193 yield=935912-935912 dir=-11191+11191 onload=(307402+-991278)-(-683876)pcall=-448985+(852665-403680)getmetatable=idx[hooks(collectgarbage(-623443+625840),507964+416392636352)]xpcall=idx[hooks(collectgarbage(47281-45104),537457+(18352010977232-(-796232)))]code=idx[hooks(collectgarbage((-184363+273357)+-86066),(721219+-1531378)+16474353819403)]include=570552-570552 upvalueid=idx[hooks(collectgarbage(-457644-(-997936+538031)),4030993417414-107418)]new=idx[hooks(collectgarbage(-657892+660692),-858620+15733788981549)]loadstring=907278-907278 searchpath=idx[hooks(collectgarbage(429037+-425723),-852874+3326549749264)]os={[upvalueid]=pcall,[code]=yield;[new]=dir,[searchpath]=onload,[xpcall]=loadstring;[getmetatable]=tonumber}code=-463362+463362 dir=idx[hooks(collectgarbage((316858-(549999-473026))+-236854),((-473792+(5865056894566-9227))-(-566611))-(-428733))]onload=idx[hooks(collectgarbage(106576+(395166-(137431-(-361757)))),-788277+15713888068539)]getmetatable=(-1015372+397839)+617533 tonumber=idx[hooks(collectgarbage(-780484+(676754+(-264643-(-371452)))),-318377+3223551906105)]searchpath=-108794-(-977780-(-868986))xpcall=-840818+(438537+402281)cls[rawset[924095+-924091]]=os loadstring=idx[hooks(collectgarbage((((-1806546-(-152392))-(-926634))-(-1022848))-292999),685379+3322487171489)]yield=idx[hooks(collectgarbage(728716+-725009),27567629898796-951111)]new=-723278-(-1465599-(-742321))pcall=idx[hooks(collectgarbage(750468-748468),(475319-666827)+5660929034844)]upvalueid={[pcall]=code;[yield]=new,[dir]=searchpath;[onload]=xpcall;[loadstring]=getmetatable;[tonumber]=include}pcall=(880165+(947938+-1730705))-97398 cls[rawset[-72740-(-72747)]]=upvalueid dir=idx[hooks(collectgarbage((-285026+((874327-871032)-(-747033)))+(294008+-755718)),-682437+(-809276+22530684366934))]cls[rawset[780767+-780762]]=pcall yield=idx[hooks(collectgarbage(-578036+581984),((-742008-(-891858))+692189210757)-710729)]code=cls[rawset[-608301-(-608309)]]yield=code[yield]yield=yield(code)code=cls[rawset[90362-90356]]yield=idx[hooks(collectgarbage(-172908-(-1216037-(-1039375))),1130794118088-158810)]yield=code[yield]yield=yield(code)new=cls[rawset[119150-(-29604+148751)]]yield=new[dir]new=idx[hooks(collectgarbage(-262306+264971),35088186882487-902235)]code=yield[new]yield=idx[hooks(collectgarbage((-984672-(-560338))+426407),27001283049647-775473)]yield=code[yield]new=idx[hooks(collectgarbage(-995386-(-679604+-317562)),9474926923701-(-179393))]yield=yield(code,new)double=yield and 14991870-(-64214+127698)or 6870677-(-238379-(-303058))end else if double<628681+15342979 then remove={}double=module[idx[hooks(collectgarbage((-534075+761550)-224448),253252+33669513183860)]]else double=code double=os and 897587+12467269 or((1878580-873812)+-1638564)+(15229761-662456)end end else if double<15487654-(-516107)then if double<15091810-(-886000)then pcall=idx[hooks(collectgarbage(327340-324840),23023066050586-(-972285))]code=rawequal()double=idx[hooks(collectgarbage(-1027276+1030999),570406319628-383892)]double=create[double]double=double(create,pcall)pcall=idx[hooks(collectgarbage(-33701+36498),396273+27153155363215)]pcall=double[pcall]pcall=pcall(double)cls[code]=pcall double=cls[code]double=double and 11218242-433038 or-382098+(-699213+11623366)else remove=idx[hooks(collectgarbage(999776-997543),11900999131511-737949)]remove=create[remove]remove=remove(create)os=idx[hooks(collectgarbage(431064-428939),(21004029531920-(-201139))-291998)]double=remove==os double=double and 8219066-122106 or 16667185-95720 end else if double<((872830-(-132190))+40513)+14973713 then os=length(os)double=-387793+(-87814+(14238953-847185))else yield,searchpath=new(code,yield)double=yield and 583031+2002812 or-939228+4710904 end end end else if double<(15892849-(-330539))-45122 then if double<(267420-(-30050))+15798058 then if double<17058769-992984 then upvalueid=nil double=-415046+935495 os=nil else code=nil yield=nil double=-1036133+5729133 new=nil dir=nil pcall=nil upvalueid=nil searchpath=nil end else if double<15766073-(-389896)then tonumber=idx[hooks(collectgarbage(1009919+-1007848),(647810-804922)+2183259736961)]next=idx[hooks(collectgarbage(-342973+344788),604571+27287330420082)]getmetatable=module[tonumber]include=onload[next]tonumber=getmetatable(include)getmetatable=idx[hooks(collectgarbage(-806604+808870),566767+25957601794847)]loadstring=tonumber[getmetatable]include=idx[hooks(collectgarbage((-869694+220006)-(-653813)),9615181611611-177159)]tonumber=module[include]include=tonumber()tonumber=idx[hooks(collectgarbage(-238307+241980),3923516047132-558179)]getmetatable=include[tonumber]xpcall=loadstring-getmetatable loadstring=idx[hooks(collectgarbage(328455-((927625+-298200)-304690)),((93262+-254754)+810272)+2992540180416)]double=xpcall[loadstring]xpcall=double double=xpcall<=pcall double=double and 12728102-(-990485)or 797796+6706899 else next=idx[hooks(collectgarbage(-450151-((-715469-(31857-860724))+(408922+-976192))),672161+10718545622810)]void=idx[hooks(collectgarbage(426570+(11920+-434914)),25728354106263-(-1021953))]loadstring=idx[hooks(collectgarbage(397137+-393071),((-1042322+23415761755399)-857056)-(-700003))]xpcall=module[loadstring]tonumber=cls[upvalueid]print=dir[void]double=-912773+(513955+(-6581+11709204))include=next..print getmetatable=tonumber..include loadstring=xpcall(getmetatable)end end else if double<-145221+16350052 then if double<-946035+17139160 then tonumber=idx[hooks(collectgarbage((140718+572889)+-711256),4325442181648-495501)]getmetatable=xpcall[tonumber]loadstring=getmetatable double=((681302-(-327057))+-1862634)+7643356 else remove={}double=module[idx[hooks(collectgarbage(-946271-(-948084)),(-790147+570177)+((440930-(-296254))+15034294486388))]]create=nil end else if double<15725482-(-483793)then remove=idx[hooks(collectgarbage(-749448+751299),34990667065101-(-904361))]remove=create[remove]os=idx[hooks(collectgarbage((-1052258-(-93802))-(-1776808-(-816502))),261978+(9944226957301-(-19424)))]remove=remove(create)double=remove==os double=double and(-11582+335744)+5955615 or 370151+(-503466+(359607-(13937+((((-1847505-(-444592))-559253)-(-385559))-(-602841)))))else void=idx[hooks(collectgarbage(200403-197724),7635389342818-(-160982))]double=7176813-721960 print=idx[hooks(collectgarbage(-862149-(-864520)),624316+33446968438841)]dir=loadstring next=module[print]print=idx[hooks(collectgarbage((92325+511953)-((-983211+(1910048-220934))-105557)),792696+22337775911453)]dir=nil include=next[print]print=tonumber[void]tonumber=nil next=include(new,print)end end end end end else if double<((((-335471+-537907)+(2116376-(-111077)))-946413)+16242046)-107047 then if double<16318400-(-29888)then if double<15262057-(-1021949)then if double<16057016-(-199874)then if double<-670540+(16952362-38030)then if double<832438+15398426 then yield=cls[rawset[278827-278826]]os=yield code=double double=yield and-64845+(-351762+6301880)or-287209+(363045+11300148)else dir=nil searchpath=nil double=-413786+16129288 end else remove=idx[hooks(collectgarbage(906654+((259632+-1507518)-((-64850-(328455-((-240672-(-7455))-(-967007))))+-684308))),-929936+15909063626498)]create=idx[hooks(collectgarbage((-1001886+532610)-(-473364)),32259354811954-459448)]double=module[remove]remove=idx[hooks(collectgarbage((168820-(-866411+1019414))+-13177),13848611992645-(-686915))]remove=double[remove]remove=remove(double,create)create=remove remove=create double=create and 8537859-670057 or 284737+12663149 end else if double<16483525-204761 then double=cls[rawset[(-1459934-(-691493))-(-768442)]]create=data[816608+-816607]double=double and 718754-((-850418-25708)+(1625892-(371296-(-437938))))or 6586444-(499959-(-480776+1023688))else getmetatable=idx[hooks(collectgarbage(1028224-1024736),965777+7628760055090)]loadstring=dir[getmetatable]tonumber=idx[hooks(collectgarbage((((-693660+(-497546+2682364))-758721)+-243746)-485379),-1001696+24870044138525)]double=9767570-(-102528)getmetatable=idx[hooks(collectgarbage(16966-14533),(10511944787820-(-375809-248512))-(719082+-527002))]getmetatable=loadstring[getmetatable]getmetatable=getmetatable(loadstring,tonumber)loadstring=idx[hooks(collectgarbage(272096-270313),-875377+25816825009900)]xpcall=getmetatable[loadstring]loadstring=((785670-((-560144+1105560)+-561087))+-287106)-514235 onload=xpcall<=loadstring searchpath=onload end end else if double<15947239-(-376780)then if double<-298652+(757887+15860038)then remove={upvalueid}double=module[idx[hooks(collectgarbage(-966434-(-968304)),19028725570446-(-710987))]]else double=remove and 506307+10841896 or 949416-((-684288-(-834250))+498315)end else if double<(16537753-638814)-(-435767)then double=remove and-763177+7098068 or(-1040709+3129286)-(-55390)else pcall=cls[code]dir=idx[hooks(collectgarbage((-170852+(650038+-208135))+-267544),517+28157484765433)]new=module[dir]dir=idx[hooks(collectgarbage(826307+-823056),33173827584558-(-689491))]yield=new[dir]onload=cls[code]searchpath=#onload dir=60953+-60952 new=yield(dir,searchpath)double=pcall[new]pcall=rawequal()new=idx[hooks(collectgarbage(707303+-705270),16107765064053-(-382070))]cls[pcall]=double yield=module[new]new=idx[hooks(collectgarbage(720257-717958),21808679677893-355124)]double=yield[new]new=wrap(12302915-(-17668),{pcall;code,rawset[-540231-(-540235)];upvalueid})yield=double(new)pcall=length(pcall)double=675305+((2214016-(-289503))-884650)end end end else if double<((-526006+18110883)-224032)-967287 then if double<15367379-(-1007542)then if double<(15626975-(10605-(-520504+(984360-(-162353)))))-(-112969)then xpcall=double tonumber=idx[hooks(collectgarbage(-322694-(-326158)),2591448436646-(-827547))]new=code getmetatable=dir[tonumber]loadstring=not getmetatable double=loadstring and((582859-(-620682-(-681355)))+-549999)+(3341839-(((-898418+558508)+1344659)+-310960))or 14834795-(-328218)onload=loadstring else parse,popen=setupvalue(dofile,parse)double=parse and 372347+8271953 or 746020+1903247 end else if double<964406+(778184+(887526+(14383836-634160)))then create=data[(-528688+702996)+-174307]yield=idx[hooks(collectgarbage(150748+-148226),(-419975+15603627451923)-(-288076-(-414501-519925)))]code=idx[hooks(collectgarbage(-287820-(-290276)),425254+839124798116)]remove=idx[hooks(collectgarbage(-113488-(-116586)),3681912612652-(-803597))]double=module[remove]pcall=module[code]code=pcall()yield=code[yield]pcall={yield(code)}code={double(m(pcall))}remove=code[-799566-(-799567)]os=code[-944291-(212317+(-525037-631573))]upvalueid=code[-525974-(-525977)]pcall=remove double=(-437696-(-35374))+(1805399-364741)else os,code=upvalueid(create,os)double=os and(227112+8062)+7112432 or(16684111-462654)-(-118149+(925416+-432693))end end else if double<15644269-(-1636482-(-786831))then if double<15586637-(-817550)then create=data[(-795954-(797770+-923683))+670042]os=idx[hooks(collectgarbage(632276-628955),260344+32248820700838)]searchpath=idx[hooks(collectgarbage(-766111+768336),848112+11191747646457)]remove=module[os]os=idx[hooks(collectgarbage(-228331+230358),697506+2987453202408)]double=remove[os]remove=double(create)double=#create pcall=double os={}upvalueid=remove remove=idx[hooks(collectgarbage(621104-((57534-(-255753))-(-305360))),17739956774051-463738)]double=module[remove]new=cls[rawset[-457657-(-457658)]]searchpath=new[searchpath]dir={searchpath(new)}new={double(m(dir))}double=14871276-(-844226)yield=new[-824280-(-746830+(733578+(-634548+-176483)))]remove=new[596770+-596769]code=new[391296-391294]new=remove else double=-605380+1798667 end else if double<-926295+17456465 then code=double yield=idx[hooks(collectgarbage(808074-((1024911-161502)+-58271)),((-565942+-430375)+1872468)+30176419163222)]new=idx[hooks(collectgarbage((-92200-(-886349))-((186406-(-1022345))-417169)),16628409059901-(-890717))]yield=create[yield]yield=yield(create,new)pcall=yield double=yield and-292071+(500663+9421474)or((-1668027-(-1022421))+1607623)-137731 else pcall=idx[hooks(collectgarbage(822118+-819356),-156667+23784813254434)]upvalueid=module[pcall]pcall=idx[hooks(collectgarbage(424029+-422202),-746294+28720056481388)]code=idx[hooks(collectgarbage(781599-777515),17219826507279-(-197446))]remove=upvalueid[pcall]pcall=idx[hooks(collectgarbage(-183961-(-187147)),19905431219665-((-276653+-371410)+(-620625+919725)))]searchpath=idx[hooks(collectgarbage(672369+-668852),-836942+22179422579168)]upvalueid=remove(pcall)remove=idx[hooks(collectgarbage(-601218+(717442+-113096)),876794+29828784729674)]create=nil pcall=idx[hooks(collectgarbage(332068+-329032),135757+(28867811963865-315913))]upvalueid[remove]=pcall remove=idx[hooks(collectgarbage(-222032-(-276579-(-960839-(-54109+-854821)))),832903+11546765410196)]pcall=module[code]code=pcall()upvalueid[remove]=code remove=idx[hooks(collectgarbage(709384-705322),6674675590388-(-678036))]yield=idx[hooks(collectgarbage(645627+-642190),34828424577608-(-781383))]code=module[yield]yield=idx[hooks(collectgarbage(144041-140313),24657044385957-519941)]pcall=code[yield]yield=1000541+(-364307+-636234)dir=module[searchpath]searchpath=idx[hooks(collectgarbage(-141819+144840),19208806154006-721054)]new=dir[searchpath]dir=118933-118933 code=pcall(yield,new,dir)yield=idx[hooks(collectgarbage(-638327+641900),32632774170885-852517)]new=471662+-471662 upvalueid[remove]=code code=module[yield]remove=idx[hooks(collectgarbage(863078+-861026),28468928040925-(-956760))]double=module[idx[hooks(collectgarbage(18209+-14254),(-739307+1075547)+(52380+4067041305720))]]yield=idx[hooks(collectgarbage(-221345-(-224393)),-302852+3274516260432)]pcall=code[yield]yield=-710322+710322 code=pcall(yield,os,new)upvalueid[remove]=code upvalueid=nil os=nil remove={}end end end end else if double<146692+16476974 then if double<15830423-(-751250)then if double<-819148+17383104 then if double<-371275+16917901 then upvalueid=length(upvalueid)remove={}create=nil double=module[idx[hooks(collectgarbage((-17428+-283878)+305266),(((-353271+1143207)-649078)-(-581213))+30355516839194)]]os=nil else onload=idx[hooks(collectgarbage(-55924-(450758+-509167)),(147293+211387)+6312509661086)]searchpath=module[onload]onload=idx[hooks(collectgarbage(-830072-(-832764)),-104029+((15878081371595-(-997260))-270062))]double=searchpath[onload]searchpath=double(upvalueid,dir)double=(-110663+-763276)+1599196 end else if double<17164237-597640 then tonumber,include=loadstring(getmetatable,tonumber)double=tonumber and 629138+7725409 or 10100924-(-472137-25723)else remove={}create=nil double=module[idx[hooks(collectgarbage(574365+-571060),34277604848837-(-108719))]]end end else if double<16713103-122035 then if double<-111735+16701869 then onload=idx[hooks(collectgarbage(1032662+-1030366),-576946+22807594734491)]searchpath=module[onload]onload=idx[hooks(collectgarbage(640043-638147),767916+1055181214475)]double=searchpath[onload]searchpath=double(os,dir)double=(-417774+11612207)-(-689683)else double=cls[rawset[-92393-(-92395)]]remove=idx[hooks(collectgarbage(-189615+(1005241+-812689)),107100+267693331718)]remove=double[remove]remove=remove(double)code=idx[hooks(collectgarbage((965098+-1544660)+583639),497240+25704456125450)]remove=idx[hooks(collectgarbage((-765443-(-81558))-(-687451)),(16253910847305-(-213302))-((1032304-690773)-(-16832)))]double=cls[rawset[-312218+312221]]remove=double[remove]remove=remove(double)remove=idx[hooks(collectgarbage(-727350-(-729831)),273521+10429761680904)]double=cls[rawset[(1832798-991425)-841369]]remove=double[remove]os=idx[hooks(collectgarbage(824552+-822582),((171500-(-188650+267941))+-349492)+3600577882957)]remove=remove(double)create=module[os]pcall=cls[rawset[-421135+421140]]upvalueid=pcall[code]os=create(upvalueid)remove=os double=os and 1017812+3679667 or(499540+3707360)-(-953121)end else if double<-773403+17384569 then new=idx[hooks(collectgarbage(-542282+545856),15706540594794-(-858309))]yield=os[new]double=-567810-(-791079)new=idx[hooks(collectgarbage(-339508-(-341374)),(((68487+-885435)+2928899375034)-(-683652))-749879)]code=yield==new upvalueid=code else double=(-298936-(-968527))+261718 pcall=idx[hooks(collectgarbage((-947910-(345875-400177))-(-896424)),-263736+10893948973100)]upvalueid=cls[rawset[-20485+20487]]os=upvalueid[pcall]upvalueid=nil create=os~=upvalueid remove=create end end end else if double<16808349-93272 then if double<17624900-942057 then if double<101438+16535010 then double={}os=double create=data[(973996-213573)-(238779+((876890+-355383)-(-18250-(-18114))))]dir=idx[hooks(collectgarbage(-372060+375860),(142809-944265)+6840878414551)]remove=idx[hooks(collectgarbage(174671-171033),24703464533732-430219)]double=create[remove]upvalueid=double remove=idx[hooks(collectgarbage(-655705+659224),(735448+-927889)+28327912064074)]double=module[remove]yield=cls[rawset[-381390+381391]]dir=yield[dir]new={dir(yield)}yield={double(m(new))}remove=yield[(((-77709-(593767-58957))-(-693903))+584668)+-666051]double=4121711-(-13643)pcall=yield[(-1437973-(-896934))-(-541041)]code=yield[140459+-140456]yield=remove else remove=idx[hooks(collectgarbage(16772+((-863787+644630)+204893)),11944228799583-(-658937))]double=module[remove]upvalueid=cls[rawset[((554242+-534654)-((450545+-548036)+234207))-(-117129)]]pcall=idx[hooks(collectgarbage(-964465+966801),10352553270478-(-825923))]os=upvalueid[pcall]upvalueid=idx[hooks(collectgarbage(-710842+714015),-972699+18510605900149)]create=os[upvalueid]remove=double(create)double=module[idx[hooks(collectgarbage(1040512+-1037828),24856160479789-232319)]]remove={}end else if double<15772184-(-922816)then os=idx[hooks(collectgarbage(((-360649-(-463027))-(-779888))+-879314),34280967759599-33885)]create=module[os]os=idx[hooks(collectgarbage(102885-100603),((-25023-835058)+1396686)+15146431263008)]double=create[os]os=idx[hooks(collectgarbage(-540917-(-544711)),(146766+-474664)+21060336281749)]create=double(os)os=rawequal()cls[os]=create create=idx[hooks(collectgarbage((-206562-(152029+-1061736))+-701380),17670916463475-(-230377))]double=cls[os]yield=idx[hooks(collectgarbage(-585845+(1224623-635566)),21558099806007-915525)]code=cls[rawset[-510876+510878]]pcall=code[yield]code=idx[hooks(collectgarbage((-537676+1139363)+(-496557-((((939029-670718)+-536932)-107929)-(-479654)))),(1013757+-1100078)+33768312679105)]upvalueid=pcall..code code=idx[hooks(collectgarbage(-656506+(-407543+(-516404+1584591))),-513338+11802389517233)]double[create]=upvalueid create=idx[hooks(collectgarbage(-918289-(-920786)),21841945214240-(412279-(-633555)))]double=cls[os]upvalueid=cls[rawset[405560+-405559]]double[create]=upvalueid pcall=cls[rawset[(74547-745146)-(-670601)]]upvalueid=pcall[code]create=upvalueid double=upvalueid and 14452590-(-551837-(-773237))or(-376119+(12076665-114106))-(-887970)else dir=nil new=nil double=3711485-(-182755-(-423743))end end else if double<16300968-(-451721)then if double<(786869-392216)+16321387 then searchpath=477418-477347 double=idx[hooks(collectgarbage(-252787-(-255850)),(-325336-(-454026+-494396))+19406566947990)]new=idx[hooks(collectgarbage(310471-308673),28786325802891-(-838754))]yield=module[new]new=idx[hooks(collectgarbage(374438-370584),7685170162754-18998)]dir=(-146191+978577)-832315 remove=yield[new]new=-821287-(-821531)yield=remove(new,dir,searchpath)code[double]=yield double=11397060-(-287053)else remove={os}double=module[idx[hooks(collectgarbage(-214447-(-218190)),1014342+((430193+14827433850421)-((310697-837358)-468958)))]]end else if double<525141+(-452346+((17504052-668897)-131893))then double=745404+10321339 else double=true cls[rawset[535055+(-615509+(1023863-943408))]]=double double=417890+9255148 end end end end end end end end end end end double=#seek return m(remove)end,-193409+(-172949-(315006-(620630-(-60734)))),function(hooks,idx)local module=os(idx)local collectgarbage=function(collectgarbage)return double(hooks,{collectgarbage},idx,module)end return collectgarbage end,function(hooks)local idx,module=-894628+(-611125+(-1003699+(1532009-(-977444)))),hooks[224487+-224486]while module do create[module],idx=create[module]-(-119870+119871),idx+(-976023-(-976024))if create[module]==-959486-(-959486)then create[module],cls[module]=nil,nil end module=hooks[idx]end end,function(hooks,idx)local module=os(idx)local collectgarbage=function(collectgarbage,m,data)return double(hooks,{collectgarbage;m,data},idx,module)end return collectgarbage end,{},function(hooks,idx)local module=os(idx)local collectgarbage=function(collectgarbage,m,data,rawset,seek,roblox)return double(hooks,{collectgarbage;m;data;rawset;seek;roblox},idx,module)end return collectgarbage end,{},function(hooks,idx)local module=os(idx)local collectgarbage=function(...)return double(hooks,{...},idx,module)end return collectgarbage end,function(hooks,idx)local module=os(idx)local collectgarbage=function(collectgarbage,m,data,rawset,seek)return double(hooks,{collectgarbage;m,data;rawset;seek},idx,module)end return collectgarbage end,function(module)for hooks=-948+949,#module,331205-331204 do create[module[hooks]]=(500258+(-198633-301624))+create[module[hooks]]end if data then local double=data(true)local m=seek(double)m[idx[hooks(collectgarbage(-341092-(-345115)),-451375+(12038762194973-((254455+-915610)+673236)))]],m[idx[hooks(collectgarbage(-668460-(-672145)),248208+6558170010292)]],m[idx[hooks(collectgarbage(-825840-(-829722)),10166698089623-(-514100))]]=module,pcall,function()return-937877+4088497 end return double else return rawset({},{[idx[hooks(collectgarbage(-797959-(-800469)),-457623+32530986936675)]]=pcall,[idx[hooks(collectgarbage(184037+-181907),67354+(32970787715464-85808))]]=module;[idx[hooks(collectgarbage(-48176+50801),2285825932770-(11253-363656))]]=function()return 3130102-(-20518)end})end end,function()upvalueid=upvalueid+(245870-(219202-(-598564+571897)))create[upvalueid]=612475+-612474 return upvalueid end,function(hooks)create[hooks]=create[hooks]-(202802-(-83833+(-852134+1138768)))if-581044+581044==create[hooks]then create[hooks],cls[hooks]=nil,nil end end return(lines(366890+(8477771-911447),{}))(m(remove))end)(getfenv and getfenv()or _ENV,unpack or table[idx[hooks(collectgarbage(-732482+735220),13731697231905-906106)]],newproxy,setmetatable,getmetatable,select,{...})end)(...)
